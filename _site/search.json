[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jacob Jameson",
    "section": "",
    "text": "I am a PhD student at Harvard University studying Health Policy and Decision Sciences. I am currently advised by Dr.¬†Soroush Saghafian and work in The Public Impact Analytics Science Lab (PIAS-Lab) at Harvard. I also hold a research position in Boston Children‚Äôs Hospital General Pediatric Unit.\nI use tools from operations research, engineering, computer science, and economics to inform decision being made under conditions of uncertainty."
  },
  {
    "objectID": "index.html#programming",
    "href": "index.html#programming",
    "title": "Jacob Jameson",
    "section": "Programming",
    "text": "Programming\nI use R to develop and\nI am a PhD student at Harvard University studying Health Policy and Decision Sciences. I am currently advised by Dr.¬†Soroush Saghafian and work in The Public Impact Analytics Science Lab (PIAS-Lab) at Harvard. I also hold a research position in Boston Children‚Äôs Hospital General Pediatric Unit.\nI study the quantitative techniques that are used for informing decision-making at the individual and population levels, including decision analysis, risk analysis, cost-benefit and cost-effectiveness analysis, disease and policy simulation modeling, and behavioral decision theory. My research aims to quantify trade offs of harms versus benefits to directly inform a decision being made under conditions of uncertainty.\nPrior to starting my PhD, I completed an M.S. in Computational Analysis and Public Policy at The University of Chicago. Before that, I was a middle school mathematics teacher in New Haven, CT. Aside from research I am very interested in K-12 computer science education."
  },
  {
    "objectID": "teaching.html",
    "href": "teaching.html",
    "title": "Teaching",
    "section": "",
    "text": "My teaching experiences are quite diverse. The summer after completing my undergraduate degree, I began teaching in a highschool Algebra II credit recovery program in The School District of Philadelphia. I then transitioned to a full-time middle school mathematics position in New Haven, CT, where I spent the next two years falling in love with the profession. During my second year, I held the Grade-level Chair position for the 8th grade and consulted for the Achievement First Charter Network on middle school mathematics curriculum. I am also passionate about computer science education, and have experience running Girls Who Code clubs and participating in the Code.org Middle and High School Computer Science Professional Learning Program for educators in computer science. Since teaching at the middle school level, I have been fortunate to hold a variety of teaching positions at The University of Chicago and Harvard University. I hope to pursue a teaching career after completing my PhD.\n\nHarvard T.H. Chan School of Public Health\n\nDecision Science for Public Health. Teaching Fellow (2023)\n\n\n\nHarvard Kennedy School\n\nMath Camp. Instructor (2023)\nBig Data and Machine Learning. Teaching Fellow (2024)\nGame Theory. Teaching Fellow (2023, 2024)\nData and Programming for Policymakers. Course Assistant (2023)\nResources, Incentives, and Choices I: Markets and Market Failures. Teaching Fellow (2022, 2023)\n\n\n\nThe University of Chicago, Center for Translational Science\n\nData, Quantitative Methods, and Applications in HSR. Teaching Assistant and Instructor (2021,2022,2023)\nIntroduction to Health Services Research. Teaching Assistant (2021)\n\n\n\nThe University of Chicago, Department of Computer Science\n\nMachine Learning for Public Policy. Teaching Assistant (2022)\nMathematics for Data Analysis and Computer Science. Teaching Assistant (2022)\n\n\n\nThe University of Chicago Booth School of Business\n\nIntroductory Finance. Teaching Assistant (2020-2022)\nData Analysis in R and Python. Teaching Assistant (2021)\n\n\n\nThe University of Chicago Harris School of Public Policy\n\nCoding Lab for Public Policy. Instructor and Curriculum Developer (2021)\n\n\n\nTeach For America, Achievement First Amistad Academy Middle School\n\n7th/8th Grade Mathematics. Mathematics Teacher (2018-2020)"
  },
  {
    "objectID": "teaching.html#introduction-to-r-programming",
    "href": "teaching.html#introduction-to-r-programming",
    "title": "Teaching",
    "section": "Introduction to R Programming",
    "text": "Introduction to R Programming\nThis page contains the content for the ‚ÄúIntroduction to Data Analysis in R‚Äù mini-course. The goal is to introduce R programming concepts with a focus on preparing and analyzing data, and conducting statistical simulations. We will cover how to read data into R, manipulate data with a suite of tools from the tidyverse package dplyr. We will also discuss some basic programming concepts including data types and operators. This mini-course is aimed at people with no programming background that are looking for a gentle and practical introduction to data analysis in R.\n\nHarvard T.H. Chan School of Public Health\n\nDecision Science for Public Health. Teaching Fellow (2023)\n\n\n\nHarvard Kennedy School\n\nMath Camp. Instructor (2023)\nBig Data and Machine Learning. Course Assistant (2023)\nGame Theory. Teaching Fellow (2023)\nData and Programming for Policymakers. Course Assistant (2023)\nResources, Incentives, and Choices I: Markets and Market Failures. Teaching Fellow (2022, 2023)\n\n\n\nThe University of Chicago, Center for Translational Science\n\nData, Quantitative Methods, and Applications in HSR. Teaching Assistant and Instructor (2021,2022,2023)\nIntroduction to Health Services Research. Teaching Assistant (2021)\n\n\n\nThe University of Chicago, Department of Computer Science\n\nMachine Learning for Public Policy. Teaching Assistant (2022)\nMathematics for Data Analysis and Computer Science. Teaching Assistant (2022)\n\n\n\nThe University of Chicago Booth School of Business\n\nIntroductory Finance. Teaching Assistant (2020-2022)\nData Analysis in R and Python. Teaching Assistant (2021)\n\n\n\nThe University of Chicago Harris School of Public Policy\n\nCoding Lab for Public Policy. Instructor and Curriculum Developer (2021)\n\n\n\nTeach For America, Achievement First Amistad Academy Middle School\n\n7th/8th Grade Mathematics. Mathematics Teacher (2018-2020)"
  },
  {
    "objectID": "Intro R.html",
    "href": "Intro R.html",
    "title": "Introduction to Programming in R",
    "section": "",
    "text": "This page contains the content for the ‚ÄúIntroduction to Data Analysis in R‚Äù mini-course. The goal is to introduce R programming concepts with a focus on preparing and analyzing data, and conducting statistical simulations. We will cover how to read data into R, manipulate data with a suite of tools from the tidyverse package dplyr. We will also discuss some basic programming concepts including data types and operators.\nThis mini-course is aimed at people with no programming background that are looking for a gentle and practical introduction to data analysis in R.\nEach Module involves:\n\na pre-recorded lecture with guided practice exercises\na corresponding lab to practice the skills taught in the video and stretch your thinking\n\nThe labs are an essential part of the learning process as they walkthrough the use of many key functions and topics that are not explicitly covered in the videos.\n\nAdditional Resources\n\n\n\ntidyverse cheetsheets start with dplyr and ggplot\n\n\nR for Data Science: free online book with clear explanations of many tidyverse functions, the book to read on data analysis with R"
  },
  {
    "objectID": "Intro R.html#about-this-course",
    "href": "Intro R.html#about-this-course",
    "title": "Introduction to Programming in R",
    "section": "",
    "text": "This page contains the content for the ‚ÄúIntroduction to Data Analysis in R‚Äù mini-course. The goal is to introduce R programming concepts with a focus on preparing and analyzing data, and conducting statistical simulations. We will cover how to read data into R, manipulate data with a suite of tools from the tidyverse package dplyr. We will also discuss some basic programming concepts including data types and operators.\nThis mini-course is aimed at people with no programming background that are looking for a gentle and practical introduction to data analysis in R.\nEach Module involves:\n\na pre-recorded lecture with guided practice exercises\na corresponding lab to practice the skills taught in the video and stretch your thinking\n\nThe labs are an essential part of the learning process as they walkthrough the use of many key functions and topics that are not explicitly covered in the videos.\n\nAdditional Resources\n\n\n\ntidyverse cheetsheets start with dplyr and ggplot\n\n\nR for Data Science: free online book with clear explanations of many tidyverse functions, the book to read on data analysis with R"
  },
  {
    "objectID": "Intro R.html#table-of-contents",
    "href": "Intro R.html#table-of-contents",
    "title": "Introduction to Programming in R",
    "section": "Table of Contents",
    "text": "Table of Contents"
  },
  {
    "objectID": "dataviz.html",
    "href": "dataviz.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Data can‚Äôt speak for itself; it‚Äôs up to you to give it a voice. Try to speak truthfully. - Ronald Coase\n\n\n\n\n\n\n\n\n  \n\n\n\n\nTidy Tuesday, 2023 Week 7 üé¨\n\n\n\n\n\n\n\nTidy Tuesday\n\n\nR\n\n\n\n\n#TidyTuesday Week 7, 2023: Hollywood Age Gaps\n\n\n\n\n\n\nJacob Jameson\n\n\n\n\n\n\n  \n\n\n\n\nTidy Tuesday, 2023 Week 6 üìà\n\n\n\n\n\n\n\nTidy Tuesday\n\n\nR\n\n\n\n\n#TidyTuesday Week 6, 2023: Big Tech Stock Prices\n\n\n\n\n\n\nJacob Jameson\n\n\n\n\n\n\n  \n\n\n\n\nTidy Tuesday, 2023 Week 5 üê±\n\n\n\n\n\n\n\nTidy Tuesday\n\n\nR\n\n\n\n\n#TidyTuesday Week 5, 2023: Pet Cats UK\n\n\n\n\n\n\nJacob Jameson\n\n\n\n\n\n\n  \n\n\n\n\nTidy Tuesday, 2023 Week 4 üêª\n\n\n\n\n\n\n\nTidy Tuesday\n\n\nR\n\n\n\n\n#TidyTuesday Week 4, 2023: ALONE\n\n\n\n\n\n\nJacob Jameson\n\n\n\n\n\n\n  \n\n\n\n\nTidy Tuesday, 2023 Week 3 üé®\n\n\n\n\n\n\n\nTidy Tuesday\n\n\nR\n\n\n\n\n#TidyTuesday Week 3, 2023: Art History\n\n\n\n\n\n\nJacob Jameson\n\n\n\n\n\n\n  \n\n\n\n\nTidy Tuesday, 2023 Week 2 üê¶\n\n\n\n\n\n\n\nTidy Tuesday\n\n\nR\n\n\n\n\n#TidyTuesday Week 2, 2023: Project FeederWatch\n\n\n\n\n\n\nJacob Jameson\n\n\n\n\n\n\n  \n\n\n\n\nTidy Tuesday, 2023 Week 1 üè°\n\n\n\n\n\n\n\nTidy Tuesday\n\n\nR\n\n\n\n\n#TidyTuesday Week 1, 2023: Bring your own data from 2022!\n\n\n\n\n\n\nJacob Jameson\n\n\n\n\n\n\n  \n\n\n\n\nHealthcare Area Chart\n\n\n\n\n\n\n\narea chart\n\n\nD3\n\n\n\n\nIn 2020, a greater percent of previously uninsured people in the U.S. with low incomes were enrolled in Medicare or Medicaid.\n\n\n\n\n\n\nJacob Jameson\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Data/viz/2023-01-24 Tidy Tuesday/TT_wk4.html",
    "href": "Data/viz/2023-01-24 Tidy Tuesday/TT_wk4.html",
    "title": "Tidy Tuesday, 2023 Week 4 üêª",
    "section": "",
    "text": "Data for this week‚Äôs TidyTuesday comes from the TV show ALONE!\nHere is a little more information about the data:"
  },
  {
    "objectID": "Data/viz/2023-01-24 Tidy Tuesday/TT_wk4.html#my-plot",
    "href": "Data/viz/2023-01-24 Tidy Tuesday/TT_wk4.html#my-plot",
    "title": "Tidy Tuesday, 2023 Week 4 üêª",
    "section": "My plot",
    "text": "My plot\n\nüêª ALONE\n\nCode here"
  },
  {
    "objectID": "Data/viz/2023-02-14 Tidy Tuesday/TT_wk7.html",
    "href": "Data/viz/2023-02-14 Tidy Tuesday/TT_wk7.html",
    "title": "Tidy Tuesday, 2023 Week 7 üé¨",
    "section": "",
    "text": "Week\nDate\nData\nSource\nArticle\n\n\n\n\n7\n2023-02-14\nHollywood Age Gaps\nHollywood Age Gap Download Data\nHollywood Age Gap\nHere is a little more information about the data: # Hollywood Age Gaps\nThe data this week comes from Hollywood Age Gap via Data Is Plural.\nThe data follows certain rules:\nWe previously provided a dataset about the Bechdel Test. It might be interesting to see whether there is any correlation between these datasets! The Bechdel Test dataset also included additional information about the films that were used in that dataset.\nNote: The age gaps dataset includes ‚Äúgender‚Äù columns, which always contain the values ‚Äúman‚Äù or ‚Äúwoman‚Äù. These values appear to indicate how the characters in each film identify. Some of these values do not match how the actor identifies. We apologize if any characters are misgendered in the data!"
  },
  {
    "objectID": "Data/viz/2023-02-14 Tidy Tuesday/TT_wk7.html#my-plot",
    "href": "Data/viz/2023-02-14 Tidy Tuesday/TT_wk7.html#my-plot",
    "title": "Tidy Tuesday, 2023 Week 7 üé¨",
    "section": "My plot",
    "text": "My plot\n\nüé¨ Hollywood Age Gaps\n\nCode here"
  },
  {
    "objectID": "Data/viz/2023-01-03 Tidy Tuesday/TT_wk1.html",
    "href": "Data/viz/2023-01-03 Tidy Tuesday/TT_wk1.html",
    "title": "Tidy Tuesday, 2023 Week 1 üè°",
    "section": "",
    "text": "The theme of this week‚Äôs #TidyTuesday is ‚ÄúBring your own data from 2022!‚Äù\nI decided to use data from Tidy Tuesday 2022-07-05. Here is a little more information about the data:"
  },
  {
    "objectID": "Data/viz/2023-01-03 Tidy Tuesday/TT_wk1.html#my-plot",
    "href": "Data/viz/2023-01-03 Tidy Tuesday/TT_wk1.html#my-plot",
    "title": "Tidy Tuesday, 2023 Week 1 üè°",
    "section": "My plot",
    "text": "My plot\n\nüè° SF Housing Prices by Kate Pennington‚Äôs Craigslist scrape of Bay Area housing posts\n\nCode here"
  },
  {
    "objectID": "Data/viz/2023-01-17 Tidy Tuesday/TT_wk3.html",
    "href": "Data/viz/2023-01-17 Tidy Tuesday/TT_wk3.html",
    "title": "Tidy Tuesday, 2023 Week 3 üé®",
    "section": "",
    "text": "Data for this week‚Äôs TidyTuesday comes from Art History!\nHere is a little more information about the data:"
  },
  {
    "objectID": "Data/viz/2023-01-17 Tidy Tuesday/TT_wk3.html#my-plot",
    "href": "Data/viz/2023-01-17 Tidy Tuesday/TT_wk3.html#my-plot",
    "title": "Tidy Tuesday, 2023 Week 3 üé®",
    "section": "My plot",
    "text": "My plot\n\nüé® Art Histpry\n\nCode here"
  },
  {
    "objectID": "R files/2 Module/mod2.html",
    "href": "R files/2 Module/mod2.html",
    "title": "Module 2: Installing Packages and Reading Data",
    "section": "",
    "text": "Download a copy of Module 2 slides\nDownload data for Module 2 lab and tutorial"
  },
  {
    "objectID": "R files/2 Module/mod2.html#installing-packages-and-reading-data",
    "href": "R files/2 Module/mod2.html#installing-packages-and-reading-data",
    "title": "Module 2: Installing Packages and Reading Data",
    "section": "",
    "text": "Download a copy of Module 2 slides\nDownload data for Module 2 lab and tutorial"
  },
  {
    "objectID": "R files/2 Module/mod2.html#lab-2",
    "href": "R files/2 Module/mod2.html#lab-2",
    "title": "Module 2: Installing Packages and Reading Data",
    "section": "Lab 2",
    "text": "Lab 2\n\nGeneral Guidelines:\nYou will encounter a few functions we did not cover in the lecture video. This will give you some practice on how to use a new function for the first time. You can try following steps:\n\nStart by typing ?new_function in your Console to open up the help page\nRead the help page of this new_function. The description might be too technical for now. That‚Äôs OK. Pay attention to the Usage and Arguments, especially the argument x or x,y (when two arguments are required)\nAt the bottom of the help page, there are a few examples. Run the first few lines to see how it works\nApply it in your lab questions\n\nIt is highly likely that you will encounter error messages while doing this lab Here are a few steps that might help get you through it.\n\nLocate which line is causing this error first\nCheck if you may have a typo in the code. Sometimes another person can spot a typo faster than you.\nIf you enter the code without any typo, try googling the error message\nScroll through the top few links see if any of them helps\n\n\n\nWarm-up\n\nCreate a new Rmd and add code to load the tidyverse package.\nYour classmate comes to you and says they can‚Äôt get data to load after restarting their R session. You see the code:\n\n\ninstall.packages(\"haven\")\nawesome_data &lt;- read_dta(\"awesome_data.dta\")\n\nError in read_dta(\"awesome_data.dta\") : could not find function \"read_dta\"\n\nDiagnose the problem.\nNote: If they say the code worked before, it‚Äôs likely they had loaded haven in the console or perhaps in an earlier script. R packages will stay attached as long as the R session is live.\n\nIn general, once you have successfully used install.packages(pkg) for a ‚Äúpkg‚Äù, you won‚Äôt need to do it again. Install haven and readxl using the console.\nIn your script, load haven and readxl. Notice that if you had to restart R right now. You could reproduce the entire warm-up by running the script. We strive for reproducibility by keeping the code we want organized in scripts or Rmds.\nIt‚Äôs good practice when starting a new project to clear your R environment. This helps you make sure you are not relying on data or functions you wrote in another project. After you library() statements add the following code rm(list = ls()).\nrm() is short for remove. Find the examples in ?rm and run them in the console.\n\n\n\nISLR Chapter 2 Q8\nThis exercise relates to the College data set, which can be found in the file College.csv. It contains a number of variables for 777 different universities and colleges in the US. The variables are\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\nPrivate\nPublic/private indicator\n\n\nApps\nNumber of applications received\n\n\nAccept\nNumber of applicants accepted\n\n\nEnroll\nNumber of new students enrolled\n\n\nTop10perc\nNew students from top 10 % of high school class\n\n\nTop25perc\nNew students from top 25 % of high school class\n\n\nF.Undergrad\nNumber of full-time undergraduates\n\n\nP.Undergrad\nNumber of part-time undergraduates\n\n\nOutstate\nOut-of-state tuition\n\n\nRoom.Board\nRoom and board costs\n\n\nBooks\nEstimated book costs\n\n\nPersonal\nEstimated personal spending\n\n\nPhD\nPercent of faculty with Ph.D.‚Äôs\n\n\nTerminal\nPercent of faculty with terminal degree\n\n\nS.F.Ratio\nStudent/faculty ratio\n\n\nperc.alumni\nPercent of alumni who donate\n\n\nExpend\nInstructional expenditure per student\n\n\nGrad.Rate\nGraduation rate\n\n\n\nBefore reading the data into R, it can be viewed in Excel or a text editor. Make sure that you have the directory set to the correct location for the data.\n\nUse the base R read.csv() function to read the data into R with option stringsAsFactors=T (this is needed later on for plotting figures). Call the loaded data college.\nLook at the data using the View() function. You should notice that the first column is just the name of each university. Load your data and then try the following commands:\n\n\n#set your working directory ,fill in your code after this line\n\n#read in the file College.csv using read.csv() with option `stringsAsFactors=T`\ncollege &lt;- read.csv('College.csv', stringsAsFactors = T)\n\n#Give data frame college rownames\nrownames(college) &lt;- college[,1] \n\n# Please comment out View function after using it. Otherwise you'll see some error when knit.\n# View(college)\n\n\nYou should see that there is now a row.names column with the name of each university recorded. This means that R has given each row a name corresponding to the appropriate university. R will not try to perform calculations on the row names. Next, we will remove the first column in the data where the names are stored. Try\n\n\n#Use a negative number to generate a subset with all but one column\n# college[, -c(1, 2, 3)]  will generate a subset with all but the first three columns\ncollege &lt;- college[,-1]\n# as.factor can turn a character column to a factor column so that we can use it to plot later on\ncollege$Private &lt;- as.factor(college$Private)\n#View(college)\n\nNow you should see that the first data column is Private. Note that another column labeled row.names now appears before the Private column. However, this is not a data column but rather the name that R is giving to each row.\n\nUse the summary() function to produce a numerical summary of the variables in the data set. Hint: summary() takes in an object such as data.frame and return the summery results\nUse the pairs() function to produce a scatterplot matrix of the first five columns or variables of the data. Recall that you can reference the first five columns of a data frame dat using dat[,1:5]\nUse the plot() function to produce side-by-side boxplots of Outstate versus Private. Hint: plot() takes two arguments one vector for x axis and one vector for y axis. Try plot(dat$col_name, dat$col_name).\n\n\n# replicate \"No\" for the same times as the number of colleges using rep()\nElite &lt;- rep(\"No\",nrow(college))\n# change the values in Elite for colleges with proportion of students \n# coming from the top 10% of their high school classes \n# exceeds 50 % to \"Yes\"\nElite[college$Top10perc &gt;50] &lt;- \"Yes\"\n# as.factor change ELite, a character vector to a factor vector\n# (we will touch on factors later in class) \nElite &lt;- as.factor(Elite)\n# add the newly created vector to the college data frame\ncollege &lt;- data.frame(college ,Elite)\n\n\nUse the summary() function to see how many elite universities there are. Now use the plot() function to produce side-by-side boxplots of Outstate versus Elite.\n\nContinue exploring the data, and provide a brief summary of what you discover.\n\n\nISLR Chapter 2 Q9\nThis exercise involves the Auto data set. na.omit() removes the missing values from the data and returns a new data frame.\n\n#load the Auto.csv into a variable called auto using read_csv()\n\n\n# remove all rows with missing values using na.omit()\nauto &lt;- na.omit(auto)\n\nWe can use class() to check which of the columns are quantitative (numeric or integer), and which are qualitative( logical or character). And sapply() function takes in a data frame and a function (in this case class()), apply the class function to each column. Try the following commands:\n\n#apply the class() function to each column of auto data frame\nsapply(auto, class)\n\n\nWhat is the range of each quantitative columns? You can answer this using the range() function. Hint: You can call range() function individually on each column. You can also subset the quantitative columns by creating a variable quant_cols equal to all columns with a numeric mode, then use sapply the function range() with the data frame with only quantitative columns. This is not required.\nUsing the functions mean() and sd(). Find out what is the mean and standard deviation of each quantitative columns?\nNow remove the 10th through 85th observations (rows). What is the range, mean, and standard deviation of each column in the subset of the data that remains? Hint: We‚Äôve seen removing columns in question 8. To remove the rows, we can use the negative sign - again. For example, auto[-c(1,3),] removes the first and third row\nUsing the full data set, investigate the columns graphically, using scatterplots (pairs or plot) or other tools of your choice. Create some plots highlighting the relationships among the columns Comment on your findings.\nSuppose that we wish to predict gas mileage (mpg) on the basis of the other numerical variables. Do your plots suggest that any of the other variables might be useful in predicting mpg? Justify your answer.\n\n\n\nISLR Chapter 2 Q10\nThis exercise involves the Boston housing data set.\nTo begin, load in the Boston data set. The Boston data set is part of the MASS library in R. You may need to install the package using install.packages() function if you haven‚Äôt done so.\n\n# install.packages(MASS)\nlibrary(MASS)\n\nNow the data set is contained in the object Boston.\n\nBoston\n\nRead about the data set:\n\n?Boston\n\n\nHow many rows are in this data set? How many columns? What do the rows and columns represent?\nMake some pairwise scatterplots of the columns in this data set. Describe your findings. Hint: Use function pairs()\nHow many of the suburbs in this data set bound the Charles river? Hint: Subset the data using a logical vector to check if variable chas==1, then use nrow() to see the number of suburbs.\nUsing median(), find out what is the median pupil-teacher ratio among the towns in this data set?\n\nWell done! You‚Äôve learned how to work with R to read in data and perform some simple analysis and exploration!\nWant to improve this tutorial? Report any suggestions/bugs/improvements on here! We‚Äôre interested in learning from you how we can make this tutorial better."
  },
  {
    "objectID": "R files/8 Module/mod8.html",
    "href": "R files/8 Module/mod8.html",
    "title": "Module 8: Iteration",
    "section": "",
    "text": "Download a copy of Module 8 slides"
  },
  {
    "objectID": "R files/8 Module/mod8.html#iteration",
    "href": "R files/8 Module/mod8.html#iteration",
    "title": "Module 8: Iteration",
    "section": "",
    "text": "Download a copy of Module 8 slides"
  },
  {
    "objectID": "R files/8 Module/mod8.html#lab-8",
    "href": "R files/8 Module/mod8.html#lab-8",
    "title": "Module 8: Iteration",
    "section": "Lab 8",
    "text": "Lab 8\n\nGeneral Guidelines:\nYou will encounter a few functions we did not cover in the lecture video. This will give you some practice on how to use a new function for the first time. You can try following steps:\n\nStart by typing ?new_function in your Console to open up the help page\nRead the help page of this new_function. The description might be too technical for now. That‚Äôs OK. Pay attention to the Usage and Arguments, especially the argument x or x,y (when two arguments are required)\nAt the bottom of the help page, there are a few examples. Run the first few lines to see how it works\nApply it in your lab questions\n\nIt is highly likely that you will encounter error messages while doing this lab Here are a few steps that might help get you through it.\n\nLocate which line is causing this error first\nCheck if you may have a typo in the code. Sometimes another person can spot a typo faster than you.\nIf you enter the code without any typo, try googling the error message\nScroll through the top few links see if any of them helps\nTry working on the next few questions while waiting for answers by TAs\n\n\n\nWarm-up\nRecall, for-loops are an iterator that help us repeat tasks while changing inputs. The most common structure for your code will look like the following code. This can be simplified if you are not storing results.\n\n# what are you iterating over? The vector from -10:10\nitems_to_iterate_over &lt;- c(-10:10) \n\n# pre-allocate the results\nout &lt;- rep(0, length(items_to_iterate_over))\n# write the iteration statement --\n# we'll use indices so we can store the output easily \nfor (i in seq_along(items_to_iterate_over)) {\n# do something\n# we capture the median of three random numbers\n# from normal distributions various means\n    out[[i]] &lt;- median(rnorm(n = 3,mean = items_to_iterate_over[[i]]))\n    }\n\n\nWriting for-loops\n\nWrite a for-loop that prints the numbers 5, 10, 15, 20, 250000.\nWrite a for-loop that iterates over the indices of x and prints the ith value of x.\n\n\nx &lt;- c(5, 10, 15, 20, 250000)\n# replace the ... with the relevant code\n\nfor (i in ... ){ \n  print(x[[...]])\n  }\n\n\nWrite a for-loop that simplifies the following code so that you don‚Äôt repeat yourself! Don‚Äôt worry about storing the output yet. Use print() so that you can see the output. What happens if you don‚Äôt use print()?\n\n\nsd(rnorm(5))\nsd(rnorm(10))\nsd(rnorm(15))\nsd(rnorm(20)) \nsd(rnorm(25000))\n\n\nadjust your for-loop to see how the sd changes when you use rnorm(n, mean = 4)\nadjust your for-loop to see how the sd changes when you use rnorm(n, sd = 4)\n\n\nNow store the results of your for-loop above in a vector. Pre-allocate a vector of length 5 to capture the standard deviations.\n\n\n\nvectorization vs for loops\nRecall, vectorized functions operate on a vector item by item. It‚Äôs like looping over the vector! The following for-loop is better written vectorized.\nCompare the loop version\n\nnames &lt;- c(\"Marlene\", \"Jacob\", \"Buddy\")\nout &lt;- character(length(names))\n\nfor (i in seq_along(names)) {\n  out[[i]] &lt;- paste0(\"Welcome \", names[[i]])\n  }\n\nto the vectorized version\n\nnames &lt;- c(\"Marlene\", \"Jacob\", \"Buddy\") \nout &lt;- paste0(\"Welcome \", names)\n\nThe vectorized code is preferred because it is easier to write and read, and is possibly more efficient.\n\nRewrite your first for-loop, where you printed 5, 10, 15, 20, 250000 as vectorised code\nRewrite this for-loop as vectorized code:\n\n\nradii &lt;- c(0:10)\n\narea &lt;- double(length(radii)) \n\nfor (i in seq_along(radii)) { \n  area[[i]] &lt;- pi * radii[[i]] ^ 2 \n  }\n\n\nRewrite this for-loop as vectorized code:\n\n\nradii &lt;- c(-1:10)\n\narea &lt;- double(length(radii))\n\nfor (i in seq_along(radii)) { \n  if (radii[[i]] &lt; 0) { \n    area[[i]] &lt;- NaN \n  } else {\n      area[[i]] &lt;- pi * radii[[i]] ^ 2 }\n  }\n\n\n\n\nExtension\n\nSimulating the Law of Large Numbers\nThe Law of Large Numbers says that as sample sizes increase, the mean of the sample will approach the true mean of the distribution. We are going to simulate this phenomenon!\nWe‚Äôll start by making a vector of sample sizes from 1 to 50, to represent increasing sample sizes.\nCreate a vector called sample_sizes that is made up of the numbers 1 through 50. (Hint: You can use seq() or : notation).\nWe‚Äôll make an empty tibble to store the results of the for loop:\n\nestimates &lt;- tibble(n = integer(), sample_mean = double())\n\nWrite a loop over the sample_sizes you specified above. In the loop, for each sample size you will:\n\nCalculate the mean of a sample from the random normal distribution with mean = 0 and sd = 5.\nMake an intermediate tibble to store the results\nAppend the intermediate tibble to your tibble using bind_rows().\n\n\nset.seed(60637) \nfor (___ in ___) {\n  # Calculate the mean of a sample from the random normal distribution with mean = 0 and s\n  ___ &lt;- ___\n  # Make a tibble with your estimates\n  this_estimate &lt;- tibble(n = ___, sample_mean = ___) \n  # Append the new rows to your tibble\n  ___ &lt;- bind_rows(estimates, ___)\n  }\n\nWe can use ggplot2 to view the results. Fill in the correct information for the data and x and y variables, so that the n column of the estimates tibble is plotted on the x-axis, while the sample_mean column of the estimates tibble is plotted on the y-axis.\n\n# your data goes in the first position\n___ %&gt;%\n  ggplot(aes(x = ___, y = ___)) + \n  geom_line()\n\n\nAs the sample size (n) increases, does the sample mean becomes closer to 0, or farther away from 0?\n\nRewrite the loop code without looking at your previous code and use a wider range of sample sizes. Try several different sample size combinations. What happens when you increase the sample size to 100? 500? 1000? Use the seq() function to generate a sensibly spaced sequence.\n\nset.seed(60637) \nsample_sizes &lt;- ___ \nestimates_larger_n &lt;- ___\n\nfor (___ in ___) {\n  ___ &lt;- ___\n  ___ &lt;- ___\n  ___ &lt;- ___\n}\n\n___ %&gt;%\n  ggplot(___(___ = ___, ___ = ___)) +\n  geom_line()\n\n\nHow does this compare to before?\n\n\n\nExtending Our Simulation\nLooking at your results, you might think a small sample size is sufficient for estimating a mean, but your data had a relatively small standard deviation compared to the mean. Let‚Äôs run the same simulation as before with different standard deviations.\nDo the following:\n\nCreate a vector called population_sd of length 4 with values 1, 5, 10, and 20 (you‚Äôre welcome to add larger numbers if you wish).\nMake an empty tibble to store the output. Compared to before, this has an extra column for the changing population standard deviations.\nWrite a loop inside a loop over population_sd and then sample_sizes.\nThen, make a ggplot graph where the x and y axes are the same, but we facet (aka we create small multiples of individual graphs) on population_sd.\n\n\nset.seed(60637)\npopulation_sd &lt;- ___\n# use what every you came up with in the previous part \nsample_sizes &lt;- ___\nestimates_adjust_sd &lt;- ___\nfor (___ in ___){ \n  for (___ in ___) {\n    ___ &lt;- ___\n    ___ &lt;- ___\n    ___ &lt;- ___\n  } \n}\n\n___ %&gt;%\n  ggplot(___) +\n  geom_line() + \n  facet_wrap(~population_sd) + \n  theme_minimal()\n\nHow do these estimates differ as you increase the standard deviation?\nWant to improve this tutorial? Report any suggestions/bugs/improvements on here! We‚Äôre interested in learning from you how we can make this tutorial better."
  },
  {
    "objectID": "R files/1 Module/mod1.html",
    "href": "R files/1 Module/mod1.html",
    "title": "Module 1: An Introduction and Motivation for R Programming",
    "section": "",
    "text": "Download a copy of Module 1 slides"
  },
  {
    "objectID": "R files/1 Module/mod1.html#an-introduction-and-motivation-for-r-programming",
    "href": "R files/1 Module/mod1.html#an-introduction-and-motivation-for-r-programming",
    "title": "Module 1: An Introduction and Motivation for R Programming",
    "section": "",
    "text": "Download a copy of Module 1 slides"
  },
  {
    "objectID": "R files/1 Module/mod1.html#lab-1",
    "href": "R files/1 Module/mod1.html#lab-1",
    "title": "Module 1: An Introduction and Motivation for R Programming",
    "section": "Lab 1",
    "text": "Lab 1\nWe expect you to watch the Module 1 material prior to lab.\n\nGeneral Guidelines:\nYou will encounter a few functions we did not cover in the lecture video. This will give you some practice on how to use a new function for the first time. You can try following steps:\n\nStart by typing ?new_function in your Console to open up the help page\nRead the help page of this new_function. The description might be too technical for now. That‚Äôs OK. Pay attention to the Usage and Arguments, especially the argument x or x,y (when two arguments are required)\nAt the bottom of the help page, there are a few examples. Run the first few lines to see how it works\nApply it in your lab questions\n\nIt is highly likely that you will encounter error messages while doing this lab Here are a few steps that might help get you through it.\n\nLocate which line is causing this error first\nCheck if you may have a typo in the code. Sometimes another person can spot a typo faster than you.\nIf you enter the code without any typo, try googling the error message\nScroll through the top few links see if any of them helps\n\n\n\nWarm-up\n\nThe most important warm up question: do you have R and RStudio installed?\nWhich of these allow you to pull up the documentation for a command in R?\n\n\n*\n?\nhelp()\ndocumentation()\n\n\nIn the code block below, run code that will pull up documentation for the function paste0().\n\n\n?paste0()\n\nWhat does this function do?\n\nWhat are the two ways that you can assign a value to a variable?\n\n\n\nGuess the Output: Algebra\n\nGuess the output of the following code:\n\n\na &lt;- 3\nb &lt;- a^2 + 1\n\nb\n\nNow, run the code block to check your answer.\n\nGuess the output of the following code:\n\n\na &lt;- 10\nb &lt;-3 %% a\n\nb + 5\n\nHint: If you are not sure what %% does you can try running ?'%%' to better understand.\n\nGuess the output of the following code:\n\n\na &lt;- c(1,2,3)\nb &lt;- a^2 + 1\n\nb\n\n\n\nGuess the Output: Boolean\n\nGuess the output of the following code:\n\n\n25 &gt;= 14\n\n\nGuess the output of the following code:\n\n\n10 != 100\n\n\nGuess the output of the following code:\n\n\n7%%5 == 2\n\n\nGuess the output of the following code:\n\n\n(5 &gt; 7) & (7 * 7 == 49)\n\n\nOk, let‚Äôs try some logic! Try to figure out each one before running the code!\n\n\n\n\n\nTRUE & FALSE\n\n\n\n\n\nFALSE & FALSE\n\n\n\n\n\nTRUE | (FALSE & TRUE)\n\n\n\n\n\nFALSE | (TRUE | FALSE)\n\n\n\n\n\n(TRUE & (TRUE | FALSE)) | FALSE\n\n\n\nData Types\n\nRun these lines to create these variables in your environment.\n\n\nitem_1 &lt;- \"Hi, my name is item 1!\"\nitem_2 &lt;- 7\nitem_3 &lt;- FALSE\n\nWhat are the type (or mode) of each of these items?\nHint: If you are not sure, you could apply the mode() function to each item and check the output. If you are unsure about how to apply the mode() function, you can always run ?mode().\n\nGuess the output of the following code:\n\n\n(item_2 + 19 &lt;= 25) == item_3\n\n\nDo you remember earlier when you ran ?paste0()? We are now going to try to use this function. In the code block below, initialize two variables that are of mode ‚Äúcharacter‚Äù. The output when you apply paste0() to these variables should be ‚ÄúHello, world!‚Äù.\n\n\n#v1 &lt;-\n#v2 &lt;- \n\nWell done! You‚Äôve learned how to work with R to perform simple variable assignment and operations!\nWant to improve this tutorial? Report any suggestions/bugs/improvements on here! We‚Äôre interested in learning from you how we can make this tutorial better."
  },
  {
    "objectID": "R files/7 Module/mod7.html",
    "href": "R files/7 Module/mod7.html",
    "title": "Module 7: Grouped Analysis",
    "section": "",
    "text": "Download a copy of Module 7 slides\nDownload data for Module 7 lab and tutorial"
  },
  {
    "objectID": "R files/7 Module/mod7.html#grouped-analysis",
    "href": "R files/7 Module/mod7.html#grouped-analysis",
    "title": "Module 7: Grouped Analysis",
    "section": "",
    "text": "Download a copy of Module 7 slides\nDownload data for Module 7 lab and tutorial"
  },
  {
    "objectID": "R files/7 Module/mod7.html#lab-7",
    "href": "R files/7 Module/mod7.html#lab-7",
    "title": "Module 7: Grouped Analysis",
    "section": "Lab 7",
    "text": "Lab 7\nIn this lab, you will work with data_traffic.csv.\n\nGeneral Guidelines:\nYou will encounter a few functions we did not cover in the lecture video. This will give you some practice on how to use a new function for the first time. You can try following steps:\n\nStart by typing ?new_function in your Console to open up the help page\nRead the help page of this new_function. The description might be too technical for now. That‚Äôs OK. Pay attention to the Usage and Arguments, especially the argument x or x,y (when two arguments are required)\nAt the bottom of the help page, there are a few examples. Run the first few lines to see how it works\nApply it in your lab questions\n\nIt is highly likely that you will encounter error messages while doing this lab Here are a few steps that might help get you through it.\n\nLocate which line is causing this error first\nCheck if you may have a typo in the code. Sometimes another person can spot a typo faster than you.\nIf you enter the code without any typo, try googling the error message\nScroll through the top few links see if any of them helps\nTry working on the next few questions while waiting for answers by TAs\n\n\n\nBackground and Data\nRead the background and data section before lab.\n\nFollow the tweet thread and you‚Äôll see how Professor Damon Jones, of Harris, prepares and analyzes his data. In this lab, you‚Äôre going to follow his lead and dig into traffic stop data from the University of Chicago Police Department, one of the largest private police forces in the world.\n\n\nWarm-up\n\nOpen a new Rmd and save it in your coding lab folder; if you downloaded the data, move your data file to your preferred data location.\nIn your Rmd, write code to load your packages. If you load packages in the console, you will get an error when you knit because knitting starts a fresh R session.\nLoad data_traffic.csv and assign it to the name traffic_data. This data was scrapped from the UCPD website and partially cleaned by Prof.¬†Jones.\nRecall that group_by() operates silently. Below I create a new data frame called grouped_data.\n\n\ngrouped_data &lt;- traffic_data %&gt;%\n  group_by(Race, Gender)\n\n\n\nHow can you tell grouped_data is different from traffic_data?\n\n\nHow many groups (Race-Gender pairs) are in the data? (This information should be available without writing additional code!)\n\n\nWithout running the code, predict the dimensions (number of rows by number of columns) of the tibbles created by traffic_data %&gt;% summarize(n = n()) and grouped_data %&gt;% summarize(n = n()).\n\n\nNow check you intuition by running the code.\n\n\n\nUse group_by() and summarize() to recreate the following table.\n\n\n\n# A tibble: 6 √ó 2\n  Race                                       n\n  &lt;chr&gt;                                  &lt;int&gt;\n1 African American                        3278\n2 American Indian/Alaskan Native            12\n3 Asian                                    226\n4 Caucasian                                741\n5 Hispanic                                 217\n6 Native Hawaiian/Other Pacific Islander     4\n\n\n\nUse count() to produce the same table.\n\n\n\nMoving beyond counts\n\nRaw counts are okay, but frequencies (or proportions) are easier to compare across data sets. Add a column with frequencies and assign the new tibble to the name traffic_stop_freq. The result should be identical to Prof.¬†Jones‚Äôs analysis on twitter.\n\nTry on your own first. If you‚Äôre not sure how to add a frequency though, you could google ‚Äúadd a proportion to count with tidyverse‚Äù and find this stackoverflow post. Follow the advice of the number one answer. The green checkmark and large number of upvotes indicate the answer is likely reliable.\n\nThe frequencies out of context are not super insightful. What additional information do we need to argue the police are disproportionately stopping members of a certain group? (Hint: Prof.¬†Jones shares the information in his tweets.)\nFor the problem above, your groupmate tried the following code. Explain why the frequencies are all 1.\n\n\ntraffic_stop_freq_bad &lt;- traffic_data %&gt;%\n  group_by(Race) %&gt;% \n  summarize(n = n(),\n            freq = n / sum(n)) \n\ntraffic_stop_freq_bad\n\nNow we want to go a step further. Do outcomes differ by race? In the first code block below, I provide code so you can visualize disposition by race. ‚ÄúDisposition‚Äù is police jargon that means the current status or final outcome of a police interaction.\n\ncitation_strings &lt;- c(\"citation issued\", \"citations issued\",\n                      \"citation issued\" )\n\narrest_strings &lt;- c(\"citation issued, arrested on active warrant\",\n                    \"citation issued; arrested on warrant\",\n                    \"arrested by cpd\", \"arrested on warrant\",\n                    \"arrested\",\"arrest\")\n\ndisposition_by_race &lt;- traffic_data %&gt;%\n  mutate(Disposition = str_to_lower(Disposition),\n         Disposition = case_when(Disposition %in% citation_strings ~ \"citation\",\n                                 Disposition %in% arrest_strings ~ \"arrest\",\n                                 TRUE ~ Disposition)) %&gt;%\n  count(Race, Disposition) %&gt;% group_by(Race) %&gt;%\n  mutate(freq = round(n / sum(n), 3))\n\ndisposition_by_race %&gt;%\n  filter(n &gt; 5, Disposition == \"citation\") %&gt;%\n  ggplot(aes(y = freq, x = Race)) + geom_col() +\n  labs(y = \"Citation Rate Once Stopped\", x = \"\", title = \"Traffic Citation Rate\") +\n  theme_minimal()\n\n\n\n\nLet‚Äôs break down how we got to this code. First, I ran traffic_data %&gt;% count(Race, Disposition) and noticed that we have a lot of variety in how officers enter information into the system. I knew I could deal with some of the issue by standardizing capitalization.\n\n\nIn the console, try out str_to_lower(...) by replacing the ‚Ä¶ with different strings. The name may be clear enough, but what does str_to_lower() do?\n\n\nAfter using mutate with str_to_lower(), I piped into count() again and looked for strings that represent the same Disposition. I stored terms in character vectors (e.g.¬†citation_strings). The purpose is to make the case_when() easier to code and read. Once I got that right, I added frequencies to finalize disposition_by_race.\n\nTo make the graph, I first tried to get all the disposition data on the same plot.\n\n\n disposition_by_race %&gt;%\n  ggplot(aes(y = freq, x = Race, fill = Disposition)) + \n  geom_col()\n\n\n\n\nBy default, the bar graph is stacked. Look at the resulting graph and discuss the pros and cons of this plot.\n\nI decided I would focus on citations only and added the filter(n &gt; 5, Disposition == \"citation\") to the code. What is the impact of filtering based on n &gt; 5? Would you make the same choice? This question doesn‚Äôt have a ‚Äúright‚Äù answer. You should try different options and reflect.\nNow, you can create a similar plot based called ‚ÄúSearch Rate‚Äù using the Search variable. Write code to re-produce this plot.\n\n\n\n\n\n\nWell done! You‚Äôve learned how to conduct grouped analysis using real-world data!\nWant to improve this tutorial? Report any suggestions/bugs/improvements on here! We‚Äôre interested in learning from you how we can make this tutorial better."
  },
  {
    "objectID": "R files/5 Module/mod5.html",
    "href": "R files/5 Module/mod5.html",
    "title": "Module 5: Data Manipulation and Analysis II",
    "section": "",
    "text": "Download a copy of Module 5 slides\nDownload data for Module 5 lab and tutorial"
  },
  {
    "objectID": "R files/5 Module/mod5.html#data-manipulation-and-analysis-ii",
    "href": "R files/5 Module/mod5.html#data-manipulation-and-analysis-ii",
    "title": "Module 5: Data Manipulation and Analysis II",
    "section": "",
    "text": "Download a copy of Module 5 slides\nDownload data for Module 5 lab and tutorial"
  },
  {
    "objectID": "R files/5 Module/mod5.html#lab-5",
    "href": "R files/5 Module/mod5.html#lab-5",
    "title": "Module 5: Data Manipulation and Analysis II",
    "section": "Lab 5",
    "text": "Lab 5\nIn this lab, you will work with data sets from recent_college_grads.dta.\n\nGeneral Guidelines:\nYou will encounter a few functions we did not cover in the lecture video. This will give you some practice on how to use a new function for the first time. You can try following steps:\n\nStart by typing ?new_function in your Console to open up the help page\nRead the help page of this new_function. The description might be too technical for now. That‚Äôs OK. Pay attention to the Usage and Arguments, especially the argument x or x,y (when two arguments are required)\nAt the bottom of the help page, there are a few examples. Run the first few lines to see how it works\nApply it in your lab questions\n\nIt is highly likely that you will encounter error messages while doing this lab Here are a few steps that might help get you through it.\n\nLocate which line is causing this error first\nCheck if you may have a typo in the code. Sometimes another person can spot a typo faster than you.\nIf you enter the code without any typo, try googling the error message\nScroll through the top few links see if any of them helps\nTry working on the next few questions while waiting for answers by TAs\n\n\n\nWarm up\n\nData wrangling and visualization with college data\n\nWe will explore data on college majors and earnings, specifically the data behind the FiveThirtyEight story ‚ÄúThe Economic Guide To Picking A College Major‚Äù.\nWe read it in with the read_dta function, and save the result as a new data frame called college_recent_grads. Because read_dta is a function from haven, we will need to load that package.\n\nlibrary(tidyverse)\nlibrary(haven)\ncollege_recent_grads &lt;- read_dta('recent_college_grads.dta')\n\ncollege_recent_grads is a tidy data frame, with each row representing an observation and each column representing a variable.\nTo view the data, you can take a quick peek at your data frame and view its dimensions with the glimpse function.\n\nglimpse(college_recent_grads)\n\nThe description of the variables, i.e.¬†the codebook, is given below.\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\nrank\nRank by median earnings\n\n\nmajor_code\nMajor code, FO1DP in ACS PUMS\n\n\nmajor\nMajor description\n\n\nmajor_category\nCategory of major from Carnevale et al\n\n\ntotal\nTotal number of people with major\n\n\nsample_size\nSample size (unweighted) of full-time, year-round ONLY (used for earnings)\n\n\nmen\nMale graduates\n\n\nwomen\nFemale graduates\n\n\nsharewomen\nWomen as share of total\n\n\nemployed\nNumber employed (ESR == 1 or 2)\n\n\nemployed_full_time\nEmployed 35 hours or more\n\n\nemployed_part_time\nEmployed less than 35 hours\n\n\nemployed_full_time_yearround\nEmployed at least 50 weeks (WKW == 1) and at least 35 hours (WKHP &gt;= 35)\n\n\nunemployed\nNumber unemployed (ESR == 3)\n\n\nunemployment_rate\nUnemployed / (Unemployed + Employed)\n\n\nmedian\nMedian earnings of full-time, year-round workers\n\n\np25th\n25th percentile of earnigns\n\n\np75th\n75th percentile of earnings\n\n\ncollege_jobs\nNumber with job requiring a college degree\n\n\nnon_college_jobs\nNumber with job not requiring a college degree\n\n\nlow_wage_jobs\nNumber in low-wage service jobs\n\n\n\n\n\nWhich major has the lowest unemployment rate?\nIn order to answer this question all we need to do is sort the data. We use the arrange function to do this, and sort it by the unemployment_rate variable. By default arrange sorts in ascending order, which is what we want here ‚Äì we‚Äôre interested in the major with the lowest unemployment rate.\n\ncollege_recent_grads %&gt;%\n  arrange(unemployment_rate)\n\n# A tibble: 173 √ó 21\n    rank major‚Ä¶¬π major major‚Ä¶¬≤ total sampl‚Ä¶¬≥ men   women share‚Ä¶‚Å¥ emplo‚Ä¶‚Åµ emplo‚Ä¶‚Å∂\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n 1    53    4005 Math‚Ä¶ Comput‚Ä¶ 609         7 500   109   0.1789‚Ä¶     559     584\n 2    74    3801 Mili‚Ä¶ Indust‚Ä¶ 124         4 124   0     0             0     111\n 3    84    3602 Bota‚Ä¶ Biolog‚Ä¶ 1329        9 626   703   0.5289‚Ä¶    1010     946\n 4   113    1106 Soil‚Ä¶ Agricu‚Ä¶ 685         4 476   209   0.3051‚Ä¶     613     488\n 5   121    2301 Educ‚Ä¶ Educat‚Ä¶ 804         5 280   524   0.6517‚Ä¶     703     733\n 6    15    2409 Engi‚Ä¶ Engine‚Ä¶ 4321       30 3526  795   0.1839‚Ä¶    3608    2999\n 7    20    3201 Cour‚Ä¶ Law & ‚Ä¶ 1148       14 877   271   0.2360‚Ä¶     930     808\n 8   120    2305 Math‚Ä¶ Educat‚Ä¶ 14237     123 3872  10365 0.7280‚Ä¶   13115   11259\n 9     1    2419 Petr‚Ä¶ Engine‚Ä¶ 2339       36 2057  282   0.1205‚Ä¶    1976    1849\n10    65    1100 Gene‚Ä¶ Agricu‚Ä¶ 10399     158 6053  4346  0.4179‚Ä¶    8884    7589\n# ‚Ä¶ with 163 more rows, 10 more variables: employed_parttime &lt;dbl&gt;,\n#   employed_fulltime_yearround &lt;dbl&gt;, unemployed &lt;dbl&gt;,\n#   unemployment_rate &lt;dbl&gt;, p25th &lt;dbl&gt;, median &lt;dbl&gt;, p75th &lt;dbl&gt;,\n#   college_jobs &lt;dbl&gt;, non_college_jobs &lt;dbl&gt;, low_wage_jobs &lt;dbl&gt;, and\n#   abbreviated variable names ¬π‚Äãmajor_code, ¬≤‚Äãmajor_category, ¬≥‚Äãsample_size,\n#   ‚Å¥‚Äãsharewomen, ‚Åµ‚Äãemployed, ‚Å∂‚Äãemployed_fulltime\n\n\nThis gives us what we wanted, but not in an ideal form. First, the name of the major barely fits on the page. Second, some of the variables are not that useful (e.g.¬†major_code, major_category) and some we might want front and center are not easily viewed (e.g.¬†unemployment_rate).\nWe can use the select function to choose which variables to display, and in which order:\n\ncollege_recent_grads %&gt;%\n  arrange(unemployment_rate) %&gt;%\n  select(rank, major, unemployment_rate)\n\n# A tibble: 173 √ó 3\n    rank major                                      unemployment_rate\n   &lt;dbl&gt; &lt;chr&gt;                                                  &lt;dbl&gt;\n 1    53 Mathematics And Computer Science                     0      \n 2    74 Military Technologies                                0      \n 3    84 Botany                                               0      \n 4   113 Soil Science                                         0      \n 5   121 Educational Administration And Supervision           0      \n 6    15 Engineering Mechanics Physics And Science            0.00633\n 7    20 Court Reporting                                      0.0117 \n 8   120 Mathematics Teacher Education                        0.0162 \n 9     1 Petroleum Engineering                                0.0184 \n10    65 General Agriculture                                  0.0196 \n# ‚Ä¶ with 163 more rows\n\n\nOk, this is looking better, but do we really need all those decimal places in the unemployment variable? Not really!\n\n1a. Round unemployment_rate: We create a new variable with the mutate function. In this case, we‚Äôre overwriting the existing unemployment_rate variable, by rounding it to 1 decimal places. Incomplete code is given below to guide you in the right direction, however you will need to fill in the blanks.\n\n\ncollege_recent_grads&lt;- college_recent_grads %&gt;%\n  arrange(unemployment_rate) %&gt;%\n  select(rank, major, unemployment_rate) %&gt;%\n  mutate(unemployment_rate = ___(___, 1))\n\nWhile were making some changes, let‚Äôs change sharewomen to numeric (it appears to be a string). Make sure to save your changes by overwriting the existing data frame!\n\ncollege_recent_grads &lt;- college_recent_grads %&gt;%\n  mutate(sharewomen = as.numeric(___))\n\n\n\nWhich major has the highest percentage of women?\nTo answer such a question we need to arrange the data in descending order. For example, if earlier we were interested in the major with the highest unemployment rate, we would use the following:\nThe desc function specifies that we want unemployment_rate in descending order.\n\ncollege_recent_grads %&gt;%\n  arrange(desc(unemployment_rate)) %&gt;%\n  select(rank, major, unemployment_rate)\n\n# A tibble: 173 √ó 3\n    rank major                                      unemployment_rate\n   &lt;dbl&gt; &lt;chr&gt;                                                  &lt;dbl&gt;\n 1     6 Nuclear Engineering                                    0.177\n 2    90 Public Administration                                  0.159\n 3    85 Computer Networking And Telecommunications             0.152\n 4   171 Clinical Psychology                                    0.149\n 5    30 Public Policy                                          0.128\n 6   106 Communication Technologies                             0.120\n 7     2 Mining And Mineral Engineering                         0.117\n 8    54 Computer Programming And Data Processing               0.114\n 9    80 Geography                                              0.113\n10    59 Architecture                                           0.113\n# ‚Ä¶ with 163 more rows\n\n\n\n1b. Using what you‚Äôve learned so far, arrange the data in descending order with respect to proportion of women in a major, and display only the major, the total number of people with major, and proportion of women. Show only the top 3 majors by adding head(3) at the end of the pipeline.\n\n\n#code here\n\n\n\nHow do the distributions of median income compare across major categories?\nA percentile is a measure used in statistics indicating the value below which a given percentage of observations in a group of observations fall. For example, the 20th percentile is the value below which 20% of the observations may be found. (Source: Wikipedia\nThere are three types of incomes reported in this data frame: p25th, median, and p75th. These correspond to the 25th, 50th, and 75th percentiles of the income distribution of sampled individuals for a given major.\nThe question we want to answer ‚ÄúHow do the distributions of median income compare across major categories?‚Äù. We need to do a few things to answer this question: First, we need to group the data by major_category. Then, we need a way to summarize the distributions of median income within these groups. This decision will depend on the shapes of these distributions. So first, we need to visualize the data.\n\n1c.Let‚Äôs start simple and take a look at the distribution of all median incomes using geom_histogram, without considering the major categories.\n\n\nggplot(data = ____,\n       mapping = aes(x = median)) +\n  geom_histogram()\n\n\n1d. Try binwidths of \\(1000\\) and \\(5000\\) and choose one. Explain your reasoning for your choice.\n\n\nggplot(data = ___,\n       mapping = aes(x = median)) +\n  geom_histogram(binwidth = ___)\n\nWe can also calculate summary statistics for this distribution using the summarise function:\n\ncollege_recent_grads %&gt;%\n  summarise(min = min(median), max = max(median),\n            mean = mean(median), med = median(median),\n            sd = sd(median), \n            q1 = quantile(median, probs = 0.25),\n            q3 = quantile(median, probs = 0.75))\n\n# A tibble: 1 √ó 7\n    min    max   mean   med     sd    q1    q3\n  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 22000 110000 40151. 36000 11470. 33000 45000\n\n\n\n1e. Based on the shape of the histogram you created in the previous 1e, determine which of these summary statistics above (min, max, mean, med, sd, q1, q3) is/are useful for describing the distribution. Write up your description and include the summary statistic output as well.You can pick single/multiple statistics and briefly explain why you pick it/them.\n1f. Next, we facet the plot by major category. Plot the distribution of median income using a histogram, faceted by major_category. Use the binwidth you chose in 1e.\n\n\nggplot(data = ___,\n       mapping = aes (x=median)) +\n  geom_histogram(bindwidth = 5000) +\n  facet_wrap(.~major_category)\n\n\n1g. Use filter to find out which major has the highest median income? lowest? Which major has the median() median income? Hint: refer to the statistics in 1d.\n\n\ncollege_recent_grads %&gt;%\n  ____(median == ____) \n\n\n1h. Which major category is the most popular in this sample? To answer this question we use a new function called count, which first groups the data , then counts the number of observations in each category and store the counts into a column named n. Add to the pipeline appropriately to arrange the results so that the major with the highest observations is on top.\n\n\ncollege_recent_grads %&gt;%\n  count(major_category) %&gt;% \n  ___(___(n))\n\n\n\nWhat types of majors do women tend to major in?\nFirst, let‚Äôs create a new vector called stem_categories that lists the major categories that are considered STEM fields.\n\nstem_categories &lt;- c(\"Biology & Life Science\",\n                     \"Computers & Mathematics\",\n                     \"Engineering\",\n                     \"Physical Sciences\")\n\nThen, we can use this to create a new variable in our data frame indicating whether a major is STEM or not.\n\ncollege_recent_grads &lt;- college_recent_grads %&gt;%\n  mutate(major_type = ifelse(major_category %in% \n                               stem_categories, \"stem\", \"not stem\"))\n\nLet‚Äôs unpack this: with mutate we create a new variable called major_type, which is defined as \"stem\" if the major_category is in the nector called stem_categories we created earlier, and as \"not stem\" otherwise.\n\n1i. Create a scatterplot of median income vs.¬†proportion of women in that major, colored by whether the major is in a STEM field or not. Describe the association between these three variables.\n\n\nggplot(data = ___, \n       mapping = aes(x=median, \n           y= sharewomen, \n           color=major_type)) + \n  geom_point()\n\n\n1j.. We can use the logical operators to also filter our data for STEM majors whose median earnings is less than median for all majors‚Äôs median earnings, which we found to be $36,000 earlier. Your output should only show the major name and median, 25th percentile, and 75th percentile earning for that major and should be sorted such that the major with the lowest median earning is on top.\n\n\n#code here\n\nWell done! You‚Äôve learned how to work with R to perform basic data analysis!\nWant to improve this tutorial? Report any suggestions/bugs/improvements on here! We‚Äôre interested in learning from you how we can make this tutorial better."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html",
    "href": "docs/site_libs/d3v5-5.9.2/API.html",
    "title": "D3 API Reference",
    "section": "",
    "text": "D3 is a collection of modules that are designed to work together; you can use the modules independently, or you can use them together as part of the default build. The source and documentation for each module is available in its repository. Follow the links below to learn more. For changes between major versions, see CHANGES; see also the release notes and the 3.x reference.\n\nArrays (Statistics, Search, Transformations, Histograms)\nAxes\nBrushes\nChords\nCollections (Objects, Maps, Sets, Nests)\nColors\nColor Schemes\nContours\nDispatches\nDragging\nDelimiter-Separated Values\nEasings\nFetches\nForces\nNumber Formats\nGeographies (Paths, Projections, Spherical Math, Spherical Shapes, Streams, Transforms)\nHierarchies\nInterpolators\nPaths\nPolygons\nQuadtrees\nRandom Numbers\nScales (Continuous, Sequential, Diverging, Quantize, Ordinal)\nSelections (Selecting, Modifying, Data, Events, Control, Local Variables, Namespaces)\nShapes (Arcs, Pies, Lines, Areas, Curves, Links, Symbols, Stacks)\nTime Formats\nTime Intervals\nTimers\nTransitions\nVoronoi Diagrams\nZooming\n\nD3 uses semantic versioning. The current version is exposed as d3.version.\n\n\nArray manipulation, ordering, searching, summarizing, etc.\n\n\nMethods for computing basic summary statistics.\n\nd3.min - compute the minimum value in an array.\nd3.max - compute the maximum value in an array.\nd3.extent - compute the minimum and maximum value in an array.\nd3.sum - compute the sum of an array of numbers.\nd3.mean - compute the arithmetic mean of an array of numbers.\nd3.median - compute the median of an array of numbers (the 0.5-quantile).\nd3.quantile - compute a quantile for a sorted array of numbers.\nd3.variance - compute the variance of an array of numbers.\nd3.deviation - compute the standard deviation of an array of numbers.\n\n\n\n\nMethods for searching arrays for a specific element.\n\nd3.scan - linear search for an element using a comparator.\nd3.bisect - binary search for a value in a sorted array.\nd3.bisectRight - binary search for a value in a sorted array.\nd3.bisectLeft - binary search for a value in a sorted array.\nd3.bisector - bisect using an accessor or comparator.\nbisector.left - bisectLeft, with the given comparator.\nbisector.right - bisectRight, with the given comparator.\nd3.ascending - compute the natural order of two values.\nd3.descending - compute the natural order of two values.\n\n\n\n\nMethods for transforming arrays and for generating new arrays.\n\nd3.cross - compute the Cartesian product of two arrays.\nd3.merge - merge multiple arrays into one array.\nd3.pairs - create an array of adjacent pairs of elements.\nd3.permute - reorder an array of elements according to an array of indexes.\nd3.shuffle - randomize the order of an array.\nd3.ticks - generate representative values from a numeric interval.\nd3.tickIncrement - generate representative values from a numeric interval.\nd3.tickStep - generate representative values from a numeric interval.\nd3.range - generate a range of numeric values.\nd3.transpose - transpose an array of arrays.\nd3.zip - transpose a variable number of arrays.\n\n\n\n\nBin discrete samples into continuous, non-overlapping intervals.\n\nd3.histogram - create a new histogram generator.\nhistogram - compute the histogram for the given array of samples.\nhistogram.value - specify a value accessor for each sample.\nhistogram.domain - specify the interval of observable values.\nhistogram.thresholds - specify how values are divided into bins.\nd3.thresholdFreedmanDiaconis - the Freedman‚ÄìDiaconis binning rule.\nd3.thresholdScott - Scott‚Äôs normal reference binning rule.\nd3.thresholdSturges - Sturges‚Äô binning formula.\n\n\n\n\n\nHuman-readable reference marks for scales.\n\nd3.axisTop - create a new top-oriented axis generator.\nd3.axisRight - create a new right-oriented axis generator.\nd3.axisBottom - create a new bottom-oriented axis generator.\nd3.axisLeft - create a new left-oriented axis generator.\naxis - generate an axis for the given selection.\naxis.scale - set the scale.\naxis.ticks - customize how ticks are generated and formatted.\naxis.tickArguments - customize how ticks are generated and formatted.\naxis.tickValues - set the tick values explicitly.\naxis.tickFormat - set the tick format explicitly.\naxis.tickSize - set the size of the ticks.\naxis.tickSizeInner - set the size of inner ticks.\naxis.tickSizeOuter - set the size of outer (extent) ticks.\naxis.tickPadding - set the padding between ticks and labels.\n\n\n\n\nSelect a one- or two-dimensional region using the mouse or touch.\n\nd3.brush - create a new two-dimensional brush.\nd3.brushX - create a brush along the x-dimension.\nd3.brushY - create a brush along the y-dimension.\nbrush - apply the brush to a selection.\nbrush.move - move the brush selection.\nbrush.extent - define the brushable region.\nbrush.filter - control which input events initiate brushing.\nbrush.handleSize - set the size of the brush handles.\nbrush.on - listen for brush events.\nd3.brushSelection - get the brush selection for a given node.\n\n\n\n\n\nd3.chord - create a new chord layout.\nchord - compute the layout for the given matrix.\nchord.padAngle - set the padding between adjacent groups.\nchord.sortGroups - define the group order.\nchord.sortSubgroups - define the source and target order within groups.\nchord.sortChords - define the chord order across groups.\nd3.ribbon - create a ribbon shape generator.\nribbon - generate a ribbon shape.\nribbon.source - set the source accessor.\nribbon.target - set the target accessor.\nribbon.radius - set the ribbon source or target radius.\nribbon.startAngle - set the ribbon source or target start angle.\nribbon.endAngle - set the ribbon source or target end angle.\nribbon.context - set the render context.\n\n\n\n\nHandy data structures for elements keyed by string.\n\n\nMethods for converting associative arrays (objects) to arrays.\n\nd3.keys - list the keys of an associative array.\nd3.values - list the values of an associated array.\nd3.entries - list the key-value entries of an associative array.\n\n\n\n\nLike ES6 Map, but with string keys and a few other differences.\n\nd3.map - create a new, empty map.\nmap.has - returns true if the map contains the given key.\nmap.get - get the value for the given key.\nmap.set - set the value for the given key.\nmap.remove - remove the entry for given key.\nmap.clear - remove all entries.\nmap.keys - get the array of keys.\nmap.values - get the array of values.\nmap.entries - get the array of entries (key-values objects).\nmap.each - call a function for each entry.\nmap.empty - returns false if the map has at least one entry.\nmap.size - compute the number of entries.\n\n\n\n\nLike ES6 Set, but with string keys and a few other differences.\n\nd3.set - create a new, empty set.\nset.has - returns true if the set contains the given value.\nset.add - add the given value.\nset.remove - remove the given value.\nset.clear - remove all values.\nset.values - get the array of values.\nset.each - call a function for each value.\nset.empty - returns true if the set has at least one value.\nset.size - compute the number of values.\n\n\n\n\nGroup data into arbitrary hierarchies.\n\nd3.nest - create a new nest generator.\nnest.key - add a level to the nest hierarchy.\nnest.sortKeys - sort the current nest level by key.\nnest.sortValues - sort the leaf nest level by value.\nnest.rollup - specify a rollup function for leaf values.\nnest.map - generate the nest, returning a map.\nnest.object - generate the nest, returning an associative array.\nnest.entries - generate the nest, returning an array of key-values tuples.\n\n\n\n\n\nColor manipulation and color space conversion.\n\nd3.color - parse the given CSS color specifier.\ncolor.rgb - compute the RGB equivalent of this color.\ncolor.brighter - create a brighter copy of this color.\ncolor.darker - create a darker copy of this color.\ncolor.displayable - returns true if the color is displayable on standard hardware.\ncolor.hex - returns the hexadecimal RGB string representation of this color.\ncolor.toString - returns the RGB string representation of this color.\nd3.rgb - create a new RGB color.\nd3.hsl - create a new HSL color.\nd3.lab - create a new Lab color.\nd3.hcl - create a new HCL color.\nd3.lch - create a new HCL color.\nd3.gray - create a new Lab gray.\nd3.cubehelix - create a new Cubehelix color.\n\n\n\n\nColor ramps and palettes for quantitative, ordinal and categorical scales.\n\n\n\nd3.schemeCategory10 -\nd3.schemeAccent -\nd3.schemeDark2 -\nd3.schemePaired -\nd3.schemePastel1 -\nd3.schemePastel2 -\nd3.schemeSet1 -\nd3.schemeSet2 -\nd3.schemeSet3 -\n\n\n\n\n\nd3.interpolateBrBG -\nd3.interpolatePiYG -\nd3.interpolatePRGn -\nd3.interpolatePuOr -\nd3.interpolateRdBu -\nd3.interpolateRdGy -\nd3.interpolateRdYlBu -\nd3.interpolateRdYlGn -\nd3.interpolateSpectral -\nd3.schemeBrBG -\nd3.schemePiYG -\nd3.schemePRGn -\nd3.schemePuOr -\nd3.schemeRdBu -\nd3.schemeRdGy -\nd3.schemeRdYlBu -\nd3.schemeRdYlGn -\nd3.schemeSpectral -\n\n\n\n\n\nd3.interpolateBlues -\nd3.interpolateGreens -\nd3.interpolateGreys -\nd3.interpolateOranges -\nd3.interpolatePurples -\nd3.interpolateReds -\nd3.schemeBlues -\nd3.schemeGreens -\nd3.schemeGreys -\nd3.schemeOranges -\nd3.schemePurples -\nd3.schemeReds -\n\n\n\n\n\nd3.interpolateBuGn -\nd3.interpolateBuPu -\nd3.interpolateCool -\nd3.interpolateCubehelixDefault -\nd3.interpolateGnBu -\nd3.interpolateInferno -\nd3.interpolateMagma -\nd3.interpolateOrRd -\nd3.interpolatePlasma -\nd3.interpolatePuBu -\nd3.interpolatePuBuGn -\nd3.interpolatePuRd -\nd3.interpolateRdPu -\nd3.interpolateViridis -\nd3.interpolateWarm -\nd3.interpolateYlGn -\nd3.interpolateYlGnBu -\nd3.interpolateYlOrBr -\nd3.interpolateYlOrRd -\nd3.schemeBuGn -\nd3.schemeBuPu -\nd3.schemeGnBu -\nd3.schemeOrRd -\nd3.schemePuBu -\nd3.schemePuBuGn -\nd3.schemePuRd -\nd3.schemeRdPu -\nd3.schemeYlGn -\nd3.schemeYlGnBu -\nd3.schemeYlOrBr -\nd3.schemeYlOrRd -\n\n\n\n\n\nd3.interpolateRainbow - the ‚Äúless-angry‚Äù rainbow\nd3.interpolateSinebow - the ‚Äúsinebow‚Äù smooth rainbow\n\n\n\n\n\nCompute contour polygons using marching squares.\n\nd3.contours - create a new contour generator.\ncontours - compute the contours for a given grid of values.\ncontours.contour -\ncontours.size -\ncontours.smooth -\ncontours.thresholds -\nd3.contourDensity - create a new density estimator.\ndensity - estimate the density of a given array of samples.\ndensity.x -\ndensity.y -\ndensity.size -\ndensity.cellSize -\ndensity.thresholds -\ndensity.bandwidth -\ndensity.weight -\n\n\n\n\nSeparate concerns using named callbacks.\n\nd3.dispatch - create a custom event dispatcher.\ndispatch.on - register or unregister an event listener.\ndispatch.copy - create a copy of a dispatcher.\ndispatch.call - dispatch an event to registered listeners.\ndispatch.apply - dispatch an event to registered listeners.\n\n\n\n\nDrag and drop SVG, HTML or Canvas using mouse or touch input.\n\nd3.drag - create a drag behavior.\ndrag - apply the drag behavior to a selection.\ndrag.container - set the coordinate system.\ndrag.filter - ignore some initiating input events.\ndrag.touchable - set the touch support detector.\ndrag.subject - set the thing being dragged.\ndrag.clickDistance - set the click distance threshold.\ndrag.on - listen for drag events.\nevent.on - listen for drag events on the current gesture.\nd3.dragDisable - prevent native drag-and-drop and text selection.\nd3.dragEnable - enable native drag-and-drop and text selection.\n\n\n\n\nParse and format delimiter-separated values, most commonly CSV and TSV.\n\nd3.dsvFormat - create a new parser and formatter for the given delimiter.\ndsv.parse - parse the given string, returning an array of objects.\ndsv.parseRows - parse the given string, returning an array of rows.\ndsv.format - format the given array of objects.\ndsv.formatBody - format the given array of objects.\ndsv.formatRows - format the given array of rows.\nd3.autoType - automatically infer value types for the given object.\nd3.csvParse - parse the given CSV string, returning an array of objects.\nd3.csvParseRows - parse the given CSV string, returning an array of rows.\nd3.csvFormat - format the given array of objects as CSV.\nd3.csvFormatBody - format the given array of objects as CSV.\nd3.csvFormatRows - format the given array of rows as CSV.\nd3.tsvParse - parse the given TSV string, returning an array of objects.\nd3.tsvParseRows - parse the given TSV string, returning an array of rows.\nd3.tsvFormat - format the given array of objects as TSV.\nd3.tsvFormatBody - format the given array of objects as TSV.\nd3.tsvFormatRows - format the given array of rows as TSV.\n\n\n\n\nEasing functions for smooth animation.\n\nease - ease the given normalized time.\nd3.easeLinear - linear easing; the identity function.\nd3.easePolyIn - polynomial easing; raises time to the given power.\nd3.easePolyOut - reverse polynomial easing.\nd3.easePolyInOut - symmetric polynomial easing.\npoly.exponent - specify the polynomial exponent.\nd3.easeQuad - an alias for easeQuadInOut.\nd3.easeQuadIn - quadratic easing; squares time.\nd3.easeQuadOut - reverse quadratic easing.\nd3.easeQuadInOut - symmetric quadratic easing.\nd3.easeCubic - an alias for easeCubicInOut.\nd3.easeCubicIn - cubic easing; cubes time.\nd3.easeCubicOut - reverse cubic easing.\nd3.easeCubicInOut - symmetric cubic easing.\nd3.easeSin - an alias for easeSinInOut.\nd3.easeSinIn - sinusoidal easing.\nd3.easeSinOut - reverse sinusoidal easing.\nd3.easeSinInOut - symmetric sinusoidal easing.\nd3.easeExp - an alias for easeExpInOut.\nd3.easeExpIn - exponential easing.\nd3.easeExpOut - reverse exponential easing.\nd3.easeExpInOut - symmetric exponential easing.\nd3.easeCircle - an alias for easeCircleInOut.\nd3.easeCircleIn - circular easing.\nd3.easeCircleOut - reverse circular easing.\nd3.easeCircleInOut - symmetric circular easing.\nd3.easeElastic - an alias for easeElasticOut.\nd3.easeElasticIn - elastic easing, like a rubber band.\nd3.easeElasticOut - reverse elastic easing.\nd3.easeElasticInOut - symmetric elastic easing.\nelastic.amplitude - specify the elastic amplitude.\nelastic.period - specify the elastic period.\nd3.easeBack - an alias for easeBackInOut.\nd3.easeBackIn - anticipatory easing, like a dancer bending his knees before jumping.\nd3.easeBackOut - reverse anticipatory easing.\nd3.easeBackInOut - symmetric anticipatory easing.\nback.overshoot - specify the amount of overshoot.\nd3.easeBounce - an alias for easeBounceOut.\nd3.easeBounceIn - bounce easing, like a rubber ball.\nd3.easeBounceOut - reverse bounce easing.\nd3.easeBounceInOut - symmetric bounce easing.\n\n\n\n\nConvenience methods on top of the Fetch API.\n\nd3.blob - get a file as a blob.\nd3.buffer - get a file as an array buffer.\nd3.csv - get a comma-separated values (CSV) file.\nd3.dsv - get a delimiter-separated values (CSV) file.\nd3.image - get an image.\nd3.json - get a JSON file.\nd3.text - get a plain text file.\nd3.tsv - get a tab-separated values (TSV) file.\n\n\n\n\nForce-directed graph layout using velocity Verlet integration.\n\nd3.forceSimulation - create a new force simulation.\nsimulation.restart - reheat and restart the simulation‚Äôs timer.\nsimulation.stop - stop the simulation‚Äôs timer.\nsimulation.tick - advance the simulation one step.\nsimulation.nodes - set the simulation‚Äôs nodes.\nsimulation.alpha - set the current alpha.\nsimulation.alphaMin - set the minimum alpha threshold.\nsimulation.alphaDecay - set the alpha exponential decay rate.\nsimulation.alphaTarget - set the target alpha.\nsimulation.velocityDecay - set the velocity decay rate.\nsimulation.force - add or remove a force.\nsimulation.find - find the closest node to the given position.\nsimulation.on - add or remove an event listener.\nforce - apply the force.\nforce.initialize - initialize the force with the given nodes.\nd3.forceCenter - create a centering force.\ncenter.x - set the center x-coordinate.\ncenter.y - set the center y-coordinate.\nd3.forceCollide - create a circle collision force.\ncollide.radius - set the circle radius.\ncollide.strength - set the collision resolution strength.\ncollide.iterations - set the number of iterations.\nd3.forceLink - create a link force.\nlink.links - set the array of links.\nlink.id - link nodes by numeric index or string identifier.\nlink.distance - set the link distance.\nlink.strength - set the link strength.\nlink.iterations - set the number of iterations.\nd3.forceManyBody - create a many-body force.\nmanyBody.strength - set the force strength.\nmanyBody.theta - set the Barnes‚ÄìHut approximation accuracy.\nmanyBody.distanceMin - limit the force when nodes are close.\nmanyBody.distanceMax - limit the force when nodes are far.\nd3.forceX - create an x-positioning force.\nx.strength - set the force strength.\nx.x - set the target x-coordinate.\nd3.forceY - create an y-positioning force.\ny.strength - set the force strength.\ny.y - set the target y-coordinate.\nd3.forceRadial - create a radial positioning force.\nradial.strength - set the force strength.\nradial.radius - set the target radius.\nradial.x - set the target center x-coordinate.\nradial.y - set the target center y-coordinate.\n\n\n\n\nFormat numbers for human consumption.\n\nd3.format - alias for locale.format on the default locale.\nd3.formatPrefix - alias for locale.formatPrefix on the default locale.\nd3.formatSpecifier - parse a number format specifier.\nd3.formatLocale - define a custom locale.\nd3.formatDefaultLocale - define the default locale.\nlocale.format - create a number format.\nlocale.formatPrefix - create a SI-prefix number format.\nd3.precisionFixed - compute decimal precision for fixed-point notation.\nd3.precisionPrefix - compute decimal precision for SI-prefix notation.\nd3.precisionRound - compute significant digits for rounded notation.\n\n\n\n\nGeographic projections, shapes and math.\n\n\n\nd3.geoPath - create a new geographic path generator.\npath - project and render the specified feature.\npath.area - compute the projected planar area of a given feature.\npath.bounds - compute the projected planar bounding box of a given feature.\npath.centroid - compute the projected planar centroid of a given feature.\npath.measure - compute the projected planar length of a given feature.\npath.projection - set the geographic projection.\npath.context - set the render context.\npath.pointRadius - set the radius to display point features.\n\n\n\n\n\nprojection - project the specified point from the sphere to the plane.\nprojection.invert - unproject the specified point from the plane to the sphere.\nprojection.stream - wrap the specified stream to project geometry.\nprojection.clipAngle - set the radius of the clip circle.\nprojection.clipExtent - set the viewport clip extent, in pixels.\nprojection.angle - set the post-projection rotation.\nprojection.scale - set the scale factor.\nprojection.translate - set the translation offset.\nprojection.fitExtent - set the scale and translate to fit a GeoJSON object.\nprojection.fitSize - set the scale and translate to fit a GeoJSON object.\nprojection.fitWidth - set the scale and translate to fit a GeoJSON object.\nprojection.fitHeight - set the scale and translate to fit a GeoJSON object.\nprojection.center - set the center point.\nprojection.rotate - set the three-axis spherical rotation angles.\nprojection.precision - set the precision threshold for adaptive sampling.\nprojection.preclip - set the spherical clipping stream transform.\nprojection.postclip - set the planar clipping stream transform.\nd3.geoClipAntimeridian - cuts spherical geometries that cross the antimeridian.\nd3.geoClipCircle - clips spherical geometries to a small circle.\nd3.geoClipRectangle - clips planar geometries to a rectangular viewport.\nd3.geoAlbers - the Albers equal-area conic projection.\nd3.geoAlbersUsa - a composite Albers projection for the United States.\nd3.geoAzimuthalEqualArea - the azimuthal equal-area projection.\nd3.geoAzimuthalEquidistant - the azimuthal equidistant projection.\nd3.geoConicConformal - the conic conformal projection.\nd3.geoConicEqualArea - the conic equal-area (Albers) projection.\nd3.geoConicEquidistant - the conic equidistant projection.\nconic.parallels - set the two standard parallels.\nd3.geoEqualEarth - the Equal Earth projection.\nd3.geoEquirectangular - the equirectangular (plate carre√©) projection.\nd3.geoGnomonic - the gnomonic projection.\nd3.geoMercator - the spherical Mercator projection.\nd3.geoOrthographic - the azimuthal orthographic projection.\nd3.geoStereographic - the azimuthal stereographic projection.\nd3.geoTransverseMercator - the transverse spherical Mercator projection.\nproject - project the specified point from the sphere to the plane.\nproject.invert - unproject the specified point from the plane to the sphere.\nd3.geoProjection - create a custom projection.\nd3.geoProjectionMutator - create a custom configurable projection.\nd3.geoAzimuthalEqualAreaRaw - the raw azimuthal equal-area projection.\nd3.geoAzimuthalEquidistantRaw - the raw azimuthal equidistant projection.\nd3.geoConicConformalRaw - the raw conic conformal projection.\nd3.geoConicEqualAreaRaw - the raw conic equal-area (Albers) projection.\nd3.geoConicEquidistantRaw - the raw conic equidistant projection.\nd3.geoEquirectangularRaw - the raw equirectangular (plate carre√©) projection.\nd3.geoGnomonicRaw - the raw gnomonic projection.\nd3.geoMercatorRaw - the raw Mercator projection.\nd3.geoOrthographicRaw - the raw azimuthal orthographic projection.\nd3.geoStereographicRaw - the raw azimuthal stereographic projection.\nd3.geoTransverseMercatorRaw - the raw transverse spherical Mercator projection.\n\n\n\n\n\nd3.geoArea - compute the spherical area of a given feature.\nd3.geoBounds - compute the latitude-longitude bounding box for a given feature.\nd3.geoCentroid - compute the spherical centroid of a given feature.\nd3.geoContains - test whether a point is inside a given feature.\nd3.geoDistance - compute the great-arc distance between two points.\nd3.geoLength - compute the length of a line string or the perimeter of a polygon.\nd3.geoInterpolate - interpolate between two points along a great arc.\nd3.geoRotation - create a rotation function for the specified angles.\nrotation - rotate the given point around the sphere.\nrotation.invert - unrotate the given point around the sphere.\n\n\n\n\n\nd3.geoCircle - create a circle generator.\ncircle - generate a piecewise circle as a Polygon.\ncircle.center - specify the circle center in latitude and longitude.\ncircle.radius - specify the angular radius in degrees.\ncircle.precision - specify the precision of the piecewise circle.\nd3.geoGraticule - create a graticule generator.\ngraticule - generate a MultiLineString of meridians and parallels.\ngraticule.lines - generate an array of LineStrings of meridians and parallels.\ngraticule.outline - generate a Polygon of the graticule‚Äôs extent.\ngraticule.extent - get or set the major & minor extents.\ngraticule.extentMajor - get or set the major extent.\ngraticule.extentMinor - get or set the minor extent.\ngraticule.step - get or set the major & minor step intervals.\ngraticule.stepMajor - get or set the major step intervals.\ngraticule.stepMinor - get or set the minor step intervals.\ngraticule.precision - get or set the latitudinal precision.\nd3.geoGraticule10 - generate the default 10¬∞ global graticule.\n\n\n\n\n\nd3.geoStream - convert a GeoJSON object to a geometry stream.\nstream.point - indicates a point with the specified coordinates.\nstream.lineStart - indicates the start of a line or ring.\nstream.lineEnd - indicates the end of a line or ring.\nstream.polygonStart - indicates the start of a polygon.\nstream.polygonEnd - indicates the end of a polygon.\nstream.sphere - indicates the sphere.\n\n\n\n\n\nd3.geoIdentity - scale, translate or clip planar geometry.\nidentity.reflectX - reflect the x-dimension.\nidentity.reflectY - reflect the y-dimension.\nd3.geoTransform - define a custom geometry transform.\n\n\n\n\n\nLayout algorithms for visualizing hierarchical data.\n\nd3.hierarchy - constructs a root node from hierarchical data.\nnode.ancestors - generate an array of ancestors.\nnode.descendants - generate an array of descendants.\nnode.leaves - generate an array of leaves.\nnode.path - generate the shortest path to another node.\nnode.links - generate an array of links.\nnode.sum - evaluate and aggregate quantitative values.\nnode.sort - sort all descendant siblings.\nnode.count - count the number of leaves.\nnode.each - breadth-first traversal.\nnode.eachAfter - post-order traversal.\nnode.eachBefore - pre-order traversal.\nnode.copy - copy a hierarchy.\nd3.stratify - create a new stratify operator.\nstratify - construct a root node from tabular data.\nstratify.id - set the node id accessor.\nstratify.parentId - set the parent node id accessor.\nd3.cluster - create a new cluster (dendrogram) layout.\ncluster - layout the specified hierarchy in a dendrogram.\ncluster.size - set the layout size.\ncluster.nodeSize - set the node size.\ncluster.separation - set the separation between leaves.\nd3.tree - create a new tidy tree layout.\ntree - layout the specified hierarchy in a tidy tree.\ntree.size - set the layout size.\ntree.nodeSize - set the node size.\ntree.separation - set the separation between nodes.\nd3.treemap - create a new treemap layout.\ntreemap - layout the specified hierarchy as a treemap.\ntreemap.tile - set the tiling method.\ntreemap.size - set the layout size.\ntreemap.round - set whether the output coordinates are rounded.\ntreemap.padding - set the padding.\ntreemap.paddingInner - set the padding between siblings.\ntreemap.paddingOuter - set the padding between parent and children.\ntreemap.paddingTop - set the padding between the parent‚Äôs top edge and children.\ntreemap.paddingRight - set the padding between the parent‚Äôs right edge and children.\ntreemap.paddingBottom - set the padding between the parent‚Äôs bottom edge and children.\ntreemap.paddingLeft - set the padding between the parent‚Äôs left edge and children.\nd3.treemapBinary - tile using a balanced binary tree.\nd3.treemapDice - tile into a horizontal row.\nd3.treemapSlice - tile into a vertical column.\nd3.treemapSliceDice - alternate between slicing and dicing.\nd3.treemapSquarify - tile using squarified rows per Bruls et. al.\nd3.treemapResquarify - like d3.treemapSquarify, but performs stable updates.\nsquarify.ratio - set the desired rectangle aspect ratio.\nd3.partition - create a new partition (icicle or sunburst) layout.\npartition - layout the specified hierarchy as a partition diagram.\npartition.size - set the layout size.\npartition.round - set whether the output coordinates are rounded.\npartition.padding - set the padding.\nd3.pack - create a new circle-packing layout.\npack - layout the specified hierarchy using circle-packing.\npack.radius - set the radius accessor.\npack.size - set the layout size.\npack.padding - set the padding.\nd3.packSiblings - pack the specified array of circles.\nd3.packEnclose - enclose the specified array of circles.\n\n\n\n\nInterpolate numbers, colors, strings, arrays, objects, whatever!\n\nd3.interpolate - interpolate arbitrary values.\nd3.interpolateArray - interpolate arrays of arbitrary values.\nd3.interpolateDate - interpolate dates.\nd3.interpolateNumber - interpolate numbers.\nd3.interpolateObject - interpolate arbitrary objects.\nd3.interpolateRound - interpolate integers.\nd3.interpolateString - interpolate strings with embedded numbers.\nd3.interpolateTransformCss - interpolate 2D CSS transforms.\nd3.interpolateTransformSvg - interpolate 2D SVG transforms.\nd3.interpolateZoom - zoom and pan between two views.\nd3.interpolateRgb - interpolate RGB colors.\nd3.interpolateRgbBasis - generate a B-spline through a set of colors.\nd3.interpolateRgbBasisClosed - generate a closed B-spline through a set of colors.\nd3.interpolateHsl - interpolate HSL colors.\nd3.interpolateHslLong - interpolate HSL colors, the long way.\nd3.interpolateLab - interpolate Lab colors.\nd3.interpolateHcl - interpolate HCL colors.\nd3.interpolateHclLong - interpolate HCL colors, the long way.\nd3.interpolateCubehelix - interpolate Cubehelix colors.\nd3.interpolateCubehelixLong - interpolate Cubehelix colors, the long way.\ninterpolate.gamma - apply gamma correction during interpolation.\nd3.interpolateHue - interpolate a hue angle.\nd3.interpolateDiscrete - generate a discrete interpolator from a set of values.\nd3.interpolateBasis - generate a B-spline through a set of values.\nd3.interpolateBasisClosed - generate a closed B-spline through a set of values.\nd3.piecewise - generate a piecewise linear interpolator from a set of values.\nd3.quantize - generate uniformly-spaced samples from an interpolator.\n\n\n\n\nSerialize Canvas path commands to SVG.\n\nd3.path - create a new path serializer.\npath.moveTo - move to the given point.\npath.closePath - close the current subpath.\npath.lineTo - draw a straight line segment.\npath.quadraticCurveTo - draw a quadratic B√©zier segment.\npath.bezierCurveTo - draw a cubic B√©zier segment.\npath.arcTo - draw a circular arc segment.\npath.arc - draw a circular arc segment.\npath.rect - draw a rectangle.\npath.toString - serialize to an SVG path data string.\n\n\n\n\nGeometric operations for two-dimensional polygons.\n\nd3.polygonArea - compute the area of the given polygon.\nd3.polygonCentroid - compute the centroid of the given polygon.\nd3.polygonHull - compute the convex hull of the given points.\nd3.polygonContains - test whether a point is inside a polygon.\nd3.polygonLength - compute the length of the given polygon‚Äôs perimeter.\n\n\n\n\nTwo-dimensional recursive spatial subdivision.\n\nd3.quadtree - create a new, empty quadtree.\nquadtree.x - set the x accessor.\nquadtree.y - set the y accessor.\nquadtree.add - add a datum to a quadtree.\nquadtree.addAll - add an array of data to a quadtree.\nquadtree.remove - remove a datum from a quadtree.\nquadtree.removeAll - remove an array of data from a quadtree.\nquadtree.copy - create a copy of a quadtree.\nquadtree.root - get the quadtree‚Äôs root node.\nquadtree.data - retrieve all data from the quadtree.\nquadtree.size - count the number of data in the quadtree.\nquadtree.find - quickly find the closest datum in a quadtree.\nquadtree.visit - selectively visit nodes in a quadtree.\nquadtree.visitAfter - visit all nodes in a quadtree.\nquadtree.cover - extend the quadtree to cover a point.\nquadtree.extent - extend the quadtree to cover an extent.\n\n\n\n\nGenerate random numbers from various distributions.\n\nd3.randomUniform - from a uniform distribution.\nd3.randomNormal - from a normal distribution.\nd3.randomLogNormal - from a log-normal distribution.\nd3.randomBates - from a Bates distribution.\nd3.randomIrwinHall - from an Irwin‚ÄìHall distribution.\nd3.randomExponential - from an exponential distribution.\nrandom.source - set the source of randomness.\n\n\n\n\nEncodings that map abstract data to visual representation.\n\n\nMap a continuous, quantitative domain to a continuous range.\n\ncontinuous - compute the range value corresponding to a given domain value.\ncontinuous.invert - compute the domain value corresponding to a given range value.\ncontinuous.domain - set the input domain.\ncontinuous.range - set the output range.\ncontinuous.rangeRound - set the output range and enable rounding.\ncontinuous.clamp - enable clamping to the domain or range.\ncontinuous.interpolate - set the output interpolator.\ncontinuous.unknown - set the output value for unknown inputs.\ncontinuous.ticks - compute representative values from the domain.\ncontinuous.tickFormat - format ticks for human consumption.\ncontinuous.nice - extend the domain to nice round numbers.\ncontinuous.copy - create a copy of this scale.\nd3.scaleLinear - create a quantitative linear scale.\nd3.scalePow - create a quantitative power scale.\npow - compute the range value corresponding to a given domain value.\npow.invert - compute the domain value corresponding to a given range value.\npow.exponent - set the power exponent.\npow.domain - set the input domain.\npow.range - set the output range.\npow.rangeRound - set the output range and enable rounding.\npow.clamp - enable clamping to the domain or range.\npow.interpolate - set the output interpolator.\npow.ticks - compute representative values from the domain.\npow.tickFormat - format ticks for human consumption.\npow.nice - extend the domain to nice round numbers.\npow.copy - create a copy of this scale.\nd3.scaleSqrt - create a quantitative power scale with exponent 0.5.\nd3.scaleLog - create a quantitative logarithmic scale.\nlog - compute the range value corresponding to a given domain value.\nlog.invert - compute the domain value corresponding to a given range value.\nlog.base - set the logarithm base.\nlog.domain - set the input domain.\nlog.range - set the output range.\nlog.rangeRound - set the output range and enable rounding.\nlog.clamp - enable clamping to the domain or range.\nlog.interpolate - set the output interpolator.\nlog.ticks - compute representative values from the domain.\nlog.tickFormat - format ticks for human consumption.\nlog.nice - extend the domain to nice round numbers.\nlog.copy - create a copy of this scale.\nd3.scaleSymlog - create a symmetric logarithmic scale.\nd3.scaleIdentity - create a quantitative identity scale.\nd3.scaleTime - create a linear scale for time.\ntime - compute the range value corresponding to a given domain value.\ntime.invert - compute the domain value corresponding to a given range value.\ntime.domain - set the input domain.\ntime.range - set the output range.\ntime.rangeRound - set the output range and enable rounding.\ntime.clamp - enable clamping to the domain or range.\ntime.interpolate - set the output interpolator.\ntime.ticks - compute representative values from the domain.\ntime.tickFormat - format ticks for human consumption.\ntime.nice - extend the domain to nice round times.\ntime.copy - create a copy of this scale.\nd3.scaleUtc - create a linear scale for UTC.\nd3.tickFormat - format ticks for human consumption.\n\n\n\n\nMap a continuous, quantitative domain to a continuous, fixed interpolator.\n\nd3.scaleSequential - create a sequential scale.\nsequential.interpolator - set the scale‚Äôs output interpolator.\nd3.scaleSequentialLog -\nd3.scaleSequentialPow -\nd3.scaleSequentialSqrt -\nd3.scaleSequentialSymlog -\nd3.scaleSequentialQuantile -\n\n\n\n\nMap a continuous, quantitative domain to a continuous, fixed interpolator.\n\nd3.scaleDiverging - create a diverging scale.\ndiverging.interpolator - set the scale‚Äôs output interpolator.\nd3.scaleDivergingLog -\nd3.scaleDivergingPow -\nd3.scaleDivergingSqrt -\nd3.scaleDivergingSymlog -\n\n\n\n\nMap a continuous, quantitative domain to a discrete range.\n\nd3.scaleQuantize - create a uniform quantizing linear scale.\nquantize - compute the range value corresponding to a given domain value.\nquantize.invertExtent - compute the domain values corresponding to a given range value.\nquantize.domain - set the input domain.\nquantize.range - set the output range.\nquantize.nice - extend the domain to nice round numbers.\nquantize.ticks - compute representative values from the domain.\nquantize.tickFormat - format ticks for human consumption.\nquantize.copy - create a copy of this scale.\nd3.scaleQuantile - create a quantile quantizing linear scale.\nquantile - compute the range value corresponding to a given domain value.\nquantile.invertExtent - compute the domain values corresponding to a given range value.\nquantile.domain - set the input domain.\nquantile.range - set the output range.\nquantile.quantiles - get the quantile thresholds.\nquantile.copy - create a copy of this scale.\nd3.scaleThreshold - create an arbitrary quantizing linear scale.\nthreshold - compute the range value corresponding to a given domain value.\nthreshold.invertExtent - compute the domain values corresponding to a given range value.\nthreshold.domain - set the input domain.\nthreshold.range - set the output range.\nthreshold.copy - create a copy of this scale.\n\n\n\n\nMap a discrete domain to a discrete range.\n\nd3.scaleOrdinal - create an ordinal scale.\nordinal - compute the range value corresponding to a given domain value.\nordinal.domain - set the input domain.\nordinal.range - set the output range.\nordinal.unknown - set the output value for unknown inputs.\nordinal.copy - create a copy of this scale.\nd3.scaleImplicit - a special unknown value for implicit domains.\nd3.scaleBand - create an ordinal band scale.\nband - compute the band start corresponding to a given domain value.\nband.domain - set the input domain.\nband.range - set the output range.\nband.rangeRound - set the output range and enable rounding.\nband.round - enable rounding.\nband.paddingInner - set padding between bands.\nband.paddingOuter - set padding outside the first and last bands.\nband.padding - set padding outside and between bands.\nband.align - set band alignment, if there is extra space.\nband.bandwidth - get the width of each band.\nband.step - get the distance between the starts of adjacent bands.\nband.copy - create a copy of this scale.\nd3.scalePoint - create an ordinal point scale.\npoint - compute the point corresponding to a given domain value.\npoint.domain - set the input domain.\npoint.range - set the output range.\npoint.rangeRound - set the output range and enable rounding.\npoint.round - enable rounding.\npoint.padding - set padding outside the first and last point.\npoint.align - set point alignment, if there is extra space.\npoint.bandwidth - returns zero.\npoint.step - get the distance between the starts of adjacent points.\npoint.copy - create a copy of this scale.\n\n\n\n\n\nTransform the DOM by selecting elements and joining to data.\n\n\n\nd3.selection - select the root document element.\nd3.select - select an element from the document.\nd3.selectAll - select multiple elements from the document.\nselection.select - select a descendant element for each selected element.\nselection.selectAll - select multiple descendants for each selected element.\nselection.filter - filter elements based on data.\nselection.merge - merge this selection with another.\nd3.matcher - test whether an element matches a selector.\nd3.selector - select an element.\nd3.selectorAll - select elements.\nd3.window - get a node‚Äôs owner window.\nd3.style - get a node‚Äôs current style value.\n\n\n\n\n\nselection.attr - get or set an attribute.\nselection.classed - get, add or remove CSS classes.\nselection.style - get or set a style property.\nselection.property - get or set a (raw) property.\nselection.text - get or set the text content.\nselection.html - get or set the inner HTML.\nselection.append - create, append and select new elements.\nselection.insert - create, insert and select new elements.\nselection.remove - remove elements from the document.\nselection.clone - insert clones of selected elements.\nselection.sort - sort elements in the document based on data.\nselection.order - reorders elements in the document to match the selection.\nselection.raise - reorders each element as the last child of its parent.\nselection.lower - reorders each element as the first child of its parent.\nd3.create - create and select a detached element.\nd3.creator - create an element by name.\n\n\n\n\n\nselection.data - bind elements to data.\nselection.join - enter, update or exit elements based on data.\nselection.enter - get the enter selection (data missing elements).\nselection.exit - get the exit selection (elements missing data).\nselection.datum - get or set element data (without joining).\n\n\n\n\n\nselection.on - add or remove event listeners.\nselection.dispatch - dispatch a custom event.\nd3.event - the current user event, during interaction.\nd3.customEvent - temporarily define a custom event.\nd3.mouse - get the mouse position relative to a given container.\nd3.touch - get a touch position relative to a given container.\nd3.touches - get the touch positions relative to a given container.\nd3.clientPoint - get a position relative to a given container.\n\n\n\n\n\nselection.each - call a function for each element.\nselection.call - call a function with this selection.\nselection.empty - returns true if this selection is empty.\nselection.nodes - returns an array of all selected elements.\nselection.node - returns the first (non-null) element.\nselection.size - returns the count of elements.\n\n\n\n\n\nd3.local - declares a new local variable.\nlocal.set - set a local variable‚Äôs value.\nlocal.get - get a local variable‚Äôs value.\nlocal.remove - delete a local variable.\nlocal.toString - get the property identifier of a local variable.\n\n\n\n\n\nd3.namespace - qualify a prefixed XML name, such as ‚Äúxlink:href‚Äù.\nd3.namespaces - the built-in XML namespaces.\n\n\n\n\n\nGraphical primitives for visualization.\n\n\nCircular or annular sectors, as in a pie or donut chart.\n\nd3.arc - create a new arc generator.\narc - generate an arc for the given datum.\narc.centroid - compute an arc‚Äôs midpoint.\narc.innerRadius - set the inner radius.\narc.outerRadius - set the outer radius.\narc.cornerRadius - set the corner radius, for rounded corners.\narc.startAngle - set the start angle.\narc.endAngle - set the end angle.\narc.padAngle - set the angle between adjacent arcs, for padded arcs.\narc.padRadius - set the radius at which to linearize padding.\narc.context - set the rendering context.\n\n\n\n\nCompute the necessary angles to represent a tabular dataset as a pie or donut chart.\n\nd3.pie - create a new pie generator.\npie - compute the arc angles for the given dataset.\npie.value - set the value accessor.\npie.sort - set the sort order comparator.\npie.sortValues - set the sort order comparator.\npie.startAngle - set the overall start angle.\npie.endAngle - set the overall end angle.\npie.padAngle - set the pad angle between adjacent arcs.\n\n\n\n\nA spline or polyline, as in a line chart.\n\nd3.line - create a new line generator.\nline - generate a line for the given dataset.\nline.x - set the x accessor.\nline.y - set the y accessor.\nline.defined - set the defined accessor.\nline.curve - set the curve interpolator.\nline.context - set the rendering context.\nd3.lineRadial - create a new radial line generator.\nlineRadial - generate a line for the given dataset.\nlineRadial.angle - set the angle accessor.\nlineRadial.radius - set the radius accessor.\nlineRadial.defined - set the defined accessor.\nlineRadial.curve - set the curve interpolator.\nlineRadial.context - set the rendering context.\n\n\n\n\nAn area, defined by a bounding topline and baseline, as in an area chart.\n\nd3.area - create a new area generator.\narea - generate an area for the given dataset.\narea.x - set the x0 and x1 accessors.\narea.x0 - set the baseline x accessor.\narea.x1 - set the topline x accessor.\narea.y - set the y0 and y1 accessors.\narea.y0 - set the baseline y accessor.\narea.y1 - set the topline y accessor.\narea.defined - set the defined accessor.\narea.curve - set the curve interpolator.\narea.context - set the rendering context.\narea.lineX0 - derive a line for the left edge of an area.\narea.lineX1 - derive a line for the right edge of an area.\narea.lineY0 - derive a line for the top edge of an area.\narea.lineY1 - derive a line for the bottom edge of an area.\nd3.radialArea - create a new radial area generator.\nradialArea - generate an area for the given dataset.\nradialArea.angle - set the start and end angle accessors.\nradialArea.startAngle - set the start angle accessor.\nradialArea.endAngle - set the end angle accessor.\nradialArea.radius - set the inner and outer radius accessors.\nradialArea.innerRadius - set the inner radius accessor.\nradialArea.outerRadius - set the outer radius accessor.\nradialArea.defined - set the defined accessor.\nradialArea.curve - set the curve interpolator.\nradialArea.context - set the rendering context.\nradialArea.lineStartAngle - derive a line for the start edge of an area.\nradialArea.lineEndAngle - derive a line for the end edge of an area.\nradialArea.lineInnerRadius - derive a line for the inner edge of an area.\nradialArea.lineOuterRadius - derive a line for the outer edge of an area.\n\n\n\n\nInterpolate between points to produce a continuous shape.\n\nd3.curveBasis - a cubic basis spline, repeating the end points.\nd3.curveBasisClosed - a closed cubic basis spline.\nd3.curveBasisOpen - a cubic basis spline.\nd3.curveBundle - a straightened cubic basis spline.\nbundle.beta - set the bundle tension beta.\nd3.curveCardinal - a cubic cardinal spline, with one-sided difference at each end.\nd3.curveCardinalClosed - a closed cubic cardinal spline.\nd3.curveCardinalOpen - a cubic cardinal spline.\ncardinal.tension - set the cardinal spline tension.\nd3.curveCatmullRom - a cubic Catmull‚ÄìRom spline, with one-sided difference at each end.\nd3.curveCatmullRomClosed - a closed cubic Catmull‚ÄìRom spline.\nd3.curveCatmullRomOpen - a cubic Catmull‚ÄìRom spline.\ncatmullRom.alpha - set the Catmull‚ÄìRom parameter alpha.\nd3.curveLinear - a polyline.\nd3.curveLinearClosed - a closed polyline.\nd3.curveMonotoneX - a cubic spline that, given monotonicity in x, preserves it in y.\nd3.curveMonotoneY - a cubic spline that, given monotonicity in y, preserves it in x.\nd3.curveNatural - a natural cubic spline.\nd3.curveStep - a piecewise constant function.\nd3.curveStepAfter - a piecewise constant function.\nd3.curveStepBefore - a piecewise constant function.\ncurve.areaStart - start a new area segment.\ncurve.areaEnd - end the current area segment.\ncurve.lineStart - start a new line segment.\ncurve.lineEnd - end the current line segment.\ncurve.point - add a point to the current line segment.\n\n\n\n\nA smooth cubic B√©zier curve from a source to a target.\n\nd3.linkVertical - create a new vertical link generator.\nd3.linkHorizontal - create a new horizontal link generator.\nlink - generate a link.\nlink.source - set the source accessor.\nlink.target - set the target accessor.\nlink.x - set the point x-accessor.\nlink.y - set the point y-accessor.\nlink.context - set the rendering context.\nd3.linkRadial - create a new radial link generator.\nradialLink.angle - set the point angle accessor.\nradialLink.radius - set the point radius accessor.\n\n\n\n\nA categorical shape encoding, as in a scatterplot.\n\nd3.symbol - create a new symbol generator.\nsymbol - generate a symbol for the given datum.\nsymbol.type - set the symbol type.\nsymbol.size - set the size of the symbol in square pixels.\nsymbol.context - set the rendering context.\nd3.symbols - the array of built-in symbol types.\nd3.symbolCircle - a circle.\nd3.symbolCross - a Greek cross with arms of equal length.\nd3.symbolDiamond - a rhombus.\nd3.symbolSquare - a square.\nd3.symbolStar - a pentagonal star (pentagram).\nd3.symbolTriangle - an up-pointing triangle.\nd3.symbolWye - a Y shape.\nd3.pointRadial -\nsymbolType.draw - draw this symbol to the given context.\n\n\n\n\nStack shapes, placing one adjacent to another, as in a stacked bar chart.\n\nd3.stack - create a new stack generator.\nstack - generate a stack for the given dataset.\nstack.keys - set the keys accessor.\nstack.value - set the value accessor.\nstack.order - set the order accessor.\nstack.offset - set the offset accessor.\nd3.stackOrderAppearance - put the earliest series on bottom.\nd3.stackOrderAscending - put the smallest series on bottom.\nd3.stackOrderDescending - put the largest series on bottom.\nd3.stackOrderInsideOut - put earlier series in the middle.\nd3.stackOrderNone - use the given series order.\nd3.stackOrderReverse - use the reverse of the given series order.\nd3.stackOffsetExpand - normalize the baseline to zero and topline to one.\nd3.stackOffsetDiverging - positive above zero; negative below zero.\nd3.stackOffsetNone - apply a zero baseline.\nd3.stackOffsetSilhouette - center the streamgraph around zero.\nd3.stackOffsetWiggle - minimize streamgraph wiggling.\n\n\n\n\n\nParse and format times, inspired by strptime and strftime.\n\nd3.timeFormat - alias for locale.format on the default locale.\nd3.timeParse - alias for locale.parse on the default locale.\nd3.utcFormat - alias for locale.utcFormat on the default locale.\nd3.utcParse - alias for locale.utcParse on the default locale.\nd3.isoFormat - an ISO 8601 UTC formatter.\nd3.isoParse - an ISO 8601 UTC parser.\nd3.timeFormatLocale - define a custom locale.\nd3.timeFormatDefaultLocale - define the default locale.\nlocale.format - create a time formatter.\nlocale.parse - create a time parser.\nlocale.utcFormat - create a UTC formatter.\nlocale.utcParse - create a UTC parser.\n\n\n\n\nA calculator for humanity‚Äôs peculiar conventions of time.\n\nd3.timeInterval - implement a new custom time interval.\ninterval - alias for interval.floor.\ninterval.floor - round down to the nearest boundary.\ninterval.round - round to the nearest boundary.\ninterval.ceil - round up to the nearest boundary.\ninterval.offset - offset a date by some number of intervals.\ninterval.range - generate a range of dates at interval boundaries.\ninterval.filter - create a filtered subset of this interval.\ninterval.every - create a filtered subset of this interval.\ninterval.count - count interval boundaries between two dates.\nd3.timeMillisecond, d3.utcMillisecond - the millisecond interval.\nd3.timeMilliseconds, d3.utcMilliseconds - aliases for millisecond.range.\nd3.timeSecond, d3.utcSecond - the second interval.\nd3.timeSeconds, d3.utcSeconds - aliases for second.range.\nd3.timeMinute, d3.utcMinute - the minute interval.\nd3.timeMinutes, d3.utcMinutes - aliases for minute.range.\nd3.timeHour, d3.utcHour - the hour interval.\nd3.timeHours, d3.utcHours - aliases for hour.range.\nd3.timeDay, d3.utcDay - the day interval.\nd3.timeDays, d3.utcDays - aliases for day.range.\nd3.timeWeek, d3.utcWeek - aliases for sunday.\nd3.timeWeeks, d3.utcWeeks - aliases for week.range.\nd3.timeSunday, d3.utcSunday - the week interval, starting on Sunday.\nd3.timeSundays, d3.utcSundays - aliases for sunday.range.\nd3.timeMonday, d3.utcMonday - the week interval, starting on Monday.\nd3.timeMondays, d3.utcMondays - aliases for monday.range.\nd3.timeTuesday, d3.utcTuesday - the week interval, starting on Tuesday.\nd3.timeTuesdays, d3.utcTuesdays - aliases for tuesday.range.\nd3.timeWednesday, d3.utcWednesday - the week interval, starting on Wednesday.\nd3.timeWednesdays, d3.utcWednesdays - aliases for wednesday.range.\nd3.timeThursday, d3.utcThursday - the week interval, starting on Thursday.\nd3.timeThursdays, d3.utcThursdays - aliases for thursday.range.\nd3.timeFriday, d3.utcFriday - the week interval, starting on Friday.\nd3.timeFridays, d3.utcFridays - aliases for friday.range.\nd3.timeSaturday, d3.utcSaturday - the week interval, starting on Saturday.\nd3.timeSaturdays, d3.utcSaturdays - aliases for saturday.range.\nd3.timeMonth, d3.utcMonth - the month interval.\nd3.timeMonths, d3.utcMonths - aliases for month.range.\nd3.timeYear, d3.utcYear - the year interval.\nd3.timeYears, d3.utcYears - aliases for year.range.\n\n\n\n\nAn efficient queue for managing thousands of concurrent animations.\n\nd3.now - get the current high-resolution time.\nd3.timer - schedule a new timer.\ntimer.restart - reset the timer‚Äôs start time and callback.\ntimer.stop - stop the timer.\nd3.timerFlush - immediately execute any eligible timers.\nd3.timeout - schedule a timer that stops on its first callback.\nd3.interval - schedule a timer that is called with a configurable period.\n\n\n\n\nAnimated transitions for selections.\n\nselection.transition - schedule a transition for the selected elements.\nselection.interrupt - interrupt and cancel transitions on the selected elements.\nd3.transition - schedule a transition on the root document element.\ntransition.select - schedule a transition on the selected elements.\ntransition.selectAll - schedule a transition on the selected elements.\ntransition.filter - filter elements based on data.\ntransition.merge - merge this transition with another.\ntransition.selection - returns a selection for this transition.\ntransition.transition - schedule a new transition following this one.\ntransition.call - call a function with this transition.\ntransition.nodes - returns an array of all selected elements.\ntransition.node - returns the first (non-null) element.\ntransition.size - returns the count of elements.\ntransition.empty - returns true if this transition is empty.\ntransition.each - call a function for each element.\ntransition.on - add or remove transition event listeners.\ntransition.end - await the end of a transition.\ntransition.attr - tween the given attribute using the default interpolator.\ntransition.attrTween - tween the given attribute using a custom interpolator.\ntransition.style - tween the given style property using the default interpolator.\ntransition.styleTween - tween the given style property using a custom interpolator.\ntransition.text - set the text content when the transition starts.\ntransition.remove - remove the selected elements when the transition ends.\ntransition.tween - run custom code during the transition.\ntransition.delay - specify per-element delay in milliseconds.\ntransition.duration - specify per-element duration in milliseconds.\ntransition.ease - specify the easing function.\nd3.active - select the active transition for a given node.\nd3.interrupt - interrupt the active transition for a given node.\n\n\n\n\nCompute the Voronoi diagram of a given set of points.\n\nd3.voronoi - create a new Voronoi generator.\nvoronoi - generate a new Voronoi diagram for the given points.\nvoronoi.polygons - compute the Voronoi polygons for the given points.\nvoronoi.triangles - compute the Delaunay triangles for the given points.\nvoronoi.links - compute the Delaunay links for the given points.\nvoronoi.x - set the x accessor.\nvoronoi.y - set the y accessor.\nvoronoi.extent - set the observed extent of points.\nvoronoi.size - set the observed extent of points.\ndiagram.polygons - compute the polygons for this Voronoi diagram.\ndiagram.triangles - compute the triangles for this Voronoi diagram.\ndiagram.links - compute the links for this Voronoi diagram.\ndiagram.find - find the closest point in this Voronoi diagram.\n\n\n\n\nPan and zoom SVG, HTML or Canvas using mouse or touch input.\n\nd3.zoom - create a zoom behavior.\nzoom - apply the zoom behavior to the selected elements.\nzoom.transform - change the transform for the selected elements.\nzoom.translateTo - translate the transform for the selected elements.\nzoom.translateBy - translate the transform for the selected elements.\nzoom.scaleBy - scale the transform for the selected elements.\nzoom.scaleTo - scale the transform for the selected elements.\nzoom.filter - control which input events initiate zooming.\nzoom.touchable - set the touch support detector.\nzoom.wheelDelta - override scaling for wheel events.\nzoom.clickDistance - set the click distance threshold.\nzoom.extent - set the extent of the viewport.\nzoom.scaleExtent - set the allowed scale range.\nzoom.translateExtent - set the extent of the zoomable world.\nzoom.constrain - override the transform constraint logic.\nzoom.duration - set the duration of zoom transitions.\nzoom.interpolate - control the interpolation of zoom transitions.\nzoom.on - listen for zoom events.\nd3.zoomTransform - get the zoom transform for a given element.\ntransform.scale - scale a transform by the specified amount.\ntransform.translate - translate a transform by the specified amount.\ntransform.apply - apply the transform to the given point.\ntransform.applyX - apply the transform to the given x-coordinate.\ntransform.applyY - apply the transform to the given y-coordinate.\ntransform.invert - unapply the transform to the given point.\ntransform.invertX - unapply the transform to the given x-coordinate.\ntransform.invertY - unapply the transform to the given y-coordinate.\ntransform.rescaleX - apply the transform to an x-scale‚Äôs domain.\ntransform.rescaleY - apply the transform to a y-scale‚Äôs domain.\ntransform.toString - format the transform as an SVG transform string.\nd3.zoomIdentity - the identity transform."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#arrays-d3-array",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#arrays-d3-array",
    "title": "D3 API Reference",
    "section": "",
    "text": "Array manipulation, ordering, searching, summarizing, etc.\n\n\nMethods for computing basic summary statistics.\n\nd3.min - compute the minimum value in an array.\nd3.max - compute the maximum value in an array.\nd3.extent - compute the minimum and maximum value in an array.\nd3.sum - compute the sum of an array of numbers.\nd3.mean - compute the arithmetic mean of an array of numbers.\nd3.median - compute the median of an array of numbers (the 0.5-quantile).\nd3.quantile - compute a quantile for a sorted array of numbers.\nd3.variance - compute the variance of an array of numbers.\nd3.deviation - compute the standard deviation of an array of numbers.\n\n\n\n\nMethods for searching arrays for a specific element.\n\nd3.scan - linear search for an element using a comparator.\nd3.bisect - binary search for a value in a sorted array.\nd3.bisectRight - binary search for a value in a sorted array.\nd3.bisectLeft - binary search for a value in a sorted array.\nd3.bisector - bisect using an accessor or comparator.\nbisector.left - bisectLeft, with the given comparator.\nbisector.right - bisectRight, with the given comparator.\nd3.ascending - compute the natural order of two values.\nd3.descending - compute the natural order of two values.\n\n\n\n\nMethods for transforming arrays and for generating new arrays.\n\nd3.cross - compute the Cartesian product of two arrays.\nd3.merge - merge multiple arrays into one array.\nd3.pairs - create an array of adjacent pairs of elements.\nd3.permute - reorder an array of elements according to an array of indexes.\nd3.shuffle - randomize the order of an array.\nd3.ticks - generate representative values from a numeric interval.\nd3.tickIncrement - generate representative values from a numeric interval.\nd3.tickStep - generate representative values from a numeric interval.\nd3.range - generate a range of numeric values.\nd3.transpose - transpose an array of arrays.\nd3.zip - transpose a variable number of arrays.\n\n\n\n\nBin discrete samples into continuous, non-overlapping intervals.\n\nd3.histogram - create a new histogram generator.\nhistogram - compute the histogram for the given array of samples.\nhistogram.value - specify a value accessor for each sample.\nhistogram.domain - specify the interval of observable values.\nhistogram.thresholds - specify how values are divided into bins.\nd3.thresholdFreedmanDiaconis - the Freedman‚ÄìDiaconis binning rule.\nd3.thresholdScott - Scott‚Äôs normal reference binning rule.\nd3.thresholdSturges - Sturges‚Äô binning formula."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#axes-d3-axis",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#axes-d3-axis",
    "title": "D3 API Reference",
    "section": "",
    "text": "Human-readable reference marks for scales.\n\nd3.axisTop - create a new top-oriented axis generator.\nd3.axisRight - create a new right-oriented axis generator.\nd3.axisBottom - create a new bottom-oriented axis generator.\nd3.axisLeft - create a new left-oriented axis generator.\naxis - generate an axis for the given selection.\naxis.scale - set the scale.\naxis.ticks - customize how ticks are generated and formatted.\naxis.tickArguments - customize how ticks are generated and formatted.\naxis.tickValues - set the tick values explicitly.\naxis.tickFormat - set the tick format explicitly.\naxis.tickSize - set the size of the ticks.\naxis.tickSizeInner - set the size of inner ticks.\naxis.tickSizeOuter - set the size of outer (extent) ticks.\naxis.tickPadding - set the padding between ticks and labels."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#brushes-d3-brush",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#brushes-d3-brush",
    "title": "D3 API Reference",
    "section": "",
    "text": "Select a one- or two-dimensional region using the mouse or touch.\n\nd3.brush - create a new two-dimensional brush.\nd3.brushX - create a brush along the x-dimension.\nd3.brushY - create a brush along the y-dimension.\nbrush - apply the brush to a selection.\nbrush.move - move the brush selection.\nbrush.extent - define the brushable region.\nbrush.filter - control which input events initiate brushing.\nbrush.handleSize - set the size of the brush handles.\nbrush.on - listen for brush events.\nd3.brushSelection - get the brush selection for a given node."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#chords-d3-chord",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#chords-d3-chord",
    "title": "D3 API Reference",
    "section": "",
    "text": "d3.chord - create a new chord layout.\nchord - compute the layout for the given matrix.\nchord.padAngle - set the padding between adjacent groups.\nchord.sortGroups - define the group order.\nchord.sortSubgroups - define the source and target order within groups.\nchord.sortChords - define the chord order across groups.\nd3.ribbon - create a ribbon shape generator.\nribbon - generate a ribbon shape.\nribbon.source - set the source accessor.\nribbon.target - set the target accessor.\nribbon.radius - set the ribbon source or target radius.\nribbon.startAngle - set the ribbon source or target start angle.\nribbon.endAngle - set the ribbon source or target end angle.\nribbon.context - set the render context."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#collections-d3-collection",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#collections-d3-collection",
    "title": "D3 API Reference",
    "section": "",
    "text": "Handy data structures for elements keyed by string.\n\n\nMethods for converting associative arrays (objects) to arrays.\n\nd3.keys - list the keys of an associative array.\nd3.values - list the values of an associated array.\nd3.entries - list the key-value entries of an associative array.\n\n\n\n\nLike ES6 Map, but with string keys and a few other differences.\n\nd3.map - create a new, empty map.\nmap.has - returns true if the map contains the given key.\nmap.get - get the value for the given key.\nmap.set - set the value for the given key.\nmap.remove - remove the entry for given key.\nmap.clear - remove all entries.\nmap.keys - get the array of keys.\nmap.values - get the array of values.\nmap.entries - get the array of entries (key-values objects).\nmap.each - call a function for each entry.\nmap.empty - returns false if the map has at least one entry.\nmap.size - compute the number of entries.\n\n\n\n\nLike ES6 Set, but with string keys and a few other differences.\n\nd3.set - create a new, empty set.\nset.has - returns true if the set contains the given value.\nset.add - add the given value.\nset.remove - remove the given value.\nset.clear - remove all values.\nset.values - get the array of values.\nset.each - call a function for each value.\nset.empty - returns true if the set has at least one value.\nset.size - compute the number of values.\n\n\n\n\nGroup data into arbitrary hierarchies.\n\nd3.nest - create a new nest generator.\nnest.key - add a level to the nest hierarchy.\nnest.sortKeys - sort the current nest level by key.\nnest.sortValues - sort the leaf nest level by value.\nnest.rollup - specify a rollup function for leaf values.\nnest.map - generate the nest, returning a map.\nnest.object - generate the nest, returning an associative array.\nnest.entries - generate the nest, returning an array of key-values tuples."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#colors-d3-color",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#colors-d3-color",
    "title": "D3 API Reference",
    "section": "",
    "text": "Color manipulation and color space conversion.\n\nd3.color - parse the given CSS color specifier.\ncolor.rgb - compute the RGB equivalent of this color.\ncolor.brighter - create a brighter copy of this color.\ncolor.darker - create a darker copy of this color.\ncolor.displayable - returns true if the color is displayable on standard hardware.\ncolor.hex - returns the hexadecimal RGB string representation of this color.\ncolor.toString - returns the RGB string representation of this color.\nd3.rgb - create a new RGB color.\nd3.hsl - create a new HSL color.\nd3.lab - create a new Lab color.\nd3.hcl - create a new HCL color.\nd3.lch - create a new HCL color.\nd3.gray - create a new Lab gray.\nd3.cubehelix - create a new Cubehelix color."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#color-schemes-d3-scale-chromatic",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#color-schemes-d3-scale-chromatic",
    "title": "D3 API Reference",
    "section": "",
    "text": "Color ramps and palettes for quantitative, ordinal and categorical scales.\n\n\n\nd3.schemeCategory10 -\nd3.schemeAccent -\nd3.schemeDark2 -\nd3.schemePaired -\nd3.schemePastel1 -\nd3.schemePastel2 -\nd3.schemeSet1 -\nd3.schemeSet2 -\nd3.schemeSet3 -\n\n\n\n\n\nd3.interpolateBrBG -\nd3.interpolatePiYG -\nd3.interpolatePRGn -\nd3.interpolatePuOr -\nd3.interpolateRdBu -\nd3.interpolateRdGy -\nd3.interpolateRdYlBu -\nd3.interpolateRdYlGn -\nd3.interpolateSpectral -\nd3.schemeBrBG -\nd3.schemePiYG -\nd3.schemePRGn -\nd3.schemePuOr -\nd3.schemeRdBu -\nd3.schemeRdGy -\nd3.schemeRdYlBu -\nd3.schemeRdYlGn -\nd3.schemeSpectral -\n\n\n\n\n\nd3.interpolateBlues -\nd3.interpolateGreens -\nd3.interpolateGreys -\nd3.interpolateOranges -\nd3.interpolatePurples -\nd3.interpolateReds -\nd3.schemeBlues -\nd3.schemeGreens -\nd3.schemeGreys -\nd3.schemeOranges -\nd3.schemePurples -\nd3.schemeReds -\n\n\n\n\n\nd3.interpolateBuGn -\nd3.interpolateBuPu -\nd3.interpolateCool -\nd3.interpolateCubehelixDefault -\nd3.interpolateGnBu -\nd3.interpolateInferno -\nd3.interpolateMagma -\nd3.interpolateOrRd -\nd3.interpolatePlasma -\nd3.interpolatePuBu -\nd3.interpolatePuBuGn -\nd3.interpolatePuRd -\nd3.interpolateRdPu -\nd3.interpolateViridis -\nd3.interpolateWarm -\nd3.interpolateYlGn -\nd3.interpolateYlGnBu -\nd3.interpolateYlOrBr -\nd3.interpolateYlOrRd -\nd3.schemeBuGn -\nd3.schemeBuPu -\nd3.schemeGnBu -\nd3.schemeOrRd -\nd3.schemePuBu -\nd3.schemePuBuGn -\nd3.schemePuRd -\nd3.schemeRdPu -\nd3.schemeYlGn -\nd3.schemeYlGnBu -\nd3.schemeYlOrBr -\nd3.schemeYlOrRd -\n\n\n\n\n\nd3.interpolateRainbow - the ‚Äúless-angry‚Äù rainbow\nd3.interpolateSinebow - the ‚Äúsinebow‚Äù smooth rainbow"
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#contours-d3-contour",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#contours-d3-contour",
    "title": "D3 API Reference",
    "section": "",
    "text": "Compute contour polygons using marching squares.\n\nd3.contours - create a new contour generator.\ncontours - compute the contours for a given grid of values.\ncontours.contour -\ncontours.size -\ncontours.smooth -\ncontours.thresholds -\nd3.contourDensity - create a new density estimator.\ndensity - estimate the density of a given array of samples.\ndensity.x -\ndensity.y -\ndensity.size -\ndensity.cellSize -\ndensity.thresholds -\ndensity.bandwidth -\ndensity.weight -"
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#dispatches-d3-dispatch",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#dispatches-d3-dispatch",
    "title": "D3 API Reference",
    "section": "",
    "text": "Separate concerns using named callbacks.\n\nd3.dispatch - create a custom event dispatcher.\ndispatch.on - register or unregister an event listener.\ndispatch.copy - create a copy of a dispatcher.\ndispatch.call - dispatch an event to registered listeners.\ndispatch.apply - dispatch an event to registered listeners."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#dragging-d3-drag",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#dragging-d3-drag",
    "title": "D3 API Reference",
    "section": "",
    "text": "Drag and drop SVG, HTML or Canvas using mouse or touch input.\n\nd3.drag - create a drag behavior.\ndrag - apply the drag behavior to a selection.\ndrag.container - set the coordinate system.\ndrag.filter - ignore some initiating input events.\ndrag.touchable - set the touch support detector.\ndrag.subject - set the thing being dragged.\ndrag.clickDistance - set the click distance threshold.\ndrag.on - listen for drag events.\nevent.on - listen for drag events on the current gesture.\nd3.dragDisable - prevent native drag-and-drop and text selection.\nd3.dragEnable - enable native drag-and-drop and text selection."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#delimiter-separated-values-d3-dsv",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#delimiter-separated-values-d3-dsv",
    "title": "D3 API Reference",
    "section": "",
    "text": "Parse and format delimiter-separated values, most commonly CSV and TSV.\n\nd3.dsvFormat - create a new parser and formatter for the given delimiter.\ndsv.parse - parse the given string, returning an array of objects.\ndsv.parseRows - parse the given string, returning an array of rows.\ndsv.format - format the given array of objects.\ndsv.formatBody - format the given array of objects.\ndsv.formatRows - format the given array of rows.\nd3.autoType - automatically infer value types for the given object.\nd3.csvParse - parse the given CSV string, returning an array of objects.\nd3.csvParseRows - parse the given CSV string, returning an array of rows.\nd3.csvFormat - format the given array of objects as CSV.\nd3.csvFormatBody - format the given array of objects as CSV.\nd3.csvFormatRows - format the given array of rows as CSV.\nd3.tsvParse - parse the given TSV string, returning an array of objects.\nd3.tsvParseRows - parse the given TSV string, returning an array of rows.\nd3.tsvFormat - format the given array of objects as TSV.\nd3.tsvFormatBody - format the given array of objects as TSV.\nd3.tsvFormatRows - format the given array of rows as TSV."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#easings-d3-ease",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#easings-d3-ease",
    "title": "D3 API Reference",
    "section": "",
    "text": "Easing functions for smooth animation.\n\nease - ease the given normalized time.\nd3.easeLinear - linear easing; the identity function.\nd3.easePolyIn - polynomial easing; raises time to the given power.\nd3.easePolyOut - reverse polynomial easing.\nd3.easePolyInOut - symmetric polynomial easing.\npoly.exponent - specify the polynomial exponent.\nd3.easeQuad - an alias for easeQuadInOut.\nd3.easeQuadIn - quadratic easing; squares time.\nd3.easeQuadOut - reverse quadratic easing.\nd3.easeQuadInOut - symmetric quadratic easing.\nd3.easeCubic - an alias for easeCubicInOut.\nd3.easeCubicIn - cubic easing; cubes time.\nd3.easeCubicOut - reverse cubic easing.\nd3.easeCubicInOut - symmetric cubic easing.\nd3.easeSin - an alias for easeSinInOut.\nd3.easeSinIn - sinusoidal easing.\nd3.easeSinOut - reverse sinusoidal easing.\nd3.easeSinInOut - symmetric sinusoidal easing.\nd3.easeExp - an alias for easeExpInOut.\nd3.easeExpIn - exponential easing.\nd3.easeExpOut - reverse exponential easing.\nd3.easeExpInOut - symmetric exponential easing.\nd3.easeCircle - an alias for easeCircleInOut.\nd3.easeCircleIn - circular easing.\nd3.easeCircleOut - reverse circular easing.\nd3.easeCircleInOut - symmetric circular easing.\nd3.easeElastic - an alias for easeElasticOut.\nd3.easeElasticIn - elastic easing, like a rubber band.\nd3.easeElasticOut - reverse elastic easing.\nd3.easeElasticInOut - symmetric elastic easing.\nelastic.amplitude - specify the elastic amplitude.\nelastic.period - specify the elastic period.\nd3.easeBack - an alias for easeBackInOut.\nd3.easeBackIn - anticipatory easing, like a dancer bending his knees before jumping.\nd3.easeBackOut - reverse anticipatory easing.\nd3.easeBackInOut - symmetric anticipatory easing.\nback.overshoot - specify the amount of overshoot.\nd3.easeBounce - an alias for easeBounceOut.\nd3.easeBounceIn - bounce easing, like a rubber ball.\nd3.easeBounceOut - reverse bounce easing.\nd3.easeBounceInOut - symmetric bounce easing."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#fetches-d3-fetch",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#fetches-d3-fetch",
    "title": "D3 API Reference",
    "section": "",
    "text": "Convenience methods on top of the Fetch API.\n\nd3.blob - get a file as a blob.\nd3.buffer - get a file as an array buffer.\nd3.csv - get a comma-separated values (CSV) file.\nd3.dsv - get a delimiter-separated values (CSV) file.\nd3.image - get an image.\nd3.json - get a JSON file.\nd3.text - get a plain text file.\nd3.tsv - get a tab-separated values (TSV) file."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#forces-d3-force",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#forces-d3-force",
    "title": "D3 API Reference",
    "section": "",
    "text": "Force-directed graph layout using velocity Verlet integration.\n\nd3.forceSimulation - create a new force simulation.\nsimulation.restart - reheat and restart the simulation‚Äôs timer.\nsimulation.stop - stop the simulation‚Äôs timer.\nsimulation.tick - advance the simulation one step.\nsimulation.nodes - set the simulation‚Äôs nodes.\nsimulation.alpha - set the current alpha.\nsimulation.alphaMin - set the minimum alpha threshold.\nsimulation.alphaDecay - set the alpha exponential decay rate.\nsimulation.alphaTarget - set the target alpha.\nsimulation.velocityDecay - set the velocity decay rate.\nsimulation.force - add or remove a force.\nsimulation.find - find the closest node to the given position.\nsimulation.on - add or remove an event listener.\nforce - apply the force.\nforce.initialize - initialize the force with the given nodes.\nd3.forceCenter - create a centering force.\ncenter.x - set the center x-coordinate.\ncenter.y - set the center y-coordinate.\nd3.forceCollide - create a circle collision force.\ncollide.radius - set the circle radius.\ncollide.strength - set the collision resolution strength.\ncollide.iterations - set the number of iterations.\nd3.forceLink - create a link force.\nlink.links - set the array of links.\nlink.id - link nodes by numeric index or string identifier.\nlink.distance - set the link distance.\nlink.strength - set the link strength.\nlink.iterations - set the number of iterations.\nd3.forceManyBody - create a many-body force.\nmanyBody.strength - set the force strength.\nmanyBody.theta - set the Barnes‚ÄìHut approximation accuracy.\nmanyBody.distanceMin - limit the force when nodes are close.\nmanyBody.distanceMax - limit the force when nodes are far.\nd3.forceX - create an x-positioning force.\nx.strength - set the force strength.\nx.x - set the target x-coordinate.\nd3.forceY - create an y-positioning force.\ny.strength - set the force strength.\ny.y - set the target y-coordinate.\nd3.forceRadial - create a radial positioning force.\nradial.strength - set the force strength.\nradial.radius - set the target radius.\nradial.x - set the target center x-coordinate.\nradial.y - set the target center y-coordinate."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#number-formats-d3-format",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#number-formats-d3-format",
    "title": "D3 API Reference",
    "section": "",
    "text": "Format numbers for human consumption.\n\nd3.format - alias for locale.format on the default locale.\nd3.formatPrefix - alias for locale.formatPrefix on the default locale.\nd3.formatSpecifier - parse a number format specifier.\nd3.formatLocale - define a custom locale.\nd3.formatDefaultLocale - define the default locale.\nlocale.format - create a number format.\nlocale.formatPrefix - create a SI-prefix number format.\nd3.precisionFixed - compute decimal precision for fixed-point notation.\nd3.precisionPrefix - compute decimal precision for SI-prefix notation.\nd3.precisionRound - compute significant digits for rounded notation."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#geographies-d3-geo",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#geographies-d3-geo",
    "title": "D3 API Reference",
    "section": "",
    "text": "Geographic projections, shapes and math.\n\n\n\nd3.geoPath - create a new geographic path generator.\npath - project and render the specified feature.\npath.area - compute the projected planar area of a given feature.\npath.bounds - compute the projected planar bounding box of a given feature.\npath.centroid - compute the projected planar centroid of a given feature.\npath.measure - compute the projected planar length of a given feature.\npath.projection - set the geographic projection.\npath.context - set the render context.\npath.pointRadius - set the radius to display point features.\n\n\n\n\n\nprojection - project the specified point from the sphere to the plane.\nprojection.invert - unproject the specified point from the plane to the sphere.\nprojection.stream - wrap the specified stream to project geometry.\nprojection.clipAngle - set the radius of the clip circle.\nprojection.clipExtent - set the viewport clip extent, in pixels.\nprojection.angle - set the post-projection rotation.\nprojection.scale - set the scale factor.\nprojection.translate - set the translation offset.\nprojection.fitExtent - set the scale and translate to fit a GeoJSON object.\nprojection.fitSize - set the scale and translate to fit a GeoJSON object.\nprojection.fitWidth - set the scale and translate to fit a GeoJSON object.\nprojection.fitHeight - set the scale and translate to fit a GeoJSON object.\nprojection.center - set the center point.\nprojection.rotate - set the three-axis spherical rotation angles.\nprojection.precision - set the precision threshold for adaptive sampling.\nprojection.preclip - set the spherical clipping stream transform.\nprojection.postclip - set the planar clipping stream transform.\nd3.geoClipAntimeridian - cuts spherical geometries that cross the antimeridian.\nd3.geoClipCircle - clips spherical geometries to a small circle.\nd3.geoClipRectangle - clips planar geometries to a rectangular viewport.\nd3.geoAlbers - the Albers equal-area conic projection.\nd3.geoAlbersUsa - a composite Albers projection for the United States.\nd3.geoAzimuthalEqualArea - the azimuthal equal-area projection.\nd3.geoAzimuthalEquidistant - the azimuthal equidistant projection.\nd3.geoConicConformal - the conic conformal projection.\nd3.geoConicEqualArea - the conic equal-area (Albers) projection.\nd3.geoConicEquidistant - the conic equidistant projection.\nconic.parallels - set the two standard parallels.\nd3.geoEqualEarth - the Equal Earth projection.\nd3.geoEquirectangular - the equirectangular (plate carre√©) projection.\nd3.geoGnomonic - the gnomonic projection.\nd3.geoMercator - the spherical Mercator projection.\nd3.geoOrthographic - the azimuthal orthographic projection.\nd3.geoStereographic - the azimuthal stereographic projection.\nd3.geoTransverseMercator - the transverse spherical Mercator projection.\nproject - project the specified point from the sphere to the plane.\nproject.invert - unproject the specified point from the plane to the sphere.\nd3.geoProjection - create a custom projection.\nd3.geoProjectionMutator - create a custom configurable projection.\nd3.geoAzimuthalEqualAreaRaw - the raw azimuthal equal-area projection.\nd3.geoAzimuthalEquidistantRaw - the raw azimuthal equidistant projection.\nd3.geoConicConformalRaw - the raw conic conformal projection.\nd3.geoConicEqualAreaRaw - the raw conic equal-area (Albers) projection.\nd3.geoConicEquidistantRaw - the raw conic equidistant projection.\nd3.geoEquirectangularRaw - the raw equirectangular (plate carre√©) projection.\nd3.geoGnomonicRaw - the raw gnomonic projection.\nd3.geoMercatorRaw - the raw Mercator projection.\nd3.geoOrthographicRaw - the raw azimuthal orthographic projection.\nd3.geoStereographicRaw - the raw azimuthal stereographic projection.\nd3.geoTransverseMercatorRaw - the raw transverse spherical Mercator projection.\n\n\n\n\n\nd3.geoArea - compute the spherical area of a given feature.\nd3.geoBounds - compute the latitude-longitude bounding box for a given feature.\nd3.geoCentroid - compute the spherical centroid of a given feature.\nd3.geoContains - test whether a point is inside a given feature.\nd3.geoDistance - compute the great-arc distance between two points.\nd3.geoLength - compute the length of a line string or the perimeter of a polygon.\nd3.geoInterpolate - interpolate between two points along a great arc.\nd3.geoRotation - create a rotation function for the specified angles.\nrotation - rotate the given point around the sphere.\nrotation.invert - unrotate the given point around the sphere.\n\n\n\n\n\nd3.geoCircle - create a circle generator.\ncircle - generate a piecewise circle as a Polygon.\ncircle.center - specify the circle center in latitude and longitude.\ncircle.radius - specify the angular radius in degrees.\ncircle.precision - specify the precision of the piecewise circle.\nd3.geoGraticule - create a graticule generator.\ngraticule - generate a MultiLineString of meridians and parallels.\ngraticule.lines - generate an array of LineStrings of meridians and parallels.\ngraticule.outline - generate a Polygon of the graticule‚Äôs extent.\ngraticule.extent - get or set the major & minor extents.\ngraticule.extentMajor - get or set the major extent.\ngraticule.extentMinor - get or set the minor extent.\ngraticule.step - get or set the major & minor step intervals.\ngraticule.stepMajor - get or set the major step intervals.\ngraticule.stepMinor - get or set the minor step intervals.\ngraticule.precision - get or set the latitudinal precision.\nd3.geoGraticule10 - generate the default 10¬∞ global graticule.\n\n\n\n\n\nd3.geoStream - convert a GeoJSON object to a geometry stream.\nstream.point - indicates a point with the specified coordinates.\nstream.lineStart - indicates the start of a line or ring.\nstream.lineEnd - indicates the end of a line or ring.\nstream.polygonStart - indicates the start of a polygon.\nstream.polygonEnd - indicates the end of a polygon.\nstream.sphere - indicates the sphere.\n\n\n\n\n\nd3.geoIdentity - scale, translate or clip planar geometry.\nidentity.reflectX - reflect the x-dimension.\nidentity.reflectY - reflect the y-dimension.\nd3.geoTransform - define a custom geometry transform."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#hierarchies-d3-hierarchy",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#hierarchies-d3-hierarchy",
    "title": "D3 API Reference",
    "section": "",
    "text": "Layout algorithms for visualizing hierarchical data.\n\nd3.hierarchy - constructs a root node from hierarchical data.\nnode.ancestors - generate an array of ancestors.\nnode.descendants - generate an array of descendants.\nnode.leaves - generate an array of leaves.\nnode.path - generate the shortest path to another node.\nnode.links - generate an array of links.\nnode.sum - evaluate and aggregate quantitative values.\nnode.sort - sort all descendant siblings.\nnode.count - count the number of leaves.\nnode.each - breadth-first traversal.\nnode.eachAfter - post-order traversal.\nnode.eachBefore - pre-order traversal.\nnode.copy - copy a hierarchy.\nd3.stratify - create a new stratify operator.\nstratify - construct a root node from tabular data.\nstratify.id - set the node id accessor.\nstratify.parentId - set the parent node id accessor.\nd3.cluster - create a new cluster (dendrogram) layout.\ncluster - layout the specified hierarchy in a dendrogram.\ncluster.size - set the layout size.\ncluster.nodeSize - set the node size.\ncluster.separation - set the separation between leaves.\nd3.tree - create a new tidy tree layout.\ntree - layout the specified hierarchy in a tidy tree.\ntree.size - set the layout size.\ntree.nodeSize - set the node size.\ntree.separation - set the separation between nodes.\nd3.treemap - create a new treemap layout.\ntreemap - layout the specified hierarchy as a treemap.\ntreemap.tile - set the tiling method.\ntreemap.size - set the layout size.\ntreemap.round - set whether the output coordinates are rounded.\ntreemap.padding - set the padding.\ntreemap.paddingInner - set the padding between siblings.\ntreemap.paddingOuter - set the padding between parent and children.\ntreemap.paddingTop - set the padding between the parent‚Äôs top edge and children.\ntreemap.paddingRight - set the padding between the parent‚Äôs right edge and children.\ntreemap.paddingBottom - set the padding between the parent‚Äôs bottom edge and children.\ntreemap.paddingLeft - set the padding between the parent‚Äôs left edge and children.\nd3.treemapBinary - tile using a balanced binary tree.\nd3.treemapDice - tile into a horizontal row.\nd3.treemapSlice - tile into a vertical column.\nd3.treemapSliceDice - alternate between slicing and dicing.\nd3.treemapSquarify - tile using squarified rows per Bruls et. al.\nd3.treemapResquarify - like d3.treemapSquarify, but performs stable updates.\nsquarify.ratio - set the desired rectangle aspect ratio.\nd3.partition - create a new partition (icicle or sunburst) layout.\npartition - layout the specified hierarchy as a partition diagram.\npartition.size - set the layout size.\npartition.round - set whether the output coordinates are rounded.\npartition.padding - set the padding.\nd3.pack - create a new circle-packing layout.\npack - layout the specified hierarchy using circle-packing.\npack.radius - set the radius accessor.\npack.size - set the layout size.\npack.padding - set the padding.\nd3.packSiblings - pack the specified array of circles.\nd3.packEnclose - enclose the specified array of circles."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#interpolators-d3-interpolate",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#interpolators-d3-interpolate",
    "title": "D3 API Reference",
    "section": "",
    "text": "Interpolate numbers, colors, strings, arrays, objects, whatever!\n\nd3.interpolate - interpolate arbitrary values.\nd3.interpolateArray - interpolate arrays of arbitrary values.\nd3.interpolateDate - interpolate dates.\nd3.interpolateNumber - interpolate numbers.\nd3.interpolateObject - interpolate arbitrary objects.\nd3.interpolateRound - interpolate integers.\nd3.interpolateString - interpolate strings with embedded numbers.\nd3.interpolateTransformCss - interpolate 2D CSS transforms.\nd3.interpolateTransformSvg - interpolate 2D SVG transforms.\nd3.interpolateZoom - zoom and pan between two views.\nd3.interpolateRgb - interpolate RGB colors.\nd3.interpolateRgbBasis - generate a B-spline through a set of colors.\nd3.interpolateRgbBasisClosed - generate a closed B-spline through a set of colors.\nd3.interpolateHsl - interpolate HSL colors.\nd3.interpolateHslLong - interpolate HSL colors, the long way.\nd3.interpolateLab - interpolate Lab colors.\nd3.interpolateHcl - interpolate HCL colors.\nd3.interpolateHclLong - interpolate HCL colors, the long way.\nd3.interpolateCubehelix - interpolate Cubehelix colors.\nd3.interpolateCubehelixLong - interpolate Cubehelix colors, the long way.\ninterpolate.gamma - apply gamma correction during interpolation.\nd3.interpolateHue - interpolate a hue angle.\nd3.interpolateDiscrete - generate a discrete interpolator from a set of values.\nd3.interpolateBasis - generate a B-spline through a set of values.\nd3.interpolateBasisClosed - generate a closed B-spline through a set of values.\nd3.piecewise - generate a piecewise linear interpolator from a set of values.\nd3.quantize - generate uniformly-spaced samples from an interpolator."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#paths-d3-path",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#paths-d3-path",
    "title": "D3 API Reference",
    "section": "",
    "text": "Serialize Canvas path commands to SVG.\n\nd3.path - create a new path serializer.\npath.moveTo - move to the given point.\npath.closePath - close the current subpath.\npath.lineTo - draw a straight line segment.\npath.quadraticCurveTo - draw a quadratic B√©zier segment.\npath.bezierCurveTo - draw a cubic B√©zier segment.\npath.arcTo - draw a circular arc segment.\npath.arc - draw a circular arc segment.\npath.rect - draw a rectangle.\npath.toString - serialize to an SVG path data string."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#polygons-d3-polygon",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#polygons-d3-polygon",
    "title": "D3 API Reference",
    "section": "",
    "text": "Geometric operations for two-dimensional polygons.\n\nd3.polygonArea - compute the area of the given polygon.\nd3.polygonCentroid - compute the centroid of the given polygon.\nd3.polygonHull - compute the convex hull of the given points.\nd3.polygonContains - test whether a point is inside a polygon.\nd3.polygonLength - compute the length of the given polygon‚Äôs perimeter."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#quadtrees-d3-quadtree",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#quadtrees-d3-quadtree",
    "title": "D3 API Reference",
    "section": "",
    "text": "Two-dimensional recursive spatial subdivision.\n\nd3.quadtree - create a new, empty quadtree.\nquadtree.x - set the x accessor.\nquadtree.y - set the y accessor.\nquadtree.add - add a datum to a quadtree.\nquadtree.addAll - add an array of data to a quadtree.\nquadtree.remove - remove a datum from a quadtree.\nquadtree.removeAll - remove an array of data from a quadtree.\nquadtree.copy - create a copy of a quadtree.\nquadtree.root - get the quadtree‚Äôs root node.\nquadtree.data - retrieve all data from the quadtree.\nquadtree.size - count the number of data in the quadtree.\nquadtree.find - quickly find the closest datum in a quadtree.\nquadtree.visit - selectively visit nodes in a quadtree.\nquadtree.visitAfter - visit all nodes in a quadtree.\nquadtree.cover - extend the quadtree to cover a point.\nquadtree.extent - extend the quadtree to cover an extent."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#random-numbers-d3-random",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#random-numbers-d3-random",
    "title": "D3 API Reference",
    "section": "",
    "text": "Generate random numbers from various distributions.\n\nd3.randomUniform - from a uniform distribution.\nd3.randomNormal - from a normal distribution.\nd3.randomLogNormal - from a log-normal distribution.\nd3.randomBates - from a Bates distribution.\nd3.randomIrwinHall - from an Irwin‚ÄìHall distribution.\nd3.randomExponential - from an exponential distribution.\nrandom.source - set the source of randomness."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#scales-d3-scale",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#scales-d3-scale",
    "title": "D3 API Reference",
    "section": "",
    "text": "Encodings that map abstract data to visual representation.\n\n\nMap a continuous, quantitative domain to a continuous range.\n\ncontinuous - compute the range value corresponding to a given domain value.\ncontinuous.invert - compute the domain value corresponding to a given range value.\ncontinuous.domain - set the input domain.\ncontinuous.range - set the output range.\ncontinuous.rangeRound - set the output range and enable rounding.\ncontinuous.clamp - enable clamping to the domain or range.\ncontinuous.interpolate - set the output interpolator.\ncontinuous.unknown - set the output value for unknown inputs.\ncontinuous.ticks - compute representative values from the domain.\ncontinuous.tickFormat - format ticks for human consumption.\ncontinuous.nice - extend the domain to nice round numbers.\ncontinuous.copy - create a copy of this scale.\nd3.scaleLinear - create a quantitative linear scale.\nd3.scalePow - create a quantitative power scale.\npow - compute the range value corresponding to a given domain value.\npow.invert - compute the domain value corresponding to a given range value.\npow.exponent - set the power exponent.\npow.domain - set the input domain.\npow.range - set the output range.\npow.rangeRound - set the output range and enable rounding.\npow.clamp - enable clamping to the domain or range.\npow.interpolate - set the output interpolator.\npow.ticks - compute representative values from the domain.\npow.tickFormat - format ticks for human consumption.\npow.nice - extend the domain to nice round numbers.\npow.copy - create a copy of this scale.\nd3.scaleSqrt - create a quantitative power scale with exponent 0.5.\nd3.scaleLog - create a quantitative logarithmic scale.\nlog - compute the range value corresponding to a given domain value.\nlog.invert - compute the domain value corresponding to a given range value.\nlog.base - set the logarithm base.\nlog.domain - set the input domain.\nlog.range - set the output range.\nlog.rangeRound - set the output range and enable rounding.\nlog.clamp - enable clamping to the domain or range.\nlog.interpolate - set the output interpolator.\nlog.ticks - compute representative values from the domain.\nlog.tickFormat - format ticks for human consumption.\nlog.nice - extend the domain to nice round numbers.\nlog.copy - create a copy of this scale.\nd3.scaleSymlog - create a symmetric logarithmic scale.\nd3.scaleIdentity - create a quantitative identity scale.\nd3.scaleTime - create a linear scale for time.\ntime - compute the range value corresponding to a given domain value.\ntime.invert - compute the domain value corresponding to a given range value.\ntime.domain - set the input domain.\ntime.range - set the output range.\ntime.rangeRound - set the output range and enable rounding.\ntime.clamp - enable clamping to the domain or range.\ntime.interpolate - set the output interpolator.\ntime.ticks - compute representative values from the domain.\ntime.tickFormat - format ticks for human consumption.\ntime.nice - extend the domain to nice round times.\ntime.copy - create a copy of this scale.\nd3.scaleUtc - create a linear scale for UTC.\nd3.tickFormat - format ticks for human consumption.\n\n\n\n\nMap a continuous, quantitative domain to a continuous, fixed interpolator.\n\nd3.scaleSequential - create a sequential scale.\nsequential.interpolator - set the scale‚Äôs output interpolator.\nd3.scaleSequentialLog -\nd3.scaleSequentialPow -\nd3.scaleSequentialSqrt -\nd3.scaleSequentialSymlog -\nd3.scaleSequentialQuantile -\n\n\n\n\nMap a continuous, quantitative domain to a continuous, fixed interpolator.\n\nd3.scaleDiverging - create a diverging scale.\ndiverging.interpolator - set the scale‚Äôs output interpolator.\nd3.scaleDivergingLog -\nd3.scaleDivergingPow -\nd3.scaleDivergingSqrt -\nd3.scaleDivergingSymlog -\n\n\n\n\nMap a continuous, quantitative domain to a discrete range.\n\nd3.scaleQuantize - create a uniform quantizing linear scale.\nquantize - compute the range value corresponding to a given domain value.\nquantize.invertExtent - compute the domain values corresponding to a given range value.\nquantize.domain - set the input domain.\nquantize.range - set the output range.\nquantize.nice - extend the domain to nice round numbers.\nquantize.ticks - compute representative values from the domain.\nquantize.tickFormat - format ticks for human consumption.\nquantize.copy - create a copy of this scale.\nd3.scaleQuantile - create a quantile quantizing linear scale.\nquantile - compute the range value corresponding to a given domain value.\nquantile.invertExtent - compute the domain values corresponding to a given range value.\nquantile.domain - set the input domain.\nquantile.range - set the output range.\nquantile.quantiles - get the quantile thresholds.\nquantile.copy - create a copy of this scale.\nd3.scaleThreshold - create an arbitrary quantizing linear scale.\nthreshold - compute the range value corresponding to a given domain value.\nthreshold.invertExtent - compute the domain values corresponding to a given range value.\nthreshold.domain - set the input domain.\nthreshold.range - set the output range.\nthreshold.copy - create a copy of this scale.\n\n\n\n\nMap a discrete domain to a discrete range.\n\nd3.scaleOrdinal - create an ordinal scale.\nordinal - compute the range value corresponding to a given domain value.\nordinal.domain - set the input domain.\nordinal.range - set the output range.\nordinal.unknown - set the output value for unknown inputs.\nordinal.copy - create a copy of this scale.\nd3.scaleImplicit - a special unknown value for implicit domains.\nd3.scaleBand - create an ordinal band scale.\nband - compute the band start corresponding to a given domain value.\nband.domain - set the input domain.\nband.range - set the output range.\nband.rangeRound - set the output range and enable rounding.\nband.round - enable rounding.\nband.paddingInner - set padding between bands.\nband.paddingOuter - set padding outside the first and last bands.\nband.padding - set padding outside and between bands.\nband.align - set band alignment, if there is extra space.\nband.bandwidth - get the width of each band.\nband.step - get the distance between the starts of adjacent bands.\nband.copy - create a copy of this scale.\nd3.scalePoint - create an ordinal point scale.\npoint - compute the point corresponding to a given domain value.\npoint.domain - set the input domain.\npoint.range - set the output range.\npoint.rangeRound - set the output range and enable rounding.\npoint.round - enable rounding.\npoint.padding - set padding outside the first and last point.\npoint.align - set point alignment, if there is extra space.\npoint.bandwidth - returns zero.\npoint.step - get the distance between the starts of adjacent points.\npoint.copy - create a copy of this scale."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#selections-d3-selection",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#selections-d3-selection",
    "title": "D3 API Reference",
    "section": "",
    "text": "Transform the DOM by selecting elements and joining to data.\n\n\n\nd3.selection - select the root document element.\nd3.select - select an element from the document.\nd3.selectAll - select multiple elements from the document.\nselection.select - select a descendant element for each selected element.\nselection.selectAll - select multiple descendants for each selected element.\nselection.filter - filter elements based on data.\nselection.merge - merge this selection with another.\nd3.matcher - test whether an element matches a selector.\nd3.selector - select an element.\nd3.selectorAll - select elements.\nd3.window - get a node‚Äôs owner window.\nd3.style - get a node‚Äôs current style value.\n\n\n\n\n\nselection.attr - get or set an attribute.\nselection.classed - get, add or remove CSS classes.\nselection.style - get or set a style property.\nselection.property - get or set a (raw) property.\nselection.text - get or set the text content.\nselection.html - get or set the inner HTML.\nselection.append - create, append and select new elements.\nselection.insert - create, insert and select new elements.\nselection.remove - remove elements from the document.\nselection.clone - insert clones of selected elements.\nselection.sort - sort elements in the document based on data.\nselection.order - reorders elements in the document to match the selection.\nselection.raise - reorders each element as the last child of its parent.\nselection.lower - reorders each element as the first child of its parent.\nd3.create - create and select a detached element.\nd3.creator - create an element by name.\n\n\n\n\n\nselection.data - bind elements to data.\nselection.join - enter, update or exit elements based on data.\nselection.enter - get the enter selection (data missing elements).\nselection.exit - get the exit selection (elements missing data).\nselection.datum - get or set element data (without joining).\n\n\n\n\n\nselection.on - add or remove event listeners.\nselection.dispatch - dispatch a custom event.\nd3.event - the current user event, during interaction.\nd3.customEvent - temporarily define a custom event.\nd3.mouse - get the mouse position relative to a given container.\nd3.touch - get a touch position relative to a given container.\nd3.touches - get the touch positions relative to a given container.\nd3.clientPoint - get a position relative to a given container.\n\n\n\n\n\nselection.each - call a function for each element.\nselection.call - call a function with this selection.\nselection.empty - returns true if this selection is empty.\nselection.nodes - returns an array of all selected elements.\nselection.node - returns the first (non-null) element.\nselection.size - returns the count of elements.\n\n\n\n\n\nd3.local - declares a new local variable.\nlocal.set - set a local variable‚Äôs value.\nlocal.get - get a local variable‚Äôs value.\nlocal.remove - delete a local variable.\nlocal.toString - get the property identifier of a local variable.\n\n\n\n\n\nd3.namespace - qualify a prefixed XML name, such as ‚Äúxlink:href‚Äù.\nd3.namespaces - the built-in XML namespaces."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#shapes-d3-shape",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#shapes-d3-shape",
    "title": "D3 API Reference",
    "section": "",
    "text": "Graphical primitives for visualization.\n\n\nCircular or annular sectors, as in a pie or donut chart.\n\nd3.arc - create a new arc generator.\narc - generate an arc for the given datum.\narc.centroid - compute an arc‚Äôs midpoint.\narc.innerRadius - set the inner radius.\narc.outerRadius - set the outer radius.\narc.cornerRadius - set the corner radius, for rounded corners.\narc.startAngle - set the start angle.\narc.endAngle - set the end angle.\narc.padAngle - set the angle between adjacent arcs, for padded arcs.\narc.padRadius - set the radius at which to linearize padding.\narc.context - set the rendering context.\n\n\n\n\nCompute the necessary angles to represent a tabular dataset as a pie or donut chart.\n\nd3.pie - create a new pie generator.\npie - compute the arc angles for the given dataset.\npie.value - set the value accessor.\npie.sort - set the sort order comparator.\npie.sortValues - set the sort order comparator.\npie.startAngle - set the overall start angle.\npie.endAngle - set the overall end angle.\npie.padAngle - set the pad angle between adjacent arcs.\n\n\n\n\nA spline or polyline, as in a line chart.\n\nd3.line - create a new line generator.\nline - generate a line for the given dataset.\nline.x - set the x accessor.\nline.y - set the y accessor.\nline.defined - set the defined accessor.\nline.curve - set the curve interpolator.\nline.context - set the rendering context.\nd3.lineRadial - create a new radial line generator.\nlineRadial - generate a line for the given dataset.\nlineRadial.angle - set the angle accessor.\nlineRadial.radius - set the radius accessor.\nlineRadial.defined - set the defined accessor.\nlineRadial.curve - set the curve interpolator.\nlineRadial.context - set the rendering context.\n\n\n\n\nAn area, defined by a bounding topline and baseline, as in an area chart.\n\nd3.area - create a new area generator.\narea - generate an area for the given dataset.\narea.x - set the x0 and x1 accessors.\narea.x0 - set the baseline x accessor.\narea.x1 - set the topline x accessor.\narea.y - set the y0 and y1 accessors.\narea.y0 - set the baseline y accessor.\narea.y1 - set the topline y accessor.\narea.defined - set the defined accessor.\narea.curve - set the curve interpolator.\narea.context - set the rendering context.\narea.lineX0 - derive a line for the left edge of an area.\narea.lineX1 - derive a line for the right edge of an area.\narea.lineY0 - derive a line for the top edge of an area.\narea.lineY1 - derive a line for the bottom edge of an area.\nd3.radialArea - create a new radial area generator.\nradialArea - generate an area for the given dataset.\nradialArea.angle - set the start and end angle accessors.\nradialArea.startAngle - set the start angle accessor.\nradialArea.endAngle - set the end angle accessor.\nradialArea.radius - set the inner and outer radius accessors.\nradialArea.innerRadius - set the inner radius accessor.\nradialArea.outerRadius - set the outer radius accessor.\nradialArea.defined - set the defined accessor.\nradialArea.curve - set the curve interpolator.\nradialArea.context - set the rendering context.\nradialArea.lineStartAngle - derive a line for the start edge of an area.\nradialArea.lineEndAngle - derive a line for the end edge of an area.\nradialArea.lineInnerRadius - derive a line for the inner edge of an area.\nradialArea.lineOuterRadius - derive a line for the outer edge of an area.\n\n\n\n\nInterpolate between points to produce a continuous shape.\n\nd3.curveBasis - a cubic basis spline, repeating the end points.\nd3.curveBasisClosed - a closed cubic basis spline.\nd3.curveBasisOpen - a cubic basis spline.\nd3.curveBundle - a straightened cubic basis spline.\nbundle.beta - set the bundle tension beta.\nd3.curveCardinal - a cubic cardinal spline, with one-sided difference at each end.\nd3.curveCardinalClosed - a closed cubic cardinal spline.\nd3.curveCardinalOpen - a cubic cardinal spline.\ncardinal.tension - set the cardinal spline tension.\nd3.curveCatmullRom - a cubic Catmull‚ÄìRom spline, with one-sided difference at each end.\nd3.curveCatmullRomClosed - a closed cubic Catmull‚ÄìRom spline.\nd3.curveCatmullRomOpen - a cubic Catmull‚ÄìRom spline.\ncatmullRom.alpha - set the Catmull‚ÄìRom parameter alpha.\nd3.curveLinear - a polyline.\nd3.curveLinearClosed - a closed polyline.\nd3.curveMonotoneX - a cubic spline that, given monotonicity in x, preserves it in y.\nd3.curveMonotoneY - a cubic spline that, given monotonicity in y, preserves it in x.\nd3.curveNatural - a natural cubic spline.\nd3.curveStep - a piecewise constant function.\nd3.curveStepAfter - a piecewise constant function.\nd3.curveStepBefore - a piecewise constant function.\ncurve.areaStart - start a new area segment.\ncurve.areaEnd - end the current area segment.\ncurve.lineStart - start a new line segment.\ncurve.lineEnd - end the current line segment.\ncurve.point - add a point to the current line segment.\n\n\n\n\nA smooth cubic B√©zier curve from a source to a target.\n\nd3.linkVertical - create a new vertical link generator.\nd3.linkHorizontal - create a new horizontal link generator.\nlink - generate a link.\nlink.source - set the source accessor.\nlink.target - set the target accessor.\nlink.x - set the point x-accessor.\nlink.y - set the point y-accessor.\nlink.context - set the rendering context.\nd3.linkRadial - create a new radial link generator.\nradialLink.angle - set the point angle accessor.\nradialLink.radius - set the point radius accessor.\n\n\n\n\nA categorical shape encoding, as in a scatterplot.\n\nd3.symbol - create a new symbol generator.\nsymbol - generate a symbol for the given datum.\nsymbol.type - set the symbol type.\nsymbol.size - set the size of the symbol in square pixels.\nsymbol.context - set the rendering context.\nd3.symbols - the array of built-in symbol types.\nd3.symbolCircle - a circle.\nd3.symbolCross - a Greek cross with arms of equal length.\nd3.symbolDiamond - a rhombus.\nd3.symbolSquare - a square.\nd3.symbolStar - a pentagonal star (pentagram).\nd3.symbolTriangle - an up-pointing triangle.\nd3.symbolWye - a Y shape.\nd3.pointRadial -\nsymbolType.draw - draw this symbol to the given context.\n\n\n\n\nStack shapes, placing one adjacent to another, as in a stacked bar chart.\n\nd3.stack - create a new stack generator.\nstack - generate a stack for the given dataset.\nstack.keys - set the keys accessor.\nstack.value - set the value accessor.\nstack.order - set the order accessor.\nstack.offset - set the offset accessor.\nd3.stackOrderAppearance - put the earliest series on bottom.\nd3.stackOrderAscending - put the smallest series on bottom.\nd3.stackOrderDescending - put the largest series on bottom.\nd3.stackOrderInsideOut - put earlier series in the middle.\nd3.stackOrderNone - use the given series order.\nd3.stackOrderReverse - use the reverse of the given series order.\nd3.stackOffsetExpand - normalize the baseline to zero and topline to one.\nd3.stackOffsetDiverging - positive above zero; negative below zero.\nd3.stackOffsetNone - apply a zero baseline.\nd3.stackOffsetSilhouette - center the streamgraph around zero.\nd3.stackOffsetWiggle - minimize streamgraph wiggling."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#time-formats-d3-time-format",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#time-formats-d3-time-format",
    "title": "D3 API Reference",
    "section": "",
    "text": "Parse and format times, inspired by strptime and strftime.\n\nd3.timeFormat - alias for locale.format on the default locale.\nd3.timeParse - alias for locale.parse on the default locale.\nd3.utcFormat - alias for locale.utcFormat on the default locale.\nd3.utcParse - alias for locale.utcParse on the default locale.\nd3.isoFormat - an ISO 8601 UTC formatter.\nd3.isoParse - an ISO 8601 UTC parser.\nd3.timeFormatLocale - define a custom locale.\nd3.timeFormatDefaultLocale - define the default locale.\nlocale.format - create a time formatter.\nlocale.parse - create a time parser.\nlocale.utcFormat - create a UTC formatter.\nlocale.utcParse - create a UTC parser."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#time-intervals-d3-time",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#time-intervals-d3-time",
    "title": "D3 API Reference",
    "section": "",
    "text": "A calculator for humanity‚Äôs peculiar conventions of time.\n\nd3.timeInterval - implement a new custom time interval.\ninterval - alias for interval.floor.\ninterval.floor - round down to the nearest boundary.\ninterval.round - round to the nearest boundary.\ninterval.ceil - round up to the nearest boundary.\ninterval.offset - offset a date by some number of intervals.\ninterval.range - generate a range of dates at interval boundaries.\ninterval.filter - create a filtered subset of this interval.\ninterval.every - create a filtered subset of this interval.\ninterval.count - count interval boundaries between two dates.\nd3.timeMillisecond, d3.utcMillisecond - the millisecond interval.\nd3.timeMilliseconds, d3.utcMilliseconds - aliases for millisecond.range.\nd3.timeSecond, d3.utcSecond - the second interval.\nd3.timeSeconds, d3.utcSeconds - aliases for second.range.\nd3.timeMinute, d3.utcMinute - the minute interval.\nd3.timeMinutes, d3.utcMinutes - aliases for minute.range.\nd3.timeHour, d3.utcHour - the hour interval.\nd3.timeHours, d3.utcHours - aliases for hour.range.\nd3.timeDay, d3.utcDay - the day interval.\nd3.timeDays, d3.utcDays - aliases for day.range.\nd3.timeWeek, d3.utcWeek - aliases for sunday.\nd3.timeWeeks, d3.utcWeeks - aliases for week.range.\nd3.timeSunday, d3.utcSunday - the week interval, starting on Sunday.\nd3.timeSundays, d3.utcSundays - aliases for sunday.range.\nd3.timeMonday, d3.utcMonday - the week interval, starting on Monday.\nd3.timeMondays, d3.utcMondays - aliases for monday.range.\nd3.timeTuesday, d3.utcTuesday - the week interval, starting on Tuesday.\nd3.timeTuesdays, d3.utcTuesdays - aliases for tuesday.range.\nd3.timeWednesday, d3.utcWednesday - the week interval, starting on Wednesday.\nd3.timeWednesdays, d3.utcWednesdays - aliases for wednesday.range.\nd3.timeThursday, d3.utcThursday - the week interval, starting on Thursday.\nd3.timeThursdays, d3.utcThursdays - aliases for thursday.range.\nd3.timeFriday, d3.utcFriday - the week interval, starting on Friday.\nd3.timeFridays, d3.utcFridays - aliases for friday.range.\nd3.timeSaturday, d3.utcSaturday - the week interval, starting on Saturday.\nd3.timeSaturdays, d3.utcSaturdays - aliases for saturday.range.\nd3.timeMonth, d3.utcMonth - the month interval.\nd3.timeMonths, d3.utcMonths - aliases for month.range.\nd3.timeYear, d3.utcYear - the year interval.\nd3.timeYears, d3.utcYears - aliases for year.range."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#timers-d3-timer",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#timers-d3-timer",
    "title": "D3 API Reference",
    "section": "",
    "text": "An efficient queue for managing thousands of concurrent animations.\n\nd3.now - get the current high-resolution time.\nd3.timer - schedule a new timer.\ntimer.restart - reset the timer‚Äôs start time and callback.\ntimer.stop - stop the timer.\nd3.timerFlush - immediately execute any eligible timers.\nd3.timeout - schedule a timer that stops on its first callback.\nd3.interval - schedule a timer that is called with a configurable period."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#transitions-d3-transition",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#transitions-d3-transition",
    "title": "D3 API Reference",
    "section": "",
    "text": "Animated transitions for selections.\n\nselection.transition - schedule a transition for the selected elements.\nselection.interrupt - interrupt and cancel transitions on the selected elements.\nd3.transition - schedule a transition on the root document element.\ntransition.select - schedule a transition on the selected elements.\ntransition.selectAll - schedule a transition on the selected elements.\ntransition.filter - filter elements based on data.\ntransition.merge - merge this transition with another.\ntransition.selection - returns a selection for this transition.\ntransition.transition - schedule a new transition following this one.\ntransition.call - call a function with this transition.\ntransition.nodes - returns an array of all selected elements.\ntransition.node - returns the first (non-null) element.\ntransition.size - returns the count of elements.\ntransition.empty - returns true if this transition is empty.\ntransition.each - call a function for each element.\ntransition.on - add or remove transition event listeners.\ntransition.end - await the end of a transition.\ntransition.attr - tween the given attribute using the default interpolator.\ntransition.attrTween - tween the given attribute using a custom interpolator.\ntransition.style - tween the given style property using the default interpolator.\ntransition.styleTween - tween the given style property using a custom interpolator.\ntransition.text - set the text content when the transition starts.\ntransition.remove - remove the selected elements when the transition ends.\ntransition.tween - run custom code during the transition.\ntransition.delay - specify per-element delay in milliseconds.\ntransition.duration - specify per-element duration in milliseconds.\ntransition.ease - specify the easing function.\nd3.active - select the active transition for a given node.\nd3.interrupt - interrupt the active transition for a given node."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#voronoi-diagrams-d3-voronoi",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#voronoi-diagrams-d3-voronoi",
    "title": "D3 API Reference",
    "section": "",
    "text": "Compute the Voronoi diagram of a given set of points.\n\nd3.voronoi - create a new Voronoi generator.\nvoronoi - generate a new Voronoi diagram for the given points.\nvoronoi.polygons - compute the Voronoi polygons for the given points.\nvoronoi.triangles - compute the Delaunay triangles for the given points.\nvoronoi.links - compute the Delaunay links for the given points.\nvoronoi.x - set the x accessor.\nvoronoi.y - set the y accessor.\nvoronoi.extent - set the observed extent of points.\nvoronoi.size - set the observed extent of points.\ndiagram.polygons - compute the polygons for this Voronoi diagram.\ndiagram.triangles - compute the triangles for this Voronoi diagram.\ndiagram.links - compute the links for this Voronoi diagram.\ndiagram.find - find the closest point in this Voronoi diagram."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/API.html#zooming-d3-zoom",
    "href": "docs/site_libs/d3v5-5.9.2/API.html#zooming-d3-zoom",
    "title": "D3 API Reference",
    "section": "",
    "text": "Pan and zoom SVG, HTML or Canvas using mouse or touch input.\n\nd3.zoom - create a zoom behavior.\nzoom - apply the zoom behavior to the selected elements.\nzoom.transform - change the transform for the selected elements.\nzoom.translateTo - translate the transform for the selected elements.\nzoom.translateBy - translate the transform for the selected elements.\nzoom.scaleBy - scale the transform for the selected elements.\nzoom.scaleTo - scale the transform for the selected elements.\nzoom.filter - control which input events initiate zooming.\nzoom.touchable - set the touch support detector.\nzoom.wheelDelta - override scaling for wheel events.\nzoom.clickDistance - set the click distance threshold.\nzoom.extent - set the extent of the viewport.\nzoom.scaleExtent - set the allowed scale range.\nzoom.translateExtent - set the extent of the zoomable world.\nzoom.constrain - override the transform constraint logic.\nzoom.duration - set the duration of zoom transitions.\nzoom.interpolate - control the interpolation of zoom transitions.\nzoom.on - listen for zoom events.\nd3.zoomTransform - get the zoom transform for a given element.\ntransform.scale - scale a transform by the specified amount.\ntransform.translate - translate a transform by the specified amount.\ntransform.apply - apply the transform to the given point.\ntransform.applyX - apply the transform to the given x-coordinate.\ntransform.applyY - apply the transform to the given y-coordinate.\ntransform.invert - unapply the transform to the given point.\ntransform.invertX - unapply the transform to the given x-coordinate.\ntransform.invertY - unapply the transform to the given y-coordinate.\ntransform.rescaleX - apply the transform to an x-scale‚Äôs domain.\ntransform.rescaleY - apply the transform to a y-scale‚Äôs domain.\ntransform.toString - format the transform as an SVG transform string.\nd3.zoomIdentity - the identity transform."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html",
    "href": "docs/site_libs/d3v6-6.2.0/API.html",
    "title": "D3 API Reference",
    "section": "",
    "text": "D3 is a collection of modules that are designed to work together; you can use the modules independently, or you can use them together as part of the default build. The source and documentation for each module is available in its repository. Follow the links below to learn more. For changes between major versions, see CHANGES; see also the release notes and the 3.x reference.\n\nArrays (Statistics, Search, Iterables, Sets, Transformations, Histograms)\nAxes\nBrushes\nChords\nColors\nColor Schemes\nContours\nVoronoi Diagrams\nDispatches\nDragging\nDelimiter-Separated Values\nEasings\nFetches\nForces\nNumber Formats\nGeographies (Paths, Projections, Spherical Math, Spherical Shapes, Streams, Transforms)\nHierarchies\nInterpolators\nPaths\nPolygons\nQuadtrees\nRandom Numbers\nScales (Continuous, Sequential, Diverging, Quantize, Ordinal)\nSelections (Selecting, Modifying, Data, Events, Control, Local Variables, Namespaces)\nShapes (Arcs, Pies, Lines, Areas, Curves, Links, Symbols, Stacks)\nTime Formats\nTime Intervals\nTimers\nTransitions\nZooming\n\nD3 uses semantic versioning. The current version is exposed as d3.version.\n\n\nArray manipulation, ordering, searching, summarizing, etc.\n\n\nMethods for computing basic summary statistics.\n\nd3.min - compute the minimum value in an iterable.\nd3.minIndex - compute the index of the minimum value in an iterable.\nd3.max - compute the maximum value in an iterable.\nd3.maxIndex - compute the index of the maximum value in an iterable.\nd3.extent - compute the minimum and maximum value in an iterable.\nd3.sum - compute the sum of an iterable of numbers.\nd3.mean - compute the arithmetic mean of an iterable of numbers.\nd3.median - compute the median of an iterable of numbers (the 0.5-quantile).\nd3.cumsum - comute the cumulative sum of an iterable.\nd3.quantile - compute a quantile for an iterable of numbers.\nd3.quantileSorted - compute a quantile for a sorted array of numbers.\nd3.variance - compute the variance of an iterable of numbers.\nd3.deviation - compute the standard deviation of an iterable of numbers.\nd3.fsum - compute a full precision summation of an iterable of numbers.\nnew d3.Adder - creates a full precision adder.\nadder.add - add a value to an adder.\nadder.valueOf - returns a double precision representation of an adder‚Äôs value.\n\n\n\n\nMethods for searching arrays for a specific element.\n\nd3.least - returns the least element of an iterable.\nd3.leastIndex - returns the index of the least element of an iterable.\nd3.greatest - returns the greatest element of an iterable.\nd3.greatestIndex - returns the index of the greatest element of an iterable.\nd3.bisectCenter - binary search for a value in a sorted array.\nd3.bisectLeft - binary search for a value in a sorted array.\nd3.bisect - binary search for a value in a sorted array.\nd3.bisectRight - binary search for a value in a sorted array.\nd3.bisector - bisect using an accessor or comparator.\nbisector.center - binary search for a value in a sorted array.\nbisector.left - bisectLeft, with the given comparator.\nbisector.right - bisectRight, with the given comparator.\nd3.quickselect - reorder an array of numbers.\nd3.ascending - compute the natural order of two values.\nd3.descending - compute the natural order of two values.\n\n\n\n\nMethods for transforming arrays and for generating new arrays.\n\nd3.group - group an iterable into a nested Map.\nd3.groups - group an iterable into a nested array.\nd3.index - index an iterable into a nested Map.\nd3.indexes - index an iterable into a nested array.\nd3.rollup - reduce an iterable into a nested Map.\nd3.rollups - reduce an iterable into a nested array.\nd3.count - count valid number values in an iterable.\nd3.cross - compute the Cartesian product of two iterables.\nd3.merge - merge multiple iterables into one array.\nd3.pairs - create an array of adjacent pairs of elements.\nd3.permute - reorder an iterable of elements according to an iterable of indexes.\nd3.shuffle - randomize the order of an iterable.\nd3.shuffler - randomize the order of an iterable.\nd3.ticks - generate representative values from a numeric interval.\nd3.tickIncrement - generate representative values from a numeric interval.\nd3.tickStep - generate representative values from a numeric interval.\nd3.nice - extend an interval to align with ticks.\nd3.range - generate a range of numeric values.\nd3.transpose - transpose an array of arrays.\nd3.zip - transpose a variable number of arrays.\n\n\n\n\n\nd3.every - test if all values satisfy a condition.\nd3.some - test if any value satisfies a condition.\nd3.filter - filter values.\nd3.map - map values.\nd3.reduce - reduce values.\nd3.reverse - reverse the order of values.\nd3.sort - sort values.\n\n\n\n\n\nd3.difference - compute a set difference.\nd3.disjoint - test whether two sets are disjoint.\nd3.intersection - compute a set intersection.\nd3.superset - test whether a set is a superset of another.\nd3.subset - test whether a set is a subset of another.\nd3.union - compute a set union.\n\n\n\n\nBin discrete samples into continuous, non-overlapping intervals.\n\nd3.bin - create a new bin generator.\nbin - bins a given array of samples.\nbin.value- specify a value accessor for each sample.\nbin.domain - specify the interval of observable values.\nbin.thresholds - specify how values are divided into bins.\nd3.thresholdFreedmanDiaconis - the Freedman‚ÄìDiaconis binning rule.\nd3.thresholdScott - Scott‚Äôs normal reference binning rule.\nd3.thresholdSturges - Sturges‚Äô binning formula.\n\n\n\n\n\nHuman-readable reference marks for scales.\n\nd3.axisTop - create a new top-oriented axis generator.\nd3.axisRight - create a new right-oriented axis generator.\nd3.axisBottom - create a new bottom-oriented axis generator.\nd3.axisLeft - create a new left-oriented axis generator.\naxis - generate an axis for the given selection.\naxis.scale - set the scale.\naxis.ticks - customize how ticks are generated and formatted.\naxis.tickArguments - customize how ticks are generated and formatted.\naxis.tickValues - set the tick values explicitly.\naxis.tickFormat - set the tick format explicitly.\naxis.tickSize - set the size of the ticks.\naxis.tickSizeInner - set the size of inner ticks.\naxis.tickSizeOuter - set the size of outer (extent) ticks.\naxis.tickPadding - set the padding between ticks and labels.\n\n\n\n\nSelect a one- or two-dimensional region using the mouse or touch.\n\nd3.brush - create a new two-dimensional brush.\nd3.brushX - create a brush along the x-dimension.\nd3.brushY - create a brush along the y-dimension.\nbrush - apply the brush to a selection.\nbrush.move - move the brush selection.\nbrush.clear - clear the brush selection.\nbrush.extent - define the brushable region.\nbrush.filter - control which input events initiate brushing.\nbrush.touchable - set the touch support detector.\nbrush.keyModifiers - enable or disable key interaction.\nbrush.handleSize - set the size of the brush handles.\nbrush.on - listen for brush events.\nd3.brushSelection - get the brush selection for a given node.\n\n\n\n\n\nd3.chord - create a new chord layout.\nchord - compute the layout for the given matrix.\nchord.padAngle - set the padding between adjacent groups.\nchord.sortGroups - define the group order.\nchord.sortSubgroups - define the source and target order within groups.\nchord.sortChords - define the chord order across groups.\nd3.chordDirected - create a directed chord generator.\nd3.chordTranspose - create a transposed chord generator.\nd3.ribbon - create a ribbon shape generator.\nribbon - generate a ribbon shape.\nribbon.source - set the source accessor.\nribbon.target - set the target accessor.\nribbon.radius - set the ribbon source and target radius.\nribbon.sourceRadius - set the ribbon source radius.\nribbon.targetRadius - set the ribbon target radius.\nribbon.startAngle - set the ribbon source or target start angle.\nribbon.endAngle - set the ribbon source or target end angle.\nribbon.padAngle - set the pad angle accessor.\nribbon.context - set the render context.\nd3.ribbonArrow - create an arrow ribbon generator.\nribbonArrow.headRadius - set the arrowhead radius accessor.\n\n\n\n\nColor manipulation and color space conversion.\n\nd3.color - parse the given CSS color specifier.\ncolor.opacity - the color‚Äôs opacity.\ncolor.rgb - compute the RGB equivalent of this color.\ncolor.copy - return a copy of this color.\ncolor.brighter - create a brighter copy of this color.\ncolor.darker - create a darker copy of this color.\ncolor.displayable - returns true if the color is displayable on standard hardware.\ncolor.formatHex - returns the hexadecimal RGB string representation of this color.\ncolor.formatHsl - returns the RGB string representation of this color.\ncolor.formatRgb - returns the HSL string representation of this color.\ncolor.toString - returns the RGB string representation of this color.\nd3.rgb - create a new RGB color.\nd3.hsl - create a new HSL color.\nd3.lab - create a new Lab color.\nd3.gray - create a new Lab gray.\nd3.hcl - create a new HCL color.\nd3.lch - create a new HCL color.\nd3.cubehelix - create a new Cubehelix color.\n\n\n\n\nColor ramps and palettes for quantitative, ordinal and categorical scales.\n\n\n\nd3.schemeCategory10 - an array of ten categorical colors.\nd3.schemeAccent - an array of eight categorical colors.\nd3.schemeDark2 - an array of eight categorical colors.\nd3.schemePaired - an array of twelve categorical colors.\nd3.schemePastel1 - an array of nine categorical colors.\nd3.schemePastel2 - an array of eight categorical colors.\nd3.schemeSet1 - an array of nine categorical colors.\nd3.schemeSet2 - an array of eight categorical colors.\nd3.schemeSet3 - an array of twelve categorical colors.\nd3.schemeTableau10 - an array of ten categorical colors.\n\n\n\n\n\nd3.interpolateBrBG - ColorBrewer BrBG interpolator.\nd3.interpolatePiYG - ColorBrewer PiYG interpolator.\nd3.interpolatePRGn - ColorBrewer PRGn interpolator.\nd3.interpolatePuOr - ColorBrewer PuOr interpolator.\nd3.interpolateRdBu - ColorBrewer RdBu interpolator.\nd3.interpolateRdGy - ColorBrewer RdGy interpolator.\nd3.interpolateRdYlBu - ColorBrewer RdYlBu interpolator.\nd3.interpolateRdYlGn - ColorBrewer RdYlGn interpolator.\nd3.interpolateSpectral - ColorBrewer spectral interpolator.\nd3.schemeBrBG - ColorBrewer BrBG scheme.\nd3.schemePiYG - ColorBrewer PiYG scheme.\nd3.schemePRGn - ColorBrewer PRGn scheme.\nd3.schemePuOr - ColorBrewer PuOr scheme.\nd3.schemeRdBu - ColorBrewer RdBu scheme.\nd3.schemeRdGy - ColorBrewer RdGy scheme.\nd3.schemeRdYlBu - ColorBrewer RdYlBu scheme.\nd3.schemeRdYlGn - ColorBrewer RdYlGn scheme.\nd3.schemeSpectral - ColorBrewer spectral scheme.\n\n\n\n\n\nd3.interpolateBlues -\nd3.interpolateGreens -\nd3.interpolateGreys -\nd3.interpolateOranges -\nd3.interpolatePurples -\nd3.interpolateReds -\nd3.schemeBlues -\nd3.schemeGreens -\nd3.schemeGreys -\nd3.schemeOranges -\nd3.schemePurples -\nd3.schemeReds -\n\n\n\n\n\nd3.interpolateBuGn - ColorBrewer BuGn interpolator.\nd3.interpolateBuPu - ColorBrewer BuPu interpolator.\nd3.interpolateCividis - cividis interpolator.\nd3.interpolateCool - cool interpolator.\nd3.interpolateCubehelixDefault - cubehelix interpolator.\nd3.interpolateGnBu - ColorBrewer GnBu interpolator.\nd3.interpolateInferno - inferno interpolator.\nd3.interpolateMagma - magma interpolator.\nd3.interpolateOrRd - ColorBrewer OrRd interpolator.\nd3.interpolatePlasma - plasma interpolator.\nd3.interpolatePuBu - ColorBrewer PuBu interpolator.\nd3.interpolatePuBuGn - ColorBrewer PuBuGn interpolator.\nd3.interpolatePuRd - ColorBrewer PuRd interpolator.\nd3.interpolateRdPu - ColorBrewer RdPu interpolator.\nd3.interpolateTurbo - turbo interpolator.\nd3.interpolateViridis - viridis interpolator.\nd3.interpolateWarm - warm interpolator.\nd3.interpolateYlGn - ColorBrewer YlGn interpolator.\nd3.interpolateYlGnBu - ColorBrewer YlGnBu interpolator.\nd3.interpolateYlOrBr - ColorBrewer YlOrBr interpolator.\nd3.interpolateYlOrRd - ColorBrewer YlOrRd interpolator.\nd3.schemeBuGn - ColorBrewer BuGn scheme.\nd3.schemeBuPu - ColorBrewer BuPu scheme.\nd3.schemeGnBu - ColorBrewer GnBu scheme.\nd3.schemeOrRd - ColorBrewer OrRd scheme.\nd3.schemePuBu - ColorBrewer PuBu scheme.\nd3.schemePuBuGn - ColorBrewer PuBuGn scheme.\nd3.schemePuRd - ColorBrewer PuRd scheme.\nd3.schemeRdPu - ColorBrewer RdPu scheme.\nd3.schemeYlGn - ColorBrewer YlGn scheme.\nd3.schemeYlGnBu - ColorBrewer YlGnBu scheme.\nd3.schemeYlOrBr - ColorBrewer YlOrBr scheme.\nd3.schemeYlOrRd - ColorBrewer YlOrRd scheme.\n\n\n\n\n\nd3.interpolateRainbow - the ‚Äúless-angry‚Äù rainbow\nd3.interpolateSinebow - the ‚Äúsinebow‚Äù smooth rainbow\n\n\n\n\n\nCompute contour polygons using marching squares.\n\nd3.contours - create a new contour generator.\ncontours - compute the contours for a given grid of values.\ncontours.contour - compute a contour for a given value.\ncontours.size - set the size of a contour generator.\ncontours.smooth - set whether or not the generated contours are smoothed.\ncontours.thresholds - set the thresholds of a contour generator.\nd3.contourDensity - create a new density estimator.\ndensity - estimate the density of a given array of samples.\ndensity.x - set the x accessor of the density estimator.\ndensity.y - set the y accessor of the density estimator.\ndensity.weight - set the weight accessor of the density estimator.\ndensity.size - set the size of the density estimator.\ndensity.cellSize - set the cell size of the density estimator.\ndensity.thresholds - set the thresholds of the density estimator.\ndensity.bandwidth - set the bandwidth of the density estimator.\n\n\n\n\nCompute the Voronoi diagram of a set of two-dimensional points.\n\nnew Delaunay - create a delaunay triangulation for an array of point coordinates.\nDelaunay.from - create a delaunay triangulation for an iterable of points.\ndelaunay.points - the coordinates of the points.\ndelaunay.halfedges - the delaunay halfedges.\ndelaunay.hull - the convex hull as point indices.\ndelaunay.triangles - the delaunay triangles.\ndelaunay.inedges - the delaunay inedges\ndelaunay.find - find the closest point in the delaunay triangulation.\ndelaunay.neighbors - the neighbors of a point in the delaunay triangulation.\ndelaunay.render - render the edges of the delaunay triangulation.\ndelaunay.renderHull - render the convex hull.\ndelaunay.renderTriangle - render a triangle.\ndelaunay.renderPoints - render the points.\ndelaunay.hullPolygon - the closed convex hull as point coordinates.\ndelaunay.trianglePolygons - iterate over all the triangles as polygons.\ndelaunay.trianglePolygon - return a triangle as a polygon.\ndelaunay.update - update a delaunay triangulation in place.\ndelaunay.voronoi - compute the voronoi diagram associated with a delaunay triangulation.\nvoronoi.delaunay - the voronoi diagram‚Äôs source delaunay triangulation.\nvoronoi.circumcenters - the triangles‚Äô circumcenters.\nvoronoi.vectors - directions for the outer (infinite) cells of the voronoi diagram.\nvoronoi.xmin - set the xmin bound of the extent.\nvoronoi.ymin - set the ymin bound of the extent.\nvoronoi.xmax - set the xmax bound of the extent.\nvoronoi.ymax - set the ymax bound of the extent.\nvoronoi.contains - test whether a point is inside a voronoi cell.\nvoronoi.neighbors - the neighbors of a point in the voronoi diagram.\nvoronoi.render - render the mesh of voronoi cells.\nvoronoi.renderBounds - render the extent.\nvoronoi.renderCell - render a voronoi cell.\nvoronoi.cellPolygons - iterate over all the cells as polygons.\nvoronoi.cellPolygon - return a cell as a polygon.\nvoronoi.update - update a voronoi diagram in place.\n\n\n\n\nSeparate concerns using named callbacks.\n\nd3.dispatch - create a custom event dispatcher.\ndispatch.on - register or unregister an event listener.\ndispatch.copy - create a copy of a dispatcher.\ndispatch.call - dispatch an event to registered listeners.\ndispatch.apply - dispatch an event to registered listeners.\n\n\n\n\nDrag and drop SVG, HTML or Canvas using mouse or touch input.\n\nd3.drag - create a drag behavior.\ndrag - apply the drag behavior to a selection.\ndrag.container - set the coordinate system.\ndrag.filter - ignore some initiating input events.\ndrag.touchable - set the touch support detector.\ndrag.subject - set the thing being dragged.\ndrag.clickDistance - set the click distance threshold.\ndrag.on - listen for drag events.\nd3.dragDisable - prevent native drag-and-drop and text selection.\nd3.dragEnable - enable native drag-and-drop and text selection.\nevent.on - listen for drag events on the current gesture.\n\n\n\n\nParse and format delimiter-separated values, most commonly CSV and TSV.\n\nd3.csvParse - parse the given CSV string, returning an array of objects.\nd3.csvParseRows - parse the given CSV string, returning an array of rows.\nd3.csvFormat - format the given array of objects as CSV.\nd3.csvFormatBody - format the given array of objects as CSV.\nd3.csvFormatRows - format the given array of rows as CSV.\nd3.csvFormatRow - format the given row as CSV.\nd3.csvFormatValue - format the given value as CSV.\nd3.tsvParse - parse the given TSV string, returning an array of objects.\nd3.tsvParseRows - parse the given TSV string, returning an array of rows.\nd3.tsvFormat - format the given array of objects as TSV.\nd3.tsvFormatBody - format the given array of objects as TSV.\nd3.tsvFormatRows - format the given array of rows as TSV.\nd3.tsvFormatRow - format the given row as TSV.\nd3.tsvFormatValue - format the given value as TSV.\nd3.dsvFormat - create a new parser and formatter for the given delimiter.\ndsv.parse - parse the given string, returning an array of objects.\ndsv.parseRows - parse the given string, returning an array of rows.\ndsv.format - format the given array of objects.\ndsv.formatBody - format the given array of objects.\ndsv.formatRows - format the given array of rows.\ndsv.formatRow - format the given row.\ndsv.formatValue - format the given value.\nd3.autoType - automatically infer value types for the given object.\n\n\n\n\nEasing functions for smooth animation.\n\nease - ease the given normalized time.\nd3.easeLinear - linear easing; the identity function.\nd3.easePolyIn - polynomial easing; raises time to the given power.\nd3.easePolyOut - reverse polynomial easing.\nd3.easePoly - an alias for easePolyInOut.\nd3.easePolyInOut - symmetric polynomial easing.\npoly.exponent - specify the polynomial exponent.\nd3.easeQuadIn - quadratic easing; squares time.\nd3.easeQuadOut - reverse quadratic easing.\nd3.easeQuad - an alias for easeQuadInOut.\nd3.easeQuadInOut - symmetric quadratic easing.\nd3.easeCubicIn - cubic easing; cubes time.\nd3.easeCubicOut - reverse cubic easing.\nd3.easeCubic - an alias for easeCubicInOut.\nd3.easeCubicInOut - symmetric cubic easing.\nd3.easeSinIn - sinusoidal easing.\nd3.easeSinOut - reverse sinusoidal easing.\nd3.easeSin - an alias for easeSinInOut.\nd3.easeSinInOut - symmetric sinusoidal easing.\nd3.easeExpIn - exponential easing.\nd3.easeExpOut - reverse exponential easing.\nd3.easeExp - an alias for easeExpInOut.\nd3.easeExpInOut - symmetric exponential easing.\nd3.easeCircleIn - circular easing.\nd3.easeCircleOut - reverse circular easing.\nd3.easeCircle - an alias for easeCircleInOut.\nd3.easeCircleInOut - symmetric circular easing.\nd3.easeElasticIn - elastic easing, like a rubber band.\nd3.easeElastic - an alias for easeElasticOut.\nd3.easeElasticOut - reverse elastic easing.\nd3.easeElasticInOut - symmetric elastic easing.\nelastic.amplitude - specify the elastic amplitude.\nelastic.period - specify the elastic period.\nd3.easeBackIn - anticipatory easing, like a dancer bending his knees before jumping.\nd3.easeBackOut - reverse anticipatory easing.\nd3.easeBack - an alias for easeBackInOut.\nd3.easeBackInOut - symmetric anticipatory easing.\nback.overshoot - specify the amount of overshoot.\nd3.easeBounceIn - bounce easing, like a rubber ball.\nd3.easeBounce - an alias for easeBounceOut.\nd3.easeBounceOut - reverse bounce easing.\nd3.easeBounceInOut - symmetric bounce easing.\n\n\n\n\nConvenience methods on top of the Fetch API.\n\nd3.blob - get a file as a blob.\nd3.buffer - get a file as an array buffer.\nd3.csv - get a comma-separated values (CSV) file.\nd3.dsv - get a delimiter-separated values (CSV) file.\nd3.html - get an HTML file.\nd3.image - get an image.\nd3.json - get a JSON file.\nd3.svg - get an SVG file.\nd3.text - get a plain text file.\nd3.tsv - get a tab-separated values (TSV) file.\nd3.xml - get an XML file.\n\n\n\n\nForce-directed graph layout using velocity Verlet integration.\n\nd3.forceSimulation - create a new force simulation.\nsimulation.restart - reheat and restart the simulation‚Äôs timer.\nsimulation.stop - stop the simulation‚Äôs timer.\nsimulation.tick - advance the simulation one step.\nsimulation.nodes - set the simulation‚Äôs nodes.\nsimulation.alpha - set the current alpha.\nsimulation.alphaMin - set the minimum alpha threshold.\nsimulation.alphaDecay - set the alpha exponential decay rate.\nsimulation.alphaTarget - set the target alpha.\nsimulation.velocityDecay - set the velocity decay rate.\nsimulation.force - add or remove a force.\nsimulation.find - find the closest node to the given position.\nsimulation.randomSource - set the simulation‚Äôs random source.\nsimulation.on - add or remove an event listener.\nforce - apply the force.\nforce.initialize - initialize the force with the given nodes.\nd3.forceCenter - create a centering force.\ncenter.x - set the center x-coordinate.\ncenter.y - set the center y-coordinate.\ncenter.strength - set the strength of the centering force.\nd3.forceCollide - create a circle collision force.\ncollide.radius - set the circle radius.\ncollide.strength - set the collision resolution strength.\ncollide.iterations - set the number of iterations.\nd3.forceLink - create a link force.\nlink.links - set the array of links.\nlink.id - link nodes by numeric index or string identifier.\nlink.distance - set the link distance.\nlink.strength - set the link strength.\nlink.iterations - set the number of iterations.\nd3.forceManyBody - create a many-body force.\nmanyBody.strength - set the force strength.\nmanyBody.theta - set the Barnes‚ÄìHut approximation accuracy.\nmanyBody.distanceMin - limit the force when nodes are close.\nmanyBody.distanceMax - limit the force when nodes are far.\nd3.forceX - create an x-positioning force.\nx.strength - set the force strength.\nx.x - set the target x-coordinate.\nd3.forceY - create an y-positioning force.\ny.strength - set the force strength.\ny.y - set the target y-coordinate.\nd3.forceRadial - create a radial positioning force.\nradial.strength - set the force strength.\nradial.radius - set the target radius.\nradial.x - set the target center x-coordinate.\nradial.y - set the target center y-coordinate.\n\n\n\n\nFormat numbers for human consumption.\n\nd3.format - alias for locale.format on the default locale.\nd3.formatPrefix - alias for locale.formatPrefix on the default locale.\nlocale.format - create a number format.\nlocale.formatPrefix - create a SI-prefix number format.\nd3.formatSpecifier - parse a number format specifier.\nnew d3.FormatSpecifier - augments a number format specifier object.\nd3.precisionFixed - compute decimal precision for fixed-point notation.\nd3.precisionPrefix - compute decimal precision for SI-prefix notation.\nd3.precisionRound - compute significant digits for rounded notation.\nd3.formatLocale - define a custom locale.\nd3.formatDefaultLocale - define the default locale.\n\n\n\n\nGeographic projections, shapes and math.\n\n\n\nd3.geoPath - create a new geographic path generator.\npath - project and render the specified feature.\npath.area - compute the projected planar area of a given feature.\npath.bounds - compute the projected planar bounding box of a given feature.\npath.centroid - compute the projected planar centroid of a given feature.\npath.measure - compute the projected planar length of a given feature.\npath.projection - set the geographic projection.\npath.context - set the render context.\npath.pointRadius - set the radius to display point features.\n\n\n\n\n\nprojection - project the specified point from the sphere to the plane.\nprojection.invert - unproject the specified point from the plane to the sphere.\nprojection.stream - wrap the specified stream to project geometry.\nprojection.preclip - set the projection‚Äôs spherical clipping function.\nprojection.postclip - set the projection‚Äôs cartesian clipping function.\nprojection.clipAngle - set the radius of the clip circle.\nprojection.clipExtent - set the viewport clip extent, in pixels.\nprojection.scale - set the scale factor.\nprojection.translate - set the translation offset.\nprojection.center - set the center point.\nprojection.angle - set the post-projection rotation.\nprojection.reflectX - reflect the x-dimension.\nprojection.reflectY - reflect the y-dimension.\nprojection.rotate - set the three-axis spherical rotation angles.\nprojection.precision - set the precision threshold for adaptive sampling.\nprojection.fitExtent - set the scale and translate to fit a GeoJSON object.\nprojection.fitSize - set the scale and translate to fit a GeoJSON object.\nprojection.fitWidth - set the scale and translate to fit a GeoJSON object.\nprojection.fitHeight - set the scale and translate to fit a GeoJSON object.\nd3.geoAzimuthalEqualArea - the azimuthal equal-area projection.\nd3.geoAzimuthalEqualAreaRaw - the raw azimuthal equal-area projection.\nd3.geoAzimuthalEquidistant - the azimuthal equidistant projection.\nd3.geoAzimuthalEquidistantRaw - the raw azimuthal equidistant projection.\nd3.geoGnomonic - the gnomonic projection.\nd3.geoGnomonicRaw - the raw gnomonic projection.\nd3.geoOrthographic - the azimuthal orthographic projection.\nd3.geoOrthographicRaw - the raw azimuthal orthographic projection.\nd3.geoStereographic - the azimuthal stereographic projection.\nd3.geoStereographicRaw - the raw azimuthal stereographic projection.\nd3.geoEqualEarth - the Equal Earth projection.\nd3.geoEqualEarthRaw - the raw Equal Earth projection.\nd3.geoAlbersUsa - a composite Albers projection for the United States.\nconic.parallels - set the two standard parallels.\nd3.geoAlbers - the Albers equal-area conic projection.\nd3.geoConicConformal - the conic conformal projection.\nd3.geoConicConformalRaw - the raw conic conformal projection.\nd3.geoConicEqualArea - the conic equal-area (Albers) projection.\nd3.geoConicEqualAreaRaw - the raw conic equal-area (Albers) projection.\nd3.geoConicEquidistant - the conic equidistant projection.\nd3.geoConicEquidistantRaw - the raw conic equidistant projection.\nd3.geoEquirectangular - the equirectangular (plate carre√©) projection.\nd3.geoEquirectangularRaw - the raw equirectangular (plate carre√©) projection.\nd3.geoMercator - the spherical Mercator projection.\nd3.geoMercatorRaw - the raw Mercator projection.\nd3.geoTransverseMercator - the transverse spherical Mercator projection.\nd3.geoTransverseMercatorRaw - the raw transverse spherical Mercator projection.\nd3.geoNaturalEarth1 - the Equal Earth projection, version 1.\nd3.geoNaturalEarth1Raw - the raw Equal Earth projection, version 1\n\n\n\n\n\nproject - project the specified point from the sphere to the plane.\nproject.invert - unproject the specified point from the plane to the sphere.\nd3.geoProjection - create a custom projection.\nd3.geoProjectionMutator - create a custom configurable projection.\n\n\n\n\n\nd3.geoArea - compute the spherical area of a given feature.\nd3.geoBounds - compute the latitude-longitude bounding box for a given feature.\nd3.geoCentroid - compute the spherical centroid of a given feature.\nd3.geoDistance - compute the great-arc distance between two points.\nd3.geoLength - compute the length of a line string or the perimeter of a polygon.\nd3.geoInterpolate - interpolate between two points along a great arc.\nd3.geoContains - test whether a point is inside a given feature.\nd3.geoRotation - create a rotation function for the specified angles.\nrotation - rotate the given point around the sphere.\nrotation.invert - unrotate the given point around the sphere.\n\n\n\n\n\nd3.geoCircle - create a circle generator.\ncircle - generate a piecewise circle as a Polygon.\ncircle.center - specify the circle center in latitude and longitude.\ncircle.radius - specify the angular radius in degrees.\ncircle.precision - specify the precision of the piecewise circle.\nd3.geoGraticule - create a graticule generator.\ngraticule - generate a MultiLineString of meridians and parallels.\ngraticule.lines - generate an array of LineStrings of meridians and parallels.\ngraticule.outline - generate a Polygon of the graticule‚Äôs extent.\ngraticule.extent - get or set the major & minor extents.\ngraticule.extentMajor - get or set the major extent.\ngraticule.extentMinor - get or set the minor extent.\ngraticule.step - get or set the major & minor step intervals.\ngraticule.stepMajor - get or set the major step intervals.\ngraticule.stepMinor - get or set the minor step intervals.\ngraticule.precision - get or set the latitudinal precision.\nd3.geoGraticule10 - generate the default 10¬∞ global graticule.\n\n\n\n\n\nd3.geoStream - convert a GeoJSON object to a geometry stream.\nstream.point - indicates a point with the specified coordinates.\nstream.lineStart - indicates the start of a line or ring.\nstream.lineEnd - indicates the end of a line or ring.\nstream.polygonStart - indicates the start of a polygon.\nstream.polygonEnd - indicates the end of a polygon.\nstream.sphere - indicates the sphere.\n\n\n\n\n\nd3.geoTransform - define a custom geometry transform.\nd3.geoIdentity - scale, translate or clip planar geometry.\n\n\n\n\n\npreclip - pre-clipping in geographic coordinates.\npostclip - post-clipping in planar coordinates.\nd3.geoClipAntimeridian - cuts spherical geometries that cross the antimeridian.\nd3.geoClipCircle - clips spherical geometries to a small circle.\nd3.geoClipRectangle - clips planar geometries to a rectangular viewport.\n\n\n\n\n\nLayout algorithms for visualizing hierarchical data.\n\nd3.hierarchy - constructs a root node from hierarchical data.\nnode.ancestors - generate an array of ancestors.\nnode.descendants - generate an array of descendants.\nnode.leaves - generate an array of leaves.\nnode.find - find a node in the hierarchy.\nnode.path - generate the shortest path to another node.\nnode.links - generate an array of links.\nnode.sum - evaluate and aggregate quantitative values.\nnode.count - count the number of leaves.\nnode.sort - sort all descendant siblings.\nnode[Symbol.iterator] - iterate on a hierarchy.\nnode.each - breadth-first traversal.\nnode.eachAfter - post-order traversal.\nnode.eachBefore - pre-order traversal.\nnode.copy - copy a hierarchy.\nd3.stratify - create a new stratify operator.\nstratify - construct a root node from tabular data.\nstratify.id - set the node id accessor.\nstratify.parentId - set the parent node id accessor.\nd3.cluster - create a new cluster (dendrogram) layout.\ncluster - layout the specified hierarchy in a dendrogram.\ncluster.size - set the layout size.\ncluster.nodeSize - set the node size.\ncluster.separation - set the separation between leaves.\nd3.tree - create a new tidy tree layout.\ntree - layout the specified hierarchy in a tidy tree.\ntree.size - set the layout size.\ntree.nodeSize - set the node size.\ntree.separation - set the separation between nodes.\nd3.treemap - create a new treemap layout.\ntreemap - layout the specified hierarchy as a treemap.\ntreemap.tile - set the tiling method.\ntreemap.size - set the layout size.\ntreemap.round - set whether the output coordinates are rounded.\ntreemap.padding - set the padding.\ntreemap.paddingInner - set the padding between siblings.\ntreemap.paddingOuter - set the padding between parent and children.\ntreemap.paddingTop - set the padding between the parent‚Äôs top edge and children.\ntreemap.paddingRight - set the padding between the parent‚Äôs right edge and children.\ntreemap.paddingBottom - set the padding between the parent‚Äôs bottom edge and children.\ntreemap.paddingLeft - set the padding between the parent‚Äôs left edge and children.\nd3.treemapBinary - tile using a balanced binary tree.\nd3.treemapDice - tile into a horizontal row.\nd3.treemapSlice - tile into a vertical column.\nd3.treemapSliceDice - alternate between slicing and dicing.\nd3.treemapSquarify - tile using squarified rows per Bruls et. al.\nd3.treemapResquarify - like d3.treemapSquarify, but performs stable updates.\nsquarify.ratio - set the desired rectangle aspect ratio.\nd3.partition - create a new partition (icicle or sunburst) layout.\npartition - layout the specified hierarchy as a partition diagram.\npartition.size - set the layout size.\npartition.round - set whether the output coordinates are rounded.\npartition.padding - set the padding.\nd3.pack - create a new circle-packing layout.\npack - layout the specified hierarchy using circle-packing.\npack.radius - set the radius accessor.\npack.size - set the layout size.\npack.padding - set the padding.\nd3.packSiblings - pack the specified array of circles.\nd3.packEnclose - enclose the specified array of circles.\n\n\n\n\nInterpolate numbers, colors, strings, arrays, objects, whatever!\n\nd3.interpolate - interpolate arbitrary values.\nd3.interpolateNumber - interpolate numbers.\nd3.interpolateRound - interpolate integers.\nd3.interpolateString - interpolate strings with embedded numbers.\nd3.interpolateDate - interpolate dates.\nd3.interpolateArray - interpolate arrays of arbitrary values.\nd3.interpolateNumberArray - interpolate arrays of numbers.\nd3.interpolateObject - interpolate arbitrary objects.\nd3.interpolateTransformCss - interpolate 2D CSS transforms.\nd3.interpolateTransformSvg - interpolate 2D SVG transforms.\nd3.interpolateZoom - zoom and pan between two views.\ninterpolateZoom.rho - set the curvature rho of the zoom interpolator.\nd3.interpolateDiscrete - generate a discrete interpolator from a set of values.\nd3.quantize - generate uniformly-spaced samples from an interpolator.\nd3.interpolateRgb - interpolate RGB colors.\nd3.interpolateRgbBasis - generate a B-spline through a set of colors.\nd3.interpolateRgbBasisClosed - generate a closed B-spline through a set of colors.\nd3.interpolateHsl - interpolate HSL colors.\nd3.interpolateHslLong - interpolate HSL colors, the long way.\nd3.interpolateLab - interpolate Lab colors.\nd3.interpolateHcl - interpolate HCL colors.\nd3.interpolateHclLong - interpolate HCL colors, the long way.\nd3.interpolateCubehelix - interpolate Cubehelix colors.\nd3.interpolateCubehelixLong - interpolate Cubehelix colors, the long way.\ninterpolate.gamma - apply gamma correction during interpolation.\nd3.interpolateHue - interpolate a hue angle.\nd3.interpolateBasis - generate a B-spline through a set of values.\nd3.interpolateBasisClosed - generate a closed B-spline through a set of values.\nd3.piecewise - generate a piecewise linear interpolator from a set of values.\n\n\n\n\nSerialize Canvas path commands to SVG.\n\nd3.path - create a new path serializer.\npath.moveTo - move to the given point.\npath.closePath - close the current subpath.\npath.lineTo - draw a straight line segment.\npath.quadraticCurveTo - draw a quadratic B√©zier segment.\npath.bezierCurveTo - draw a cubic B√©zier segment.\npath.arcTo - draw a circular arc segment.\npath.arc - draw a circular arc segment.\npath.rect - draw a rectangle.\npath.toString - serialize to an SVG path data string.\n\n\n\n\nGeometric operations for two-dimensional polygons.\n\nd3.polygonArea - compute the area of the given polygon.\nd3.polygonCentroid - compute the centroid of the given polygon.\nd3.polygonHull - compute the convex hull of the given points.\nd3.polygonContains - test whether a point is inside a polygon.\nd3.polygonLength - compute the length of the given polygon‚Äôs perimeter.\n\n\n\n\nTwo-dimensional recursive spatial subdivision.\n\nd3.quadtree - create a new, empty quadtree.\nquadtree.x - set the x accessor.\nquadtree.y - set the y accessor.\nquadtree.extent - extend the quadtree to cover an extent.\nquadtree.cover - extend the quadtree to cover a point.\nquadtree.add - add a datum to a quadtree.\nquadtree.addAll - add an array of data to a quadtree.\nquadtree.remove - remove a datum from a quadtree.\nquadtree.removeAll - remove an array of data from a quadtree.\nquadtree.copy - create a copy of a quadtree.\nquadtree.root - get the quadtree‚Äôs root node.\nquadtree.data - retrieve all data from the quadtree.\nquadtree.size - count the number of data in the quadtree.\nquadtree.find - quickly find the closest datum in a quadtree.\nquadtree.visit - selectively visit nodes in a quadtree.\nquadtree.visitAfter - visit all nodes in a quadtree.\n\n\n\n\nGenerate random numbers from various distributions.\n\nd3.randomUniform - from a uniform distribution.\nd3.randomInt - from a uniform integer distribution.\nd3.randomNormal - from a normal distribution.\nd3.randomLogNormal - from a log-normal distribution.\nd3.randomBates - from a Bates distribution.\nd3.randomIrwinHall - from an Irwin‚ÄìHall distribution.\nd3.randomExponential - from an exponential distribution.\nd3.randomPareto - from a Pareto distribution.\nd3.randomBernoulli - from a Bernoulli distribution.\nd3.randomGeometric - from a geometric distribution.\nd3.randomBinomial - from a binomial distribution.\nd3.randomGamma - from a gamma distribution.\nd3.randomBeta - from a beta distribution.\nd3.randomWeibull - from a Weibull, Gumbel or Fr√©chet distribution.\nd3.randomCauchy - from a Cauchy distribution.\nd3.randomLogistic - from a logistic distribution.\nd3.randomPoisson - from a Poisson distribution.\nrandom.source - set the source of randomness.\nd3.randomLcg - a seeded pseudorandom number generator.\n\n\n\n\nEncodings that map abstract data to visual representation.\n\n\nMap a continuous, quantitative domain to a continuous range.\n\ncontinuous - compute the range value corresponding to a given domain value.\ncontinuous.invert - compute the domain value corresponding to a given range value.\ncontinuous.domain - set the input domain.\ncontinuous.range - set the output range.\ncontinuous.rangeRound - set the output range and enable rounding.\ncontinuous.clamp - enable clamping to the domain or range.\ncontinuous.unknown - set the output value for unknown inputs.\ncontinuous.interpolate - set the output interpolator.\ncontinuous.ticks - compute representative values from the domain.\ncontinuous.tickFormat - format ticks for human consumption.\ncontinuous.nice - extend the domain to nice round numbers.\ncontinuous.copy - create a copy of this scale.\nd3.tickFormat - format ticks for human consumption.\nd3.scaleLinear - create a quantitative linear scale.\nd3.scalePow - create a quantitative power scale.\npow - compute the range value corresponding to a given domain value.\npow.invert - compute the domain value corresponding to a given range value.\npow.exponent - set the power exponent.\npow.domain - set the input domain.\npow.range - set the output range.\npow.rangeRound - set the output range and enable rounding.\npow.clamp - enable clamping to the domain or range.\npow.interpolate - set the output interpolator.\npow.ticks - compute representative values from the domain.\npow.tickFormat - format ticks for human consumption.\npow.nice - extend the domain to nice round numbers.\npow.copy - create a copy of this scale.\nd3.scaleSqrt - create a quantitative power scale with exponent 0.5.\nd3.scaleLog - create a quantitative logarithmic scale.\nlog - compute the range value corresponding to a given domain value.\nlog.invert - compute the domain value corresponding to a given range value.\nlog.base - set the logarithm base.\nlog.domain - set the input domain.\nlog.range - set the output range.\nlog.rangeRound - set the output range and enable rounding.\nlog.clamp - enable clamping to the domain or range.\nlog.interpolate - set the output interpolator.\nlog.ticks - compute representative values from the domain.\nlog.tickFormat - format ticks for human consumption.\nlog.nice - extend the domain to nice round numbers.\nlog.copy - create a copy of this scale.\nd3.scaleSymlog - create a symmetric logarithmic scale.\nsymlog.constant - set the constant of a symlog scale.\nd3.scaleIdentity - creates an identity scale.\nd3.scaleRadial - creates a radial scale.\nd3.scaleTime - create a linear scale for time.\ntime - compute the range value corresponding to a given domain value.\ntime.invert - compute the domain value corresponding to a given range value.\ntime.domain - set the input domain.\ntime.range - set the output range.\ntime.rangeRound - set the output range and enable rounding.\ntime.clamp - enable clamping to the domain or range.\ntime.interpolate - set the output interpolator.\ntime.ticks - compute representative values from the domain.\ntime.tickFormat - format ticks for human consumption.\ntime.nice - extend the domain to nice round times.\ntime.copy - create a copy of this scale.\nd3.scaleUtc - create a linear scale for UTC.\n\n\n\n\nMap a continuous, quantitative domain to a continuous, fixed interpolator.\n\nd3.scaleSequential - create a sequential scale.\nsequential - compute the range value corresponding to an input value.\nsequential.domain - set the input domain.\nsequential.clamp - enable clamping to the domain.\nsequential.interpolator - set the scale‚Äôs output interpolator.\nsequential.range - set the output range.\nsequential.rangeRound - set the output range and enable rounding.\nsequential.copy - create a copy of this scale.\nd3.scaleSequentialLog - create a logarithmic sequential scale.\nd3.scaleSequentialPow - create a power sequential scale.\nd3.scaleSequentialSqrt - create a power sequential scale with exponent 0.5.\nd3.scaleSequentialSymlog - create a symmetric logarithmic sequential scale.\nd3.scaleSequentialQuantile - create a sequential scale using a p-quantile transform.\nsequentialQuantile.quantiles - return the scale‚Äôs quantiles.\n\n\n\n\nMap a continuous, quantitative domain to a continuous, fixed interpolator.\n\nd3.scaleDiverging - create a diverging scale.\ndiverging - compute the range value corresponding to an input value.\ndiverging.domain - set the input domain.\ndiverging.clamp - enable clamping to the domain or range.\ndiverging.interpolator - set the scale‚Äôs output interpolator.\ndiverging.range - set the output range.\ndiverging.rangeRound - set the output range and enable rounding.\ndiverging.copy - create a copy of this scale.\ndiverging.unknown - set the output value for unknown inputs.\nd3.scaleDivergingLog - create a diverging logarithmic scale.\nd3.scaleDivergingPow - create a diverging power scale.\nd3.scaleDivergingSqrt - create a diverging power scale with exponent 0.5.\nd3.scaleDivergingSymlog - create a diverging symmetric logarithmic scale.\n\n\n\n\nMap a continuous, quantitative domain to a discrete range.\n\nd3.scaleQuantize - create a uniform quantizing linear scale.\nquantize - compute the range value corresponding to a given domain value.\nquantize.invertExtent - compute the domain values corresponding to a given range value.\nquantize.domain - set the input domain.\nquantize.range - set the output range.\nquantize.ticks - compute representative values from the domain.\nquantize.tickFormat - format ticks for human consumption.\nquantize.nice - extend the domain to nice round numbers.\nquantize.thresholds - return the array of computed thresholds within the domain.\nquantize.copy - create a copy of this scale.\nd3.scaleQuantile - create a quantile quantizing linear scale.\nquantile - compute the range value corresponding to a given domain value.\nquantile.invertExtent - compute the domain values corresponding to a given range value.\nquantile.domain - set the input domain.\nquantile.range - set the output range.\nquantile.quantiles - get the quantile thresholds.\nquantile.copy - create a copy of this scale.\nd3.scaleThreshold - create an arbitrary quantizing linear scale.\nthreshold - compute the range value corresponding to a given domain value.\nthreshold.invertExtent - compute the domain values corresponding to a given range value.\nthreshold.domain - set the input domain.\nthreshold.range - set the output range.\nthreshold.copy - create a copy of this scale.\n\n\n\n\nMap a discrete domain to a discrete range.\n\nd3.scaleOrdinal - create an ordinal scale.\nordinal - compute the range value corresponding to a given domain value.\nordinal.domain - set the input domain.\nordinal.range - set the output range.\nordinal.unknown - set the output value for unknown inputs.\nordinal.copy - create a copy of this scale.\nd3.scaleImplicit - a special unknown value for implicit domains.\nd3.scaleBand - create an ordinal band scale.\nband - compute the band start corresponding to a given domain value.\nband.domain - set the input domain.\nband.range - set the output range.\nband.rangeRound - set the output range and enable rounding.\nband.round - enable rounding.\nband.paddingInner - set padding between bands.\nband.paddingOuter - set padding outside the first and last bands.\nband.padding - set padding outside and between bands.\nband.align - set band alignment, if there is extra space.\nband.bandwidth - get the width of each band.\nband.step - get the distance between the starts of adjacent bands.\nband.copy - create a copy of this scale.\nd3.scalePoint - create an ordinal point scale.\npoint - compute the point corresponding to a given domain value.\npoint.domain - set the input domain.\npoint.range - set the output range.\npoint.rangeRound - set the output range and enable rounding.\npoint.round - enable rounding.\npoint.padding - set padding outside the first and last point.\npoint.align - set point alignment, if there is extra space.\npoint.bandwidth - returns zero.\npoint.step - get the distance between the starts of adjacent points.\npoint.copy - create a copy of this scale.\n\n\n\n\n\nTransform the DOM by selecting elements and joining to data.\n\n\n\nd3.selection - select the root document element.\nd3.select - select an element from the document.\nd3.selectAll - select multiple elements from the document.\nselection.select - select a descendant element for each selected element.\nselection.selectAll - select multiple descendants for each selected element.\nselection.filter - filter elements based on data.\nselection.merge - merge this selection with another.\nselection.selectChild - select a child element for each selected element.\nselection.selectChildren - select the children elements for each selected element.\nselection.selection - return the selection.\nd3.matcher - test whether an element matches a selector.\nd3.selector - select an element.\nd3.selectorAll - select elements.\nd3.window - get a node‚Äôs owner window.\nd3.style - get a node‚Äôs current style value.\n\n\n\n\n\nselection.attr - get or set an attribute.\nselection.classed - get, add or remove CSS classes.\nselection.style - get or set a style property.\nselection.property - get or set a (raw) property.\nselection.text - get or set the text content.\nselection.html - get or set the inner HTML.\nselection.append - create, append and select new elements.\nselection.insert - create, insert and select new elements.\nselection.remove - remove elements from the document.\nselection.clone - insert clones of selected elements.\nselection.sort - sort elements in the document based on data.\nselection.order - reorders elements in the document to match the selection.\nselection.raise - reorders each element as the last child of its parent.\nselection.lower - reorders each element as the first child of its parent.\nd3.create - create and select a detached element.\nd3.creator - create an element by name.\n\n\n\n\n\nselection.data - bind elements to data.\nselection.join - enter, update or exit elements based on data.\nselection.enter - get the enter selection (data missing elements).\nselection.exit - get the exit selection (elements missing data).\nselection.datum - get or set element data (without joining).\n\n\n\n\n\nselection.on - add or remove event listeners.\nselection.dispatch - dispatch a custom event.\nd3.pointer - get the pointer‚Äôs position of an event.\nd3.pointers - get the pointers‚Äô positions of an event.\n\n\n\n\n\nselection.each - call a function for each element.\nselection.call - call a function with this selection.\nselection.empty - returns true if this selection is empty.\nselection.nodes - returns an array of all selected elements.\nselection.node - returns the first (non-null) element.\nselection.size - returns the count of elements.\nselection[Symbol.iterator] - iterate over the selection‚Äôs nodes.\n\n\n\n\n\nd3.local - declares a new local variable.\nlocal.set - set a local variable‚Äôs value.\nlocal.get - get a local variable‚Äôs value.\nlocal.remove - delete a local variable.\nlocal.toString - get the property identifier of a local variable.\n\n\n\n\n\nd3.namespace - qualify a prefixed XML name, such as ‚Äúxlink:href‚Äù.\nd3.namespaces - the built-in XML namespaces.\n\n\n\n\n\nGraphical primitives for visualization.\n\n\nCircular or annular sectors, as in a pie or donut chart.\n\nd3.arc - create a new arc generator.\narc - generate an arc for the given datum.\narc.centroid - compute an arc‚Äôs midpoint.\narc.innerRadius - set the inner radius.\narc.outerRadius - set the outer radius.\narc.cornerRadius - set the corner radius, for rounded corners.\narc.startAngle - set the start angle.\narc.endAngle - set the end angle.\narc.padAngle - set the angle between adjacent arcs, for padded arcs.\narc.padRadius - set the radius at which to linearize padding.\narc.context - set the rendering context.\n\n\n\n\nCompute the necessary angles to represent a tabular dataset as a pie or donut chart.\n\nd3.pie - create a new pie generator.\npie - compute the arc angles for the given dataset.\npie.value - set the value accessor.\npie.sort - set the sort order comparator.\npie.sortValues - set the sort order comparator.\npie.startAngle - set the overall start angle.\npie.endAngle - set the overall end angle.\npie.padAngle - set the pad angle between adjacent arcs.\n\n\n\n\nA spline or polyline, as in a line chart.\n\nd3.line - create a new line generator.\nline - generate a line for the given dataset.\nline.x - set the x accessor.\nline.y - set the y accessor.\nline.defined - set the defined accessor.\nline.curve - set the curve interpolator.\nline.context - set the rendering context.\nd3.lineRadial - create a new radial line generator.\nlineRadial - generate a line for the given dataset.\nlineRadial.angle - set the angle accessor.\nlineRadial.radius - set the radius accessor.\nlineRadial.defined - set the defined accessor.\nlineRadial.curve - set the curve interpolator.\nlineRadial.context - set the rendering context.\n\n\n\n\nAn area, defined by a bounding topline and baseline, as in an area chart.\n\nd3.area - create a new area generator.\narea - generate an area for the given dataset.\narea.x - set the x0 and x1 accessors.\narea.x0 - set the baseline x accessor.\narea.x1 - set the topline x accessor.\narea.y - set the y0 and y1 accessors.\narea.y0 - set the baseline y accessor.\narea.y1 - set the topline y accessor.\narea.defined - set the defined accessor.\narea.curve - set the curve interpolator.\narea.context - set the rendering context.\narea.lineX0 - derive a line for the left edge of an area.\narea.lineY0 - derive a line for the top edge of an area.\narea.lineX1 - derive a line for the right edge of an area.\narea.lineY1 - derive a line for the bottom edge of an area.\nd3.areaRadial - create a new radial area generator.\nareaRadial - generate an area for the given dataset.\nareaRadial.angle - set the start and end angle accessors.\nareaRadial.startAngle - set the start angle accessor.\nareaRadial.endAngle - set the end angle accessor.\nareaRadial.radius - set the inner and outer radius accessors.\nareaRadial.innerRadius - set the inner radius accessor.\nareaRadial.outerRadius - set the outer radius accessor.\nareaRadial.defined - set the defined accessor.\nareaRadial.curve - set the curve interpolator.\nareaRadial.context - set the rendering context.\nareaRadial.lineStartAngle - derive a line for the start edge of an area.\nareaRadial.lineInnerRadius - derive a line for the inner edge of an area.\nareaRadial.lineEndAngle - derive a line for the end edge of an area.\nareaRadial.lineOuterRadius - derive a line for the outer edge of an area.\n\n\n\n\nInterpolate between points to produce a continuous shape.\n\nd3.curveBasis - a cubic basis spline, repeating the end points.\nd3.curveBasisClosed - a closed cubic basis spline.\nd3.curveBasisOpen - a cubic basis spline.\nd3.curveBundle - a straightened cubic basis spline.\nbundle.beta - set the bundle tension beta.\nd3.curveCardinal - a cubic cardinal spline, with one-sided difference at each end.\nd3.curveCardinalClosed - a closed cubic cardinal spline.\nd3.curveCardinalOpen - a cubic cardinal spline.\ncardinal.tension - set the cardinal spline tension.\nd3.curveCatmullRom - a cubic Catmull‚ÄìRom spline, with one-sided difference at each end.\nd3.curveCatmullRomClosed - a closed cubic Catmull‚ÄìRom spline.\nd3.curveCatmullRomOpen - a cubic Catmull‚ÄìRom spline.\ncatmullRom.alpha - set the Catmull‚ÄìRom parameter alpha.\nd3.curveLinear - a polyline.\nd3.curveLinearClosed - a closed polyline.\nd3.curveMonotoneX - a cubic spline that, given monotonicity in x, preserves it in y.\nd3.curveMonotoneY - a cubic spline that, given monotonicity in y, preserves it in x.\nd3.curveNatural - a natural cubic spline.\nd3.curveStep - a piecewise constant function.\nd3.curveStepAfter - a piecewise constant function.\nd3.curveStepBefore - a piecewise constant function.\ncurve.areaStart - start a new area segment.\ncurve.areaEnd - end the current area segment.\ncurve.lineStart - start a new line segment.\ncurve.lineEnd - end the current line segment.\ncurve.point - add a point to the current line segment.\n\n\n\n\nA smooth cubic B√©zier curve from a source to a target.\n\nd3.linkVertical - create a new vertical link generator.\nd3.linkHorizontal - create a new horizontal link generator.\nlink - generate a link.\nlink.source - set the source accessor.\nlink.target - set the target accessor.\nlink.x - set the point x-accessor.\nlink.y - set the point y-accessor.\nlink.context - set the rendering context.\nd3.linkRadial - create a new radial link generator.\nlinkRadial.angle - set the point angle accessor.\nlinkRadial.radius - set the point radius accessor.\n\n\n\n\nA categorical shape encoding, as in a scatterplot.\n\nd3.symbol - create a new symbol generator.\nsymbol - generate a symbol for the given datum.\nsymbol.type - set the symbol type.\nsymbol.size - set the size of the symbol in square pixels.\nsymbol.context - set the rendering context.\nd3.symbols - the array of built-in symbol types.\nd3.symbolCircle - a circle.\nd3.symbolCross - a Greek cross with arms of equal length.\nd3.symbolDiamond - a rhombus.\nd3.symbolSquare - a square.\nd3.symbolStar - a pentagonal star (pentagram).\nd3.symbolTriangle - an up-pointing triangle.\nd3.symbolWye - a Y shape.\nd3.pointRadial - relative coordinates of a point given an angle and radius.\nsymbolType.draw - draw this symbol to the given context.\n\n\n\n\nStack shapes, placing one adjacent to another, as in a stacked bar chart.\n\nd3.stack - create a new stack generator.\nstack - generate a stack for the given dataset.\nstack.keys - set the keys accessor.\nstack.value - set the value accessor.\nstack.order - set the order accessor.\nstack.offset - set the offset accessor.\nd3.stackOrderAppearance - put the earliest series on bottom.\nd3.stackOrderAscending - put the smallest series on bottom.\nd3.stackOrderDescending - put the largest series on bottom.\nd3.stackOrderInsideOut - put earlier series in the middle.\nd3.stackOrderNone - use the given series order.\nd3.stackOrderReverse - use the reverse of the given series order.\nd3.stackOffsetExpand - normalize the baseline to zero and topline to one.\nd3.stackOffsetDiverging - positive above zero; negative below zero.\nd3.stackOffsetNone - apply a zero baseline.\nd3.stackOffsetSilhouette - center the streamgraph around zero.\nd3.stackOffsetWiggle - minimize streamgraph wiggling.\n\n\n\n\n\nParse and format times, inspired by strptime and strftime.\n\nd3.timeFormat - alias for locale.format on the default locale.\nd3.timeParse - alias for locale.parse on the default locale.\nd3.utcFormat - alias for locale.utcFormat on the default locale.\nd3.utcParse - alias for locale.utcParse on the default locale.\nd3.isoFormat - an ISO 8601 UTC formatter.\nd3.isoParse - an ISO 8601 UTC parser.\nlocale.format - create a time formatter.\nlocale.parse - create a time parser.\nlocale.utcFormat - create a UTC formatter.\nlocale.utcParse - create a UTC parser.\nd3.timeFormatLocale - define a custom locale.\nd3.timeFormatDefaultLocale - define the default locale.\n\n\n\n\nA calculator for humanity‚Äôs peculiar conventions of time.\n\nd3.timeInterval - implement a new custom time interval.\ninterval - alias for interval.floor.\ninterval.floor - round down to the nearest boundary.\ninterval.round - round to the nearest boundary.\ninterval.ceil - round up to the nearest boundary.\ninterval.offset - offset a date by some number of intervals.\ninterval.range - generate a range of dates at interval boundaries.\ninterval.filter - create a filtered subset of this interval.\ninterval.every - create a filtered subset of this interval.\ninterval.count - count interval boundaries between two dates.\nd3.timeMillisecond, d3.utcMillisecond - the millisecond interval.\nd3.timeMilliseconds, d3.utcMilliseconds - aliases for millisecond.range.\nd3.timeSecond, d3.utcSecond - the second interval.\nd3.timeSeconds, d3.utcSeconds - aliases for second.range.\nd3.timeMinute, d3.utcMinute - the minute interval.\nd3.timeMinutes, d3.utcMinutes - aliases for minute.range.\nd3.timeHour, d3.utcHour - the hour interval.\nd3.timeHours, d3.utcHours - aliases for hour.range.\nd3.timeDay, d3.utcDay - the day interval.\nd3.timeDays, d3.utcDays - aliases for day.range.\nd3.timeWeek, d3.utcWeek - aliases for sunday.\nd3.timeWeeks, d3.utcWeeks - aliases for week.range.\nd3.timeSunday, d3.utcSunday - the week interval, starting on Sunday.\nd3.timeSundays, d3.utcSundays - aliases for sunday.range.\nd3.timeMonday, d3.utcMonday - the week interval, starting on Monday.\nd3.timeMondays, d3.utcMondays - aliases for monday.range.\nd3.timeTuesday, d3.utcTuesday - the week interval, starting on Tuesday.\nd3.timeTuesdays, d3.utcTuesdays - aliases for tuesday.range.\nd3.timeWednesday, d3.utcWednesday - the week interval, starting on Wednesday.\nd3.timeWednesdays, d3.utcWednesdays - aliases for wednesday.range.\nd3.timeThursday, d3.utcThursday - the week interval, starting on Thursday.\nd3.timeThursdays, d3.utcThursdays - aliases for thursday.range.\nd3.timeFriday, d3.utcFriday - the week interval, starting on Friday.\nd3.timeFridays, d3.utcFridays - aliases for friday.range.\nd3.timeSaturday, d3.utcSaturday - the week interval, starting on Saturday.\nd3.timeSaturdays, d3.utcSaturdays - aliases for saturday.range.\nd3.timeMonth, d3.utcMonth - the month interval.\nd3.timeMonths, d3.utcMonths - aliases for month.range.\nd3.timeYear, d3.utcYear - the year interval.\nd3.timeYears, d3.utcYears - aliases for year.range.\n\n\n\n\nAn efficient queue for managing thousands of concurrent animations.\n\nd3.now - get the current high-resolution time.\nd3.timer - schedule a new timer.\ntimer.restart - reset the timer‚Äôs start time and callback.\ntimer.stop - stop the timer.\nd3.timerFlush - immediately execute any eligible timers.\nd3.timeout - schedule a timer that stops on its first callback.\nd3.interval - schedule a timer that is called with a configurable period.\n\n\n\n\nAnimated transitions for selections.\n\nselection.transition - schedule a transition for the selected elements.\nselection.interrupt - interrupt and cancel transitions on the selected elements.\nd3.interrupt - interrupt the active transition for a given node.\nd3.transition - schedule a transition on the root document element.\ntransition.select - schedule a transition on the selected elements.\ntransition.selectAll - schedule a transition on the selected elements.\ntransition.filter - filter elements based on data.\ntransition.merge - merge this transition with another.\ntransition.transition - schedule a new transition following this one.\ntransition.selection - returns a selection for this transition.\nd3.active - select the active transition for a given node.\ntransition.attr - tween the given attribute using the default interpolator.\ntransition.attrTween - tween the given attribute using a custom interpolator.\ntransition.style - tween the given style property using the default interpolator.\ntransition.styleTween - tween the given style property using a custom interpolator.\ntransition.text - set the text content when the transition starts.\ntransition.textTween - tween the text using a custom interpolator.\ntransition.remove - remove the selected elements when the transition ends.\ntransition.tween - run custom code during the transition.\ntransition.delay - specify per-element delay in milliseconds.\ntransition.duration - specify per-element duration in milliseconds.\ntransition.ease - specify the easing function.\ntransition.easeVarying - specify an easing function factory.\ntransition.end - a promise that resolves when a transition ends.\ntransition.on - await the end of a transition.\ntransition.each - call a function for each element.\ntransition.call - call a function with this transition.\ntransition.empty - returns true if this transition is empty.\ntransition.nodes - returns an array of all selected elements.\ntransition.node - returns the first (non-null) element.\ntransition.size - returns the count of elements.\n\n\n\n\nPan and zoom SVG, HTML or Canvas using mouse or touch input.\n\nd3.zoom - create a zoom behavior.\nzoom - apply the zoom behavior to the selected elements.\nzoom.transform - change the transform for the selected elements.\nzoom.translateBy - translate the transform for the selected elements.\nzoom.translateTo - translate the transform for the selected elements.\nzoom.scaleBy - scale the transform for the selected elements.\nzoom.scaleTo - scale the transform for the selected elements.\nzoom.constrain - override the transform constraint logic.\nzoom.filter - control which input events initiate zooming.\nzoom.touchable - set the touch support detector.\nzoom.wheelDelta - override scaling for wheel events.\nzoom.extent - set the extent of the viewport.\nzoom.scaleExtent - set the allowed scale range.\nzoom.translateExtent - set the extent of the zoomable world.\nzoom.clickDistance - set the click distance threshold.\nzoom.tapDistance - set the tap distance threshold.\nzoom.duration - set the duration of zoom transitions.\nzoom.interpolate - control the interpolation of zoom transitions.\nzoom.on - listen for zoom events.\nd3.zoomTransform - get the zoom transform for a given element.\ntransform.scale - scale a transform by the specified amount.\ntransform.translate - translate a transform by the specified amount.\ntransform.apply - apply the transform to the given point.\ntransform.applyX - apply the transform to the given x-coordinate.\ntransform.applyY - apply the transform to the given y-coordinate.\ntransform.invert - unapply the transform to the given point.\ntransform.invertX - unapply the transform to the given x-coordinate.\ntransform.invertY - unapply the transform to the given y-coordinate.\ntransform.rescaleX - apply the transform to an x-scale‚Äôs domain.\ntransform.rescaleY - apply the transform to a y-scale‚Äôs domain.\ntransform.toString - format the transform as an SVG transform string.\nd3.zoomIdentity - the identity transform."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#arrays-d3-array",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#arrays-d3-array",
    "title": "D3 API Reference",
    "section": "",
    "text": "Array manipulation, ordering, searching, summarizing, etc.\n\n\nMethods for computing basic summary statistics.\n\nd3.min - compute the minimum value in an iterable.\nd3.minIndex - compute the index of the minimum value in an iterable.\nd3.max - compute the maximum value in an iterable.\nd3.maxIndex - compute the index of the maximum value in an iterable.\nd3.extent - compute the minimum and maximum value in an iterable.\nd3.sum - compute the sum of an iterable of numbers.\nd3.mean - compute the arithmetic mean of an iterable of numbers.\nd3.median - compute the median of an iterable of numbers (the 0.5-quantile).\nd3.cumsum - comute the cumulative sum of an iterable.\nd3.quantile - compute a quantile for an iterable of numbers.\nd3.quantileSorted - compute a quantile for a sorted array of numbers.\nd3.variance - compute the variance of an iterable of numbers.\nd3.deviation - compute the standard deviation of an iterable of numbers.\nd3.fsum - compute a full precision summation of an iterable of numbers.\nnew d3.Adder - creates a full precision adder.\nadder.add - add a value to an adder.\nadder.valueOf - returns a double precision representation of an adder‚Äôs value.\n\n\n\n\nMethods for searching arrays for a specific element.\n\nd3.least - returns the least element of an iterable.\nd3.leastIndex - returns the index of the least element of an iterable.\nd3.greatest - returns the greatest element of an iterable.\nd3.greatestIndex - returns the index of the greatest element of an iterable.\nd3.bisectCenter - binary search for a value in a sorted array.\nd3.bisectLeft - binary search for a value in a sorted array.\nd3.bisect - binary search for a value in a sorted array.\nd3.bisectRight - binary search for a value in a sorted array.\nd3.bisector - bisect using an accessor or comparator.\nbisector.center - binary search for a value in a sorted array.\nbisector.left - bisectLeft, with the given comparator.\nbisector.right - bisectRight, with the given comparator.\nd3.quickselect - reorder an array of numbers.\nd3.ascending - compute the natural order of two values.\nd3.descending - compute the natural order of two values.\n\n\n\n\nMethods for transforming arrays and for generating new arrays.\n\nd3.group - group an iterable into a nested Map.\nd3.groups - group an iterable into a nested array.\nd3.index - index an iterable into a nested Map.\nd3.indexes - index an iterable into a nested array.\nd3.rollup - reduce an iterable into a nested Map.\nd3.rollups - reduce an iterable into a nested array.\nd3.count - count valid number values in an iterable.\nd3.cross - compute the Cartesian product of two iterables.\nd3.merge - merge multiple iterables into one array.\nd3.pairs - create an array of adjacent pairs of elements.\nd3.permute - reorder an iterable of elements according to an iterable of indexes.\nd3.shuffle - randomize the order of an iterable.\nd3.shuffler - randomize the order of an iterable.\nd3.ticks - generate representative values from a numeric interval.\nd3.tickIncrement - generate representative values from a numeric interval.\nd3.tickStep - generate representative values from a numeric interval.\nd3.nice - extend an interval to align with ticks.\nd3.range - generate a range of numeric values.\nd3.transpose - transpose an array of arrays.\nd3.zip - transpose a variable number of arrays.\n\n\n\n\n\nd3.every - test if all values satisfy a condition.\nd3.some - test if any value satisfies a condition.\nd3.filter - filter values.\nd3.map - map values.\nd3.reduce - reduce values.\nd3.reverse - reverse the order of values.\nd3.sort - sort values.\n\n\n\n\n\nd3.difference - compute a set difference.\nd3.disjoint - test whether two sets are disjoint.\nd3.intersection - compute a set intersection.\nd3.superset - test whether a set is a superset of another.\nd3.subset - test whether a set is a subset of another.\nd3.union - compute a set union.\n\n\n\n\nBin discrete samples into continuous, non-overlapping intervals.\n\nd3.bin - create a new bin generator.\nbin - bins a given array of samples.\nbin.value- specify a value accessor for each sample.\nbin.domain - specify the interval of observable values.\nbin.thresholds - specify how values are divided into bins.\nd3.thresholdFreedmanDiaconis - the Freedman‚ÄìDiaconis binning rule.\nd3.thresholdScott - Scott‚Äôs normal reference binning rule.\nd3.thresholdSturges - Sturges‚Äô binning formula."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#axes-d3-axis",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#axes-d3-axis",
    "title": "D3 API Reference",
    "section": "",
    "text": "Human-readable reference marks for scales.\n\nd3.axisTop - create a new top-oriented axis generator.\nd3.axisRight - create a new right-oriented axis generator.\nd3.axisBottom - create a new bottom-oriented axis generator.\nd3.axisLeft - create a new left-oriented axis generator.\naxis - generate an axis for the given selection.\naxis.scale - set the scale.\naxis.ticks - customize how ticks are generated and formatted.\naxis.tickArguments - customize how ticks are generated and formatted.\naxis.tickValues - set the tick values explicitly.\naxis.tickFormat - set the tick format explicitly.\naxis.tickSize - set the size of the ticks.\naxis.tickSizeInner - set the size of inner ticks.\naxis.tickSizeOuter - set the size of outer (extent) ticks.\naxis.tickPadding - set the padding between ticks and labels."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#brushes-d3-brush",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#brushes-d3-brush",
    "title": "D3 API Reference",
    "section": "",
    "text": "Select a one- or two-dimensional region using the mouse or touch.\n\nd3.brush - create a new two-dimensional brush.\nd3.brushX - create a brush along the x-dimension.\nd3.brushY - create a brush along the y-dimension.\nbrush - apply the brush to a selection.\nbrush.move - move the brush selection.\nbrush.clear - clear the brush selection.\nbrush.extent - define the brushable region.\nbrush.filter - control which input events initiate brushing.\nbrush.touchable - set the touch support detector.\nbrush.keyModifiers - enable or disable key interaction.\nbrush.handleSize - set the size of the brush handles.\nbrush.on - listen for brush events.\nd3.brushSelection - get the brush selection for a given node."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#chords-d3-chord",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#chords-d3-chord",
    "title": "D3 API Reference",
    "section": "",
    "text": "d3.chord - create a new chord layout.\nchord - compute the layout for the given matrix.\nchord.padAngle - set the padding between adjacent groups.\nchord.sortGroups - define the group order.\nchord.sortSubgroups - define the source and target order within groups.\nchord.sortChords - define the chord order across groups.\nd3.chordDirected - create a directed chord generator.\nd3.chordTranspose - create a transposed chord generator.\nd3.ribbon - create a ribbon shape generator.\nribbon - generate a ribbon shape.\nribbon.source - set the source accessor.\nribbon.target - set the target accessor.\nribbon.radius - set the ribbon source and target radius.\nribbon.sourceRadius - set the ribbon source radius.\nribbon.targetRadius - set the ribbon target radius.\nribbon.startAngle - set the ribbon source or target start angle.\nribbon.endAngle - set the ribbon source or target end angle.\nribbon.padAngle - set the pad angle accessor.\nribbon.context - set the render context.\nd3.ribbonArrow - create an arrow ribbon generator.\nribbonArrow.headRadius - set the arrowhead radius accessor."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#colors-d3-color",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#colors-d3-color",
    "title": "D3 API Reference",
    "section": "",
    "text": "Color manipulation and color space conversion.\n\nd3.color - parse the given CSS color specifier.\ncolor.opacity - the color‚Äôs opacity.\ncolor.rgb - compute the RGB equivalent of this color.\ncolor.copy - return a copy of this color.\ncolor.brighter - create a brighter copy of this color.\ncolor.darker - create a darker copy of this color.\ncolor.displayable - returns true if the color is displayable on standard hardware.\ncolor.formatHex - returns the hexadecimal RGB string representation of this color.\ncolor.formatHsl - returns the RGB string representation of this color.\ncolor.formatRgb - returns the HSL string representation of this color.\ncolor.toString - returns the RGB string representation of this color.\nd3.rgb - create a new RGB color.\nd3.hsl - create a new HSL color.\nd3.lab - create a new Lab color.\nd3.gray - create a new Lab gray.\nd3.hcl - create a new HCL color.\nd3.lch - create a new HCL color.\nd3.cubehelix - create a new Cubehelix color."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#color-schemes-d3-scale-chromatic",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#color-schemes-d3-scale-chromatic",
    "title": "D3 API Reference",
    "section": "",
    "text": "Color ramps and palettes for quantitative, ordinal and categorical scales.\n\n\n\nd3.schemeCategory10 - an array of ten categorical colors.\nd3.schemeAccent - an array of eight categorical colors.\nd3.schemeDark2 - an array of eight categorical colors.\nd3.schemePaired - an array of twelve categorical colors.\nd3.schemePastel1 - an array of nine categorical colors.\nd3.schemePastel2 - an array of eight categorical colors.\nd3.schemeSet1 - an array of nine categorical colors.\nd3.schemeSet2 - an array of eight categorical colors.\nd3.schemeSet3 - an array of twelve categorical colors.\nd3.schemeTableau10 - an array of ten categorical colors.\n\n\n\n\n\nd3.interpolateBrBG - ColorBrewer BrBG interpolator.\nd3.interpolatePiYG - ColorBrewer PiYG interpolator.\nd3.interpolatePRGn - ColorBrewer PRGn interpolator.\nd3.interpolatePuOr - ColorBrewer PuOr interpolator.\nd3.interpolateRdBu - ColorBrewer RdBu interpolator.\nd3.interpolateRdGy - ColorBrewer RdGy interpolator.\nd3.interpolateRdYlBu - ColorBrewer RdYlBu interpolator.\nd3.interpolateRdYlGn - ColorBrewer RdYlGn interpolator.\nd3.interpolateSpectral - ColorBrewer spectral interpolator.\nd3.schemeBrBG - ColorBrewer BrBG scheme.\nd3.schemePiYG - ColorBrewer PiYG scheme.\nd3.schemePRGn - ColorBrewer PRGn scheme.\nd3.schemePuOr - ColorBrewer PuOr scheme.\nd3.schemeRdBu - ColorBrewer RdBu scheme.\nd3.schemeRdGy - ColorBrewer RdGy scheme.\nd3.schemeRdYlBu - ColorBrewer RdYlBu scheme.\nd3.schemeRdYlGn - ColorBrewer RdYlGn scheme.\nd3.schemeSpectral - ColorBrewer spectral scheme.\n\n\n\n\n\nd3.interpolateBlues -\nd3.interpolateGreens -\nd3.interpolateGreys -\nd3.interpolateOranges -\nd3.interpolatePurples -\nd3.interpolateReds -\nd3.schemeBlues -\nd3.schemeGreens -\nd3.schemeGreys -\nd3.schemeOranges -\nd3.schemePurples -\nd3.schemeReds -\n\n\n\n\n\nd3.interpolateBuGn - ColorBrewer BuGn interpolator.\nd3.interpolateBuPu - ColorBrewer BuPu interpolator.\nd3.interpolateCividis - cividis interpolator.\nd3.interpolateCool - cool interpolator.\nd3.interpolateCubehelixDefault - cubehelix interpolator.\nd3.interpolateGnBu - ColorBrewer GnBu interpolator.\nd3.interpolateInferno - inferno interpolator.\nd3.interpolateMagma - magma interpolator.\nd3.interpolateOrRd - ColorBrewer OrRd interpolator.\nd3.interpolatePlasma - plasma interpolator.\nd3.interpolatePuBu - ColorBrewer PuBu interpolator.\nd3.interpolatePuBuGn - ColorBrewer PuBuGn interpolator.\nd3.interpolatePuRd - ColorBrewer PuRd interpolator.\nd3.interpolateRdPu - ColorBrewer RdPu interpolator.\nd3.interpolateTurbo - turbo interpolator.\nd3.interpolateViridis - viridis interpolator.\nd3.interpolateWarm - warm interpolator.\nd3.interpolateYlGn - ColorBrewer YlGn interpolator.\nd3.interpolateYlGnBu - ColorBrewer YlGnBu interpolator.\nd3.interpolateYlOrBr - ColorBrewer YlOrBr interpolator.\nd3.interpolateYlOrRd - ColorBrewer YlOrRd interpolator.\nd3.schemeBuGn - ColorBrewer BuGn scheme.\nd3.schemeBuPu - ColorBrewer BuPu scheme.\nd3.schemeGnBu - ColorBrewer GnBu scheme.\nd3.schemeOrRd - ColorBrewer OrRd scheme.\nd3.schemePuBu - ColorBrewer PuBu scheme.\nd3.schemePuBuGn - ColorBrewer PuBuGn scheme.\nd3.schemePuRd - ColorBrewer PuRd scheme.\nd3.schemeRdPu - ColorBrewer RdPu scheme.\nd3.schemeYlGn - ColorBrewer YlGn scheme.\nd3.schemeYlGnBu - ColorBrewer YlGnBu scheme.\nd3.schemeYlOrBr - ColorBrewer YlOrBr scheme.\nd3.schemeYlOrRd - ColorBrewer YlOrRd scheme.\n\n\n\n\n\nd3.interpolateRainbow - the ‚Äúless-angry‚Äù rainbow\nd3.interpolateSinebow - the ‚Äúsinebow‚Äù smooth rainbow"
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#contours-d3-contour",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#contours-d3-contour",
    "title": "D3 API Reference",
    "section": "",
    "text": "Compute contour polygons using marching squares.\n\nd3.contours - create a new contour generator.\ncontours - compute the contours for a given grid of values.\ncontours.contour - compute a contour for a given value.\ncontours.size - set the size of a contour generator.\ncontours.smooth - set whether or not the generated contours are smoothed.\ncontours.thresholds - set the thresholds of a contour generator.\nd3.contourDensity - create a new density estimator.\ndensity - estimate the density of a given array of samples.\ndensity.x - set the x accessor of the density estimator.\ndensity.y - set the y accessor of the density estimator.\ndensity.weight - set the weight accessor of the density estimator.\ndensity.size - set the size of the density estimator.\ndensity.cellSize - set the cell size of the density estimator.\ndensity.thresholds - set the thresholds of the density estimator.\ndensity.bandwidth - set the bandwidth of the density estimator."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#voronoi-diagrams-d3-delaunay",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#voronoi-diagrams-d3-delaunay",
    "title": "D3 API Reference",
    "section": "",
    "text": "Compute the Voronoi diagram of a set of two-dimensional points.\n\nnew Delaunay - create a delaunay triangulation for an array of point coordinates.\nDelaunay.from - create a delaunay triangulation for an iterable of points.\ndelaunay.points - the coordinates of the points.\ndelaunay.halfedges - the delaunay halfedges.\ndelaunay.hull - the convex hull as point indices.\ndelaunay.triangles - the delaunay triangles.\ndelaunay.inedges - the delaunay inedges\ndelaunay.find - find the closest point in the delaunay triangulation.\ndelaunay.neighbors - the neighbors of a point in the delaunay triangulation.\ndelaunay.render - render the edges of the delaunay triangulation.\ndelaunay.renderHull - render the convex hull.\ndelaunay.renderTriangle - render a triangle.\ndelaunay.renderPoints - render the points.\ndelaunay.hullPolygon - the closed convex hull as point coordinates.\ndelaunay.trianglePolygons - iterate over all the triangles as polygons.\ndelaunay.trianglePolygon - return a triangle as a polygon.\ndelaunay.update - update a delaunay triangulation in place.\ndelaunay.voronoi - compute the voronoi diagram associated with a delaunay triangulation.\nvoronoi.delaunay - the voronoi diagram‚Äôs source delaunay triangulation.\nvoronoi.circumcenters - the triangles‚Äô circumcenters.\nvoronoi.vectors - directions for the outer (infinite) cells of the voronoi diagram.\nvoronoi.xmin - set the xmin bound of the extent.\nvoronoi.ymin - set the ymin bound of the extent.\nvoronoi.xmax - set the xmax bound of the extent.\nvoronoi.ymax - set the ymax bound of the extent.\nvoronoi.contains - test whether a point is inside a voronoi cell.\nvoronoi.neighbors - the neighbors of a point in the voronoi diagram.\nvoronoi.render - render the mesh of voronoi cells.\nvoronoi.renderBounds - render the extent.\nvoronoi.renderCell - render a voronoi cell.\nvoronoi.cellPolygons - iterate over all the cells as polygons.\nvoronoi.cellPolygon - return a cell as a polygon.\nvoronoi.update - update a voronoi diagram in place."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#dispatches-d3-dispatch",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#dispatches-d3-dispatch",
    "title": "D3 API Reference",
    "section": "",
    "text": "Separate concerns using named callbacks.\n\nd3.dispatch - create a custom event dispatcher.\ndispatch.on - register or unregister an event listener.\ndispatch.copy - create a copy of a dispatcher.\ndispatch.call - dispatch an event to registered listeners.\ndispatch.apply - dispatch an event to registered listeners."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#dragging-d3-drag",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#dragging-d3-drag",
    "title": "D3 API Reference",
    "section": "",
    "text": "Drag and drop SVG, HTML or Canvas using mouse or touch input.\n\nd3.drag - create a drag behavior.\ndrag - apply the drag behavior to a selection.\ndrag.container - set the coordinate system.\ndrag.filter - ignore some initiating input events.\ndrag.touchable - set the touch support detector.\ndrag.subject - set the thing being dragged.\ndrag.clickDistance - set the click distance threshold.\ndrag.on - listen for drag events.\nd3.dragDisable - prevent native drag-and-drop and text selection.\nd3.dragEnable - enable native drag-and-drop and text selection.\nevent.on - listen for drag events on the current gesture."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#delimiter-separated-values-d3-dsv",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#delimiter-separated-values-d3-dsv",
    "title": "D3 API Reference",
    "section": "",
    "text": "Parse and format delimiter-separated values, most commonly CSV and TSV.\n\nd3.csvParse - parse the given CSV string, returning an array of objects.\nd3.csvParseRows - parse the given CSV string, returning an array of rows.\nd3.csvFormat - format the given array of objects as CSV.\nd3.csvFormatBody - format the given array of objects as CSV.\nd3.csvFormatRows - format the given array of rows as CSV.\nd3.csvFormatRow - format the given row as CSV.\nd3.csvFormatValue - format the given value as CSV.\nd3.tsvParse - parse the given TSV string, returning an array of objects.\nd3.tsvParseRows - parse the given TSV string, returning an array of rows.\nd3.tsvFormat - format the given array of objects as TSV.\nd3.tsvFormatBody - format the given array of objects as TSV.\nd3.tsvFormatRows - format the given array of rows as TSV.\nd3.tsvFormatRow - format the given row as TSV.\nd3.tsvFormatValue - format the given value as TSV.\nd3.dsvFormat - create a new parser and formatter for the given delimiter.\ndsv.parse - parse the given string, returning an array of objects.\ndsv.parseRows - parse the given string, returning an array of rows.\ndsv.format - format the given array of objects.\ndsv.formatBody - format the given array of objects.\ndsv.formatRows - format the given array of rows.\ndsv.formatRow - format the given row.\ndsv.formatValue - format the given value.\nd3.autoType - automatically infer value types for the given object."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#easings-d3-ease",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#easings-d3-ease",
    "title": "D3 API Reference",
    "section": "",
    "text": "Easing functions for smooth animation.\n\nease - ease the given normalized time.\nd3.easeLinear - linear easing; the identity function.\nd3.easePolyIn - polynomial easing; raises time to the given power.\nd3.easePolyOut - reverse polynomial easing.\nd3.easePoly - an alias for easePolyInOut.\nd3.easePolyInOut - symmetric polynomial easing.\npoly.exponent - specify the polynomial exponent.\nd3.easeQuadIn - quadratic easing; squares time.\nd3.easeQuadOut - reverse quadratic easing.\nd3.easeQuad - an alias for easeQuadInOut.\nd3.easeQuadInOut - symmetric quadratic easing.\nd3.easeCubicIn - cubic easing; cubes time.\nd3.easeCubicOut - reverse cubic easing.\nd3.easeCubic - an alias for easeCubicInOut.\nd3.easeCubicInOut - symmetric cubic easing.\nd3.easeSinIn - sinusoidal easing.\nd3.easeSinOut - reverse sinusoidal easing.\nd3.easeSin - an alias for easeSinInOut.\nd3.easeSinInOut - symmetric sinusoidal easing.\nd3.easeExpIn - exponential easing.\nd3.easeExpOut - reverse exponential easing.\nd3.easeExp - an alias for easeExpInOut.\nd3.easeExpInOut - symmetric exponential easing.\nd3.easeCircleIn - circular easing.\nd3.easeCircleOut - reverse circular easing.\nd3.easeCircle - an alias for easeCircleInOut.\nd3.easeCircleInOut - symmetric circular easing.\nd3.easeElasticIn - elastic easing, like a rubber band.\nd3.easeElastic - an alias for easeElasticOut.\nd3.easeElasticOut - reverse elastic easing.\nd3.easeElasticInOut - symmetric elastic easing.\nelastic.amplitude - specify the elastic amplitude.\nelastic.period - specify the elastic period.\nd3.easeBackIn - anticipatory easing, like a dancer bending his knees before jumping.\nd3.easeBackOut - reverse anticipatory easing.\nd3.easeBack - an alias for easeBackInOut.\nd3.easeBackInOut - symmetric anticipatory easing.\nback.overshoot - specify the amount of overshoot.\nd3.easeBounceIn - bounce easing, like a rubber ball.\nd3.easeBounce - an alias for easeBounceOut.\nd3.easeBounceOut - reverse bounce easing.\nd3.easeBounceInOut - symmetric bounce easing."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#fetches-d3-fetch",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#fetches-d3-fetch",
    "title": "D3 API Reference",
    "section": "",
    "text": "Convenience methods on top of the Fetch API.\n\nd3.blob - get a file as a blob.\nd3.buffer - get a file as an array buffer.\nd3.csv - get a comma-separated values (CSV) file.\nd3.dsv - get a delimiter-separated values (CSV) file.\nd3.html - get an HTML file.\nd3.image - get an image.\nd3.json - get a JSON file.\nd3.svg - get an SVG file.\nd3.text - get a plain text file.\nd3.tsv - get a tab-separated values (TSV) file.\nd3.xml - get an XML file."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#forces-d3-force",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#forces-d3-force",
    "title": "D3 API Reference",
    "section": "",
    "text": "Force-directed graph layout using velocity Verlet integration.\n\nd3.forceSimulation - create a new force simulation.\nsimulation.restart - reheat and restart the simulation‚Äôs timer.\nsimulation.stop - stop the simulation‚Äôs timer.\nsimulation.tick - advance the simulation one step.\nsimulation.nodes - set the simulation‚Äôs nodes.\nsimulation.alpha - set the current alpha.\nsimulation.alphaMin - set the minimum alpha threshold.\nsimulation.alphaDecay - set the alpha exponential decay rate.\nsimulation.alphaTarget - set the target alpha.\nsimulation.velocityDecay - set the velocity decay rate.\nsimulation.force - add or remove a force.\nsimulation.find - find the closest node to the given position.\nsimulation.randomSource - set the simulation‚Äôs random source.\nsimulation.on - add or remove an event listener.\nforce - apply the force.\nforce.initialize - initialize the force with the given nodes.\nd3.forceCenter - create a centering force.\ncenter.x - set the center x-coordinate.\ncenter.y - set the center y-coordinate.\ncenter.strength - set the strength of the centering force.\nd3.forceCollide - create a circle collision force.\ncollide.radius - set the circle radius.\ncollide.strength - set the collision resolution strength.\ncollide.iterations - set the number of iterations.\nd3.forceLink - create a link force.\nlink.links - set the array of links.\nlink.id - link nodes by numeric index or string identifier.\nlink.distance - set the link distance.\nlink.strength - set the link strength.\nlink.iterations - set the number of iterations.\nd3.forceManyBody - create a many-body force.\nmanyBody.strength - set the force strength.\nmanyBody.theta - set the Barnes‚ÄìHut approximation accuracy.\nmanyBody.distanceMin - limit the force when nodes are close.\nmanyBody.distanceMax - limit the force when nodes are far.\nd3.forceX - create an x-positioning force.\nx.strength - set the force strength.\nx.x - set the target x-coordinate.\nd3.forceY - create an y-positioning force.\ny.strength - set the force strength.\ny.y - set the target y-coordinate.\nd3.forceRadial - create a radial positioning force.\nradial.strength - set the force strength.\nradial.radius - set the target radius.\nradial.x - set the target center x-coordinate.\nradial.y - set the target center y-coordinate."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#number-formats-d3-format",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#number-formats-d3-format",
    "title": "D3 API Reference",
    "section": "",
    "text": "Format numbers for human consumption.\n\nd3.format - alias for locale.format on the default locale.\nd3.formatPrefix - alias for locale.formatPrefix on the default locale.\nlocale.format - create a number format.\nlocale.formatPrefix - create a SI-prefix number format.\nd3.formatSpecifier - parse a number format specifier.\nnew d3.FormatSpecifier - augments a number format specifier object.\nd3.precisionFixed - compute decimal precision for fixed-point notation.\nd3.precisionPrefix - compute decimal precision for SI-prefix notation.\nd3.precisionRound - compute significant digits for rounded notation.\nd3.formatLocale - define a custom locale.\nd3.formatDefaultLocale - define the default locale."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#geographies-d3-geo",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#geographies-d3-geo",
    "title": "D3 API Reference",
    "section": "",
    "text": "Geographic projections, shapes and math.\n\n\n\nd3.geoPath - create a new geographic path generator.\npath - project and render the specified feature.\npath.area - compute the projected planar area of a given feature.\npath.bounds - compute the projected planar bounding box of a given feature.\npath.centroid - compute the projected planar centroid of a given feature.\npath.measure - compute the projected planar length of a given feature.\npath.projection - set the geographic projection.\npath.context - set the render context.\npath.pointRadius - set the radius to display point features.\n\n\n\n\n\nprojection - project the specified point from the sphere to the plane.\nprojection.invert - unproject the specified point from the plane to the sphere.\nprojection.stream - wrap the specified stream to project geometry.\nprojection.preclip - set the projection‚Äôs spherical clipping function.\nprojection.postclip - set the projection‚Äôs cartesian clipping function.\nprojection.clipAngle - set the radius of the clip circle.\nprojection.clipExtent - set the viewport clip extent, in pixels.\nprojection.scale - set the scale factor.\nprojection.translate - set the translation offset.\nprojection.center - set the center point.\nprojection.angle - set the post-projection rotation.\nprojection.reflectX - reflect the x-dimension.\nprojection.reflectY - reflect the y-dimension.\nprojection.rotate - set the three-axis spherical rotation angles.\nprojection.precision - set the precision threshold for adaptive sampling.\nprojection.fitExtent - set the scale and translate to fit a GeoJSON object.\nprojection.fitSize - set the scale and translate to fit a GeoJSON object.\nprojection.fitWidth - set the scale and translate to fit a GeoJSON object.\nprojection.fitHeight - set the scale and translate to fit a GeoJSON object.\nd3.geoAzimuthalEqualArea - the azimuthal equal-area projection.\nd3.geoAzimuthalEqualAreaRaw - the raw azimuthal equal-area projection.\nd3.geoAzimuthalEquidistant - the azimuthal equidistant projection.\nd3.geoAzimuthalEquidistantRaw - the raw azimuthal equidistant projection.\nd3.geoGnomonic - the gnomonic projection.\nd3.geoGnomonicRaw - the raw gnomonic projection.\nd3.geoOrthographic - the azimuthal orthographic projection.\nd3.geoOrthographicRaw - the raw azimuthal orthographic projection.\nd3.geoStereographic - the azimuthal stereographic projection.\nd3.geoStereographicRaw - the raw azimuthal stereographic projection.\nd3.geoEqualEarth - the Equal Earth projection.\nd3.geoEqualEarthRaw - the raw Equal Earth projection.\nd3.geoAlbersUsa - a composite Albers projection for the United States.\nconic.parallels - set the two standard parallels.\nd3.geoAlbers - the Albers equal-area conic projection.\nd3.geoConicConformal - the conic conformal projection.\nd3.geoConicConformalRaw - the raw conic conformal projection.\nd3.geoConicEqualArea - the conic equal-area (Albers) projection.\nd3.geoConicEqualAreaRaw - the raw conic equal-area (Albers) projection.\nd3.geoConicEquidistant - the conic equidistant projection.\nd3.geoConicEquidistantRaw - the raw conic equidistant projection.\nd3.geoEquirectangular - the equirectangular (plate carre√©) projection.\nd3.geoEquirectangularRaw - the raw equirectangular (plate carre√©) projection.\nd3.geoMercator - the spherical Mercator projection.\nd3.geoMercatorRaw - the raw Mercator projection.\nd3.geoTransverseMercator - the transverse spherical Mercator projection.\nd3.geoTransverseMercatorRaw - the raw transverse spherical Mercator projection.\nd3.geoNaturalEarth1 - the Equal Earth projection, version 1.\nd3.geoNaturalEarth1Raw - the raw Equal Earth projection, version 1\n\n\n\n\n\nproject - project the specified point from the sphere to the plane.\nproject.invert - unproject the specified point from the plane to the sphere.\nd3.geoProjection - create a custom projection.\nd3.geoProjectionMutator - create a custom configurable projection.\n\n\n\n\n\nd3.geoArea - compute the spherical area of a given feature.\nd3.geoBounds - compute the latitude-longitude bounding box for a given feature.\nd3.geoCentroid - compute the spherical centroid of a given feature.\nd3.geoDistance - compute the great-arc distance between two points.\nd3.geoLength - compute the length of a line string or the perimeter of a polygon.\nd3.geoInterpolate - interpolate between two points along a great arc.\nd3.geoContains - test whether a point is inside a given feature.\nd3.geoRotation - create a rotation function for the specified angles.\nrotation - rotate the given point around the sphere.\nrotation.invert - unrotate the given point around the sphere.\n\n\n\n\n\nd3.geoCircle - create a circle generator.\ncircle - generate a piecewise circle as a Polygon.\ncircle.center - specify the circle center in latitude and longitude.\ncircle.radius - specify the angular radius in degrees.\ncircle.precision - specify the precision of the piecewise circle.\nd3.geoGraticule - create a graticule generator.\ngraticule - generate a MultiLineString of meridians and parallels.\ngraticule.lines - generate an array of LineStrings of meridians and parallels.\ngraticule.outline - generate a Polygon of the graticule‚Äôs extent.\ngraticule.extent - get or set the major & minor extents.\ngraticule.extentMajor - get or set the major extent.\ngraticule.extentMinor - get or set the minor extent.\ngraticule.step - get or set the major & minor step intervals.\ngraticule.stepMajor - get or set the major step intervals.\ngraticule.stepMinor - get or set the minor step intervals.\ngraticule.precision - get or set the latitudinal precision.\nd3.geoGraticule10 - generate the default 10¬∞ global graticule.\n\n\n\n\n\nd3.geoStream - convert a GeoJSON object to a geometry stream.\nstream.point - indicates a point with the specified coordinates.\nstream.lineStart - indicates the start of a line or ring.\nstream.lineEnd - indicates the end of a line or ring.\nstream.polygonStart - indicates the start of a polygon.\nstream.polygonEnd - indicates the end of a polygon.\nstream.sphere - indicates the sphere.\n\n\n\n\n\nd3.geoTransform - define a custom geometry transform.\nd3.geoIdentity - scale, translate or clip planar geometry.\n\n\n\n\n\npreclip - pre-clipping in geographic coordinates.\npostclip - post-clipping in planar coordinates.\nd3.geoClipAntimeridian - cuts spherical geometries that cross the antimeridian.\nd3.geoClipCircle - clips spherical geometries to a small circle.\nd3.geoClipRectangle - clips planar geometries to a rectangular viewport."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#hierarchies-d3-hierarchy",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#hierarchies-d3-hierarchy",
    "title": "D3 API Reference",
    "section": "",
    "text": "Layout algorithms for visualizing hierarchical data.\n\nd3.hierarchy - constructs a root node from hierarchical data.\nnode.ancestors - generate an array of ancestors.\nnode.descendants - generate an array of descendants.\nnode.leaves - generate an array of leaves.\nnode.find - find a node in the hierarchy.\nnode.path - generate the shortest path to another node.\nnode.links - generate an array of links.\nnode.sum - evaluate and aggregate quantitative values.\nnode.count - count the number of leaves.\nnode.sort - sort all descendant siblings.\nnode[Symbol.iterator] - iterate on a hierarchy.\nnode.each - breadth-first traversal.\nnode.eachAfter - post-order traversal.\nnode.eachBefore - pre-order traversal.\nnode.copy - copy a hierarchy.\nd3.stratify - create a new stratify operator.\nstratify - construct a root node from tabular data.\nstratify.id - set the node id accessor.\nstratify.parentId - set the parent node id accessor.\nd3.cluster - create a new cluster (dendrogram) layout.\ncluster - layout the specified hierarchy in a dendrogram.\ncluster.size - set the layout size.\ncluster.nodeSize - set the node size.\ncluster.separation - set the separation between leaves.\nd3.tree - create a new tidy tree layout.\ntree - layout the specified hierarchy in a tidy tree.\ntree.size - set the layout size.\ntree.nodeSize - set the node size.\ntree.separation - set the separation between nodes.\nd3.treemap - create a new treemap layout.\ntreemap - layout the specified hierarchy as a treemap.\ntreemap.tile - set the tiling method.\ntreemap.size - set the layout size.\ntreemap.round - set whether the output coordinates are rounded.\ntreemap.padding - set the padding.\ntreemap.paddingInner - set the padding between siblings.\ntreemap.paddingOuter - set the padding between parent and children.\ntreemap.paddingTop - set the padding between the parent‚Äôs top edge and children.\ntreemap.paddingRight - set the padding between the parent‚Äôs right edge and children.\ntreemap.paddingBottom - set the padding between the parent‚Äôs bottom edge and children.\ntreemap.paddingLeft - set the padding between the parent‚Äôs left edge and children.\nd3.treemapBinary - tile using a balanced binary tree.\nd3.treemapDice - tile into a horizontal row.\nd3.treemapSlice - tile into a vertical column.\nd3.treemapSliceDice - alternate between slicing and dicing.\nd3.treemapSquarify - tile using squarified rows per Bruls et. al.\nd3.treemapResquarify - like d3.treemapSquarify, but performs stable updates.\nsquarify.ratio - set the desired rectangle aspect ratio.\nd3.partition - create a new partition (icicle or sunburst) layout.\npartition - layout the specified hierarchy as a partition diagram.\npartition.size - set the layout size.\npartition.round - set whether the output coordinates are rounded.\npartition.padding - set the padding.\nd3.pack - create a new circle-packing layout.\npack - layout the specified hierarchy using circle-packing.\npack.radius - set the radius accessor.\npack.size - set the layout size.\npack.padding - set the padding.\nd3.packSiblings - pack the specified array of circles.\nd3.packEnclose - enclose the specified array of circles."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#interpolators-d3-interpolate",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#interpolators-d3-interpolate",
    "title": "D3 API Reference",
    "section": "",
    "text": "Interpolate numbers, colors, strings, arrays, objects, whatever!\n\nd3.interpolate - interpolate arbitrary values.\nd3.interpolateNumber - interpolate numbers.\nd3.interpolateRound - interpolate integers.\nd3.interpolateString - interpolate strings with embedded numbers.\nd3.interpolateDate - interpolate dates.\nd3.interpolateArray - interpolate arrays of arbitrary values.\nd3.interpolateNumberArray - interpolate arrays of numbers.\nd3.interpolateObject - interpolate arbitrary objects.\nd3.interpolateTransformCss - interpolate 2D CSS transforms.\nd3.interpolateTransformSvg - interpolate 2D SVG transforms.\nd3.interpolateZoom - zoom and pan between two views.\ninterpolateZoom.rho - set the curvature rho of the zoom interpolator.\nd3.interpolateDiscrete - generate a discrete interpolator from a set of values.\nd3.quantize - generate uniformly-spaced samples from an interpolator.\nd3.interpolateRgb - interpolate RGB colors.\nd3.interpolateRgbBasis - generate a B-spline through a set of colors.\nd3.interpolateRgbBasisClosed - generate a closed B-spline through a set of colors.\nd3.interpolateHsl - interpolate HSL colors.\nd3.interpolateHslLong - interpolate HSL colors, the long way.\nd3.interpolateLab - interpolate Lab colors.\nd3.interpolateHcl - interpolate HCL colors.\nd3.interpolateHclLong - interpolate HCL colors, the long way.\nd3.interpolateCubehelix - interpolate Cubehelix colors.\nd3.interpolateCubehelixLong - interpolate Cubehelix colors, the long way.\ninterpolate.gamma - apply gamma correction during interpolation.\nd3.interpolateHue - interpolate a hue angle.\nd3.interpolateBasis - generate a B-spline through a set of values.\nd3.interpolateBasisClosed - generate a closed B-spline through a set of values.\nd3.piecewise - generate a piecewise linear interpolator from a set of values."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#paths-d3-path",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#paths-d3-path",
    "title": "D3 API Reference",
    "section": "",
    "text": "Serialize Canvas path commands to SVG.\n\nd3.path - create a new path serializer.\npath.moveTo - move to the given point.\npath.closePath - close the current subpath.\npath.lineTo - draw a straight line segment.\npath.quadraticCurveTo - draw a quadratic B√©zier segment.\npath.bezierCurveTo - draw a cubic B√©zier segment.\npath.arcTo - draw a circular arc segment.\npath.arc - draw a circular arc segment.\npath.rect - draw a rectangle.\npath.toString - serialize to an SVG path data string."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#polygons-d3-polygon",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#polygons-d3-polygon",
    "title": "D3 API Reference",
    "section": "",
    "text": "Geometric operations for two-dimensional polygons.\n\nd3.polygonArea - compute the area of the given polygon.\nd3.polygonCentroid - compute the centroid of the given polygon.\nd3.polygonHull - compute the convex hull of the given points.\nd3.polygonContains - test whether a point is inside a polygon.\nd3.polygonLength - compute the length of the given polygon‚Äôs perimeter."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#quadtrees-d3-quadtree",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#quadtrees-d3-quadtree",
    "title": "D3 API Reference",
    "section": "",
    "text": "Two-dimensional recursive spatial subdivision.\n\nd3.quadtree - create a new, empty quadtree.\nquadtree.x - set the x accessor.\nquadtree.y - set the y accessor.\nquadtree.extent - extend the quadtree to cover an extent.\nquadtree.cover - extend the quadtree to cover a point.\nquadtree.add - add a datum to a quadtree.\nquadtree.addAll - add an array of data to a quadtree.\nquadtree.remove - remove a datum from a quadtree.\nquadtree.removeAll - remove an array of data from a quadtree.\nquadtree.copy - create a copy of a quadtree.\nquadtree.root - get the quadtree‚Äôs root node.\nquadtree.data - retrieve all data from the quadtree.\nquadtree.size - count the number of data in the quadtree.\nquadtree.find - quickly find the closest datum in a quadtree.\nquadtree.visit - selectively visit nodes in a quadtree.\nquadtree.visitAfter - visit all nodes in a quadtree."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#random-numbers-d3-random",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#random-numbers-d3-random",
    "title": "D3 API Reference",
    "section": "",
    "text": "Generate random numbers from various distributions.\n\nd3.randomUniform - from a uniform distribution.\nd3.randomInt - from a uniform integer distribution.\nd3.randomNormal - from a normal distribution.\nd3.randomLogNormal - from a log-normal distribution.\nd3.randomBates - from a Bates distribution.\nd3.randomIrwinHall - from an Irwin‚ÄìHall distribution.\nd3.randomExponential - from an exponential distribution.\nd3.randomPareto - from a Pareto distribution.\nd3.randomBernoulli - from a Bernoulli distribution.\nd3.randomGeometric - from a geometric distribution.\nd3.randomBinomial - from a binomial distribution.\nd3.randomGamma - from a gamma distribution.\nd3.randomBeta - from a beta distribution.\nd3.randomWeibull - from a Weibull, Gumbel or Fr√©chet distribution.\nd3.randomCauchy - from a Cauchy distribution.\nd3.randomLogistic - from a logistic distribution.\nd3.randomPoisson - from a Poisson distribution.\nrandom.source - set the source of randomness.\nd3.randomLcg - a seeded pseudorandom number generator."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#scales-d3-scale",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#scales-d3-scale",
    "title": "D3 API Reference",
    "section": "",
    "text": "Encodings that map abstract data to visual representation.\n\n\nMap a continuous, quantitative domain to a continuous range.\n\ncontinuous - compute the range value corresponding to a given domain value.\ncontinuous.invert - compute the domain value corresponding to a given range value.\ncontinuous.domain - set the input domain.\ncontinuous.range - set the output range.\ncontinuous.rangeRound - set the output range and enable rounding.\ncontinuous.clamp - enable clamping to the domain or range.\ncontinuous.unknown - set the output value for unknown inputs.\ncontinuous.interpolate - set the output interpolator.\ncontinuous.ticks - compute representative values from the domain.\ncontinuous.tickFormat - format ticks for human consumption.\ncontinuous.nice - extend the domain to nice round numbers.\ncontinuous.copy - create a copy of this scale.\nd3.tickFormat - format ticks for human consumption.\nd3.scaleLinear - create a quantitative linear scale.\nd3.scalePow - create a quantitative power scale.\npow - compute the range value corresponding to a given domain value.\npow.invert - compute the domain value corresponding to a given range value.\npow.exponent - set the power exponent.\npow.domain - set the input domain.\npow.range - set the output range.\npow.rangeRound - set the output range and enable rounding.\npow.clamp - enable clamping to the domain or range.\npow.interpolate - set the output interpolator.\npow.ticks - compute representative values from the domain.\npow.tickFormat - format ticks for human consumption.\npow.nice - extend the domain to nice round numbers.\npow.copy - create a copy of this scale.\nd3.scaleSqrt - create a quantitative power scale with exponent 0.5.\nd3.scaleLog - create a quantitative logarithmic scale.\nlog - compute the range value corresponding to a given domain value.\nlog.invert - compute the domain value corresponding to a given range value.\nlog.base - set the logarithm base.\nlog.domain - set the input domain.\nlog.range - set the output range.\nlog.rangeRound - set the output range and enable rounding.\nlog.clamp - enable clamping to the domain or range.\nlog.interpolate - set the output interpolator.\nlog.ticks - compute representative values from the domain.\nlog.tickFormat - format ticks for human consumption.\nlog.nice - extend the domain to nice round numbers.\nlog.copy - create a copy of this scale.\nd3.scaleSymlog - create a symmetric logarithmic scale.\nsymlog.constant - set the constant of a symlog scale.\nd3.scaleIdentity - creates an identity scale.\nd3.scaleRadial - creates a radial scale.\nd3.scaleTime - create a linear scale for time.\ntime - compute the range value corresponding to a given domain value.\ntime.invert - compute the domain value corresponding to a given range value.\ntime.domain - set the input domain.\ntime.range - set the output range.\ntime.rangeRound - set the output range and enable rounding.\ntime.clamp - enable clamping to the domain or range.\ntime.interpolate - set the output interpolator.\ntime.ticks - compute representative values from the domain.\ntime.tickFormat - format ticks for human consumption.\ntime.nice - extend the domain to nice round times.\ntime.copy - create a copy of this scale.\nd3.scaleUtc - create a linear scale for UTC.\n\n\n\n\nMap a continuous, quantitative domain to a continuous, fixed interpolator.\n\nd3.scaleSequential - create a sequential scale.\nsequential - compute the range value corresponding to an input value.\nsequential.domain - set the input domain.\nsequential.clamp - enable clamping to the domain.\nsequential.interpolator - set the scale‚Äôs output interpolator.\nsequential.range - set the output range.\nsequential.rangeRound - set the output range and enable rounding.\nsequential.copy - create a copy of this scale.\nd3.scaleSequentialLog - create a logarithmic sequential scale.\nd3.scaleSequentialPow - create a power sequential scale.\nd3.scaleSequentialSqrt - create a power sequential scale with exponent 0.5.\nd3.scaleSequentialSymlog - create a symmetric logarithmic sequential scale.\nd3.scaleSequentialQuantile - create a sequential scale using a p-quantile transform.\nsequentialQuantile.quantiles - return the scale‚Äôs quantiles.\n\n\n\n\nMap a continuous, quantitative domain to a continuous, fixed interpolator.\n\nd3.scaleDiverging - create a diverging scale.\ndiverging - compute the range value corresponding to an input value.\ndiverging.domain - set the input domain.\ndiverging.clamp - enable clamping to the domain or range.\ndiverging.interpolator - set the scale‚Äôs output interpolator.\ndiverging.range - set the output range.\ndiverging.rangeRound - set the output range and enable rounding.\ndiverging.copy - create a copy of this scale.\ndiverging.unknown - set the output value for unknown inputs.\nd3.scaleDivergingLog - create a diverging logarithmic scale.\nd3.scaleDivergingPow - create a diverging power scale.\nd3.scaleDivergingSqrt - create a diverging power scale with exponent 0.5.\nd3.scaleDivergingSymlog - create a diverging symmetric logarithmic scale.\n\n\n\n\nMap a continuous, quantitative domain to a discrete range.\n\nd3.scaleQuantize - create a uniform quantizing linear scale.\nquantize - compute the range value corresponding to a given domain value.\nquantize.invertExtent - compute the domain values corresponding to a given range value.\nquantize.domain - set the input domain.\nquantize.range - set the output range.\nquantize.ticks - compute representative values from the domain.\nquantize.tickFormat - format ticks for human consumption.\nquantize.nice - extend the domain to nice round numbers.\nquantize.thresholds - return the array of computed thresholds within the domain.\nquantize.copy - create a copy of this scale.\nd3.scaleQuantile - create a quantile quantizing linear scale.\nquantile - compute the range value corresponding to a given domain value.\nquantile.invertExtent - compute the domain values corresponding to a given range value.\nquantile.domain - set the input domain.\nquantile.range - set the output range.\nquantile.quantiles - get the quantile thresholds.\nquantile.copy - create a copy of this scale.\nd3.scaleThreshold - create an arbitrary quantizing linear scale.\nthreshold - compute the range value corresponding to a given domain value.\nthreshold.invertExtent - compute the domain values corresponding to a given range value.\nthreshold.domain - set the input domain.\nthreshold.range - set the output range.\nthreshold.copy - create a copy of this scale.\n\n\n\n\nMap a discrete domain to a discrete range.\n\nd3.scaleOrdinal - create an ordinal scale.\nordinal - compute the range value corresponding to a given domain value.\nordinal.domain - set the input domain.\nordinal.range - set the output range.\nordinal.unknown - set the output value for unknown inputs.\nordinal.copy - create a copy of this scale.\nd3.scaleImplicit - a special unknown value for implicit domains.\nd3.scaleBand - create an ordinal band scale.\nband - compute the band start corresponding to a given domain value.\nband.domain - set the input domain.\nband.range - set the output range.\nband.rangeRound - set the output range and enable rounding.\nband.round - enable rounding.\nband.paddingInner - set padding between bands.\nband.paddingOuter - set padding outside the first and last bands.\nband.padding - set padding outside and between bands.\nband.align - set band alignment, if there is extra space.\nband.bandwidth - get the width of each band.\nband.step - get the distance between the starts of adjacent bands.\nband.copy - create a copy of this scale.\nd3.scalePoint - create an ordinal point scale.\npoint - compute the point corresponding to a given domain value.\npoint.domain - set the input domain.\npoint.range - set the output range.\npoint.rangeRound - set the output range and enable rounding.\npoint.round - enable rounding.\npoint.padding - set padding outside the first and last point.\npoint.align - set point alignment, if there is extra space.\npoint.bandwidth - returns zero.\npoint.step - get the distance between the starts of adjacent points.\npoint.copy - create a copy of this scale."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#selections-d3-selection",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#selections-d3-selection",
    "title": "D3 API Reference",
    "section": "",
    "text": "Transform the DOM by selecting elements and joining to data.\n\n\n\nd3.selection - select the root document element.\nd3.select - select an element from the document.\nd3.selectAll - select multiple elements from the document.\nselection.select - select a descendant element for each selected element.\nselection.selectAll - select multiple descendants for each selected element.\nselection.filter - filter elements based on data.\nselection.merge - merge this selection with another.\nselection.selectChild - select a child element for each selected element.\nselection.selectChildren - select the children elements for each selected element.\nselection.selection - return the selection.\nd3.matcher - test whether an element matches a selector.\nd3.selector - select an element.\nd3.selectorAll - select elements.\nd3.window - get a node‚Äôs owner window.\nd3.style - get a node‚Äôs current style value.\n\n\n\n\n\nselection.attr - get or set an attribute.\nselection.classed - get, add or remove CSS classes.\nselection.style - get or set a style property.\nselection.property - get or set a (raw) property.\nselection.text - get or set the text content.\nselection.html - get or set the inner HTML.\nselection.append - create, append and select new elements.\nselection.insert - create, insert and select new elements.\nselection.remove - remove elements from the document.\nselection.clone - insert clones of selected elements.\nselection.sort - sort elements in the document based on data.\nselection.order - reorders elements in the document to match the selection.\nselection.raise - reorders each element as the last child of its parent.\nselection.lower - reorders each element as the first child of its parent.\nd3.create - create and select a detached element.\nd3.creator - create an element by name.\n\n\n\n\n\nselection.data - bind elements to data.\nselection.join - enter, update or exit elements based on data.\nselection.enter - get the enter selection (data missing elements).\nselection.exit - get the exit selection (elements missing data).\nselection.datum - get or set element data (without joining).\n\n\n\n\n\nselection.on - add or remove event listeners.\nselection.dispatch - dispatch a custom event.\nd3.pointer - get the pointer‚Äôs position of an event.\nd3.pointers - get the pointers‚Äô positions of an event.\n\n\n\n\n\nselection.each - call a function for each element.\nselection.call - call a function with this selection.\nselection.empty - returns true if this selection is empty.\nselection.nodes - returns an array of all selected elements.\nselection.node - returns the first (non-null) element.\nselection.size - returns the count of elements.\nselection[Symbol.iterator] - iterate over the selection‚Äôs nodes.\n\n\n\n\n\nd3.local - declares a new local variable.\nlocal.set - set a local variable‚Äôs value.\nlocal.get - get a local variable‚Äôs value.\nlocal.remove - delete a local variable.\nlocal.toString - get the property identifier of a local variable.\n\n\n\n\n\nd3.namespace - qualify a prefixed XML name, such as ‚Äúxlink:href‚Äù.\nd3.namespaces - the built-in XML namespaces."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#shapes-d3-shape",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#shapes-d3-shape",
    "title": "D3 API Reference",
    "section": "",
    "text": "Graphical primitives for visualization.\n\n\nCircular or annular sectors, as in a pie or donut chart.\n\nd3.arc - create a new arc generator.\narc - generate an arc for the given datum.\narc.centroid - compute an arc‚Äôs midpoint.\narc.innerRadius - set the inner radius.\narc.outerRadius - set the outer radius.\narc.cornerRadius - set the corner radius, for rounded corners.\narc.startAngle - set the start angle.\narc.endAngle - set the end angle.\narc.padAngle - set the angle between adjacent arcs, for padded arcs.\narc.padRadius - set the radius at which to linearize padding.\narc.context - set the rendering context.\n\n\n\n\nCompute the necessary angles to represent a tabular dataset as a pie or donut chart.\n\nd3.pie - create a new pie generator.\npie - compute the arc angles for the given dataset.\npie.value - set the value accessor.\npie.sort - set the sort order comparator.\npie.sortValues - set the sort order comparator.\npie.startAngle - set the overall start angle.\npie.endAngle - set the overall end angle.\npie.padAngle - set the pad angle between adjacent arcs.\n\n\n\n\nA spline or polyline, as in a line chart.\n\nd3.line - create a new line generator.\nline - generate a line for the given dataset.\nline.x - set the x accessor.\nline.y - set the y accessor.\nline.defined - set the defined accessor.\nline.curve - set the curve interpolator.\nline.context - set the rendering context.\nd3.lineRadial - create a new radial line generator.\nlineRadial - generate a line for the given dataset.\nlineRadial.angle - set the angle accessor.\nlineRadial.radius - set the radius accessor.\nlineRadial.defined - set the defined accessor.\nlineRadial.curve - set the curve interpolator.\nlineRadial.context - set the rendering context.\n\n\n\n\nAn area, defined by a bounding topline and baseline, as in an area chart.\n\nd3.area - create a new area generator.\narea - generate an area for the given dataset.\narea.x - set the x0 and x1 accessors.\narea.x0 - set the baseline x accessor.\narea.x1 - set the topline x accessor.\narea.y - set the y0 and y1 accessors.\narea.y0 - set the baseline y accessor.\narea.y1 - set the topline y accessor.\narea.defined - set the defined accessor.\narea.curve - set the curve interpolator.\narea.context - set the rendering context.\narea.lineX0 - derive a line for the left edge of an area.\narea.lineY0 - derive a line for the top edge of an area.\narea.lineX1 - derive a line for the right edge of an area.\narea.lineY1 - derive a line for the bottom edge of an area.\nd3.areaRadial - create a new radial area generator.\nareaRadial - generate an area for the given dataset.\nareaRadial.angle - set the start and end angle accessors.\nareaRadial.startAngle - set the start angle accessor.\nareaRadial.endAngle - set the end angle accessor.\nareaRadial.radius - set the inner and outer radius accessors.\nareaRadial.innerRadius - set the inner radius accessor.\nareaRadial.outerRadius - set the outer radius accessor.\nareaRadial.defined - set the defined accessor.\nareaRadial.curve - set the curve interpolator.\nareaRadial.context - set the rendering context.\nareaRadial.lineStartAngle - derive a line for the start edge of an area.\nareaRadial.lineInnerRadius - derive a line for the inner edge of an area.\nareaRadial.lineEndAngle - derive a line for the end edge of an area.\nareaRadial.lineOuterRadius - derive a line for the outer edge of an area.\n\n\n\n\nInterpolate between points to produce a continuous shape.\n\nd3.curveBasis - a cubic basis spline, repeating the end points.\nd3.curveBasisClosed - a closed cubic basis spline.\nd3.curveBasisOpen - a cubic basis spline.\nd3.curveBundle - a straightened cubic basis spline.\nbundle.beta - set the bundle tension beta.\nd3.curveCardinal - a cubic cardinal spline, with one-sided difference at each end.\nd3.curveCardinalClosed - a closed cubic cardinal spline.\nd3.curveCardinalOpen - a cubic cardinal spline.\ncardinal.tension - set the cardinal spline tension.\nd3.curveCatmullRom - a cubic Catmull‚ÄìRom spline, with one-sided difference at each end.\nd3.curveCatmullRomClosed - a closed cubic Catmull‚ÄìRom spline.\nd3.curveCatmullRomOpen - a cubic Catmull‚ÄìRom spline.\ncatmullRom.alpha - set the Catmull‚ÄìRom parameter alpha.\nd3.curveLinear - a polyline.\nd3.curveLinearClosed - a closed polyline.\nd3.curveMonotoneX - a cubic spline that, given monotonicity in x, preserves it in y.\nd3.curveMonotoneY - a cubic spline that, given monotonicity in y, preserves it in x.\nd3.curveNatural - a natural cubic spline.\nd3.curveStep - a piecewise constant function.\nd3.curveStepAfter - a piecewise constant function.\nd3.curveStepBefore - a piecewise constant function.\ncurve.areaStart - start a new area segment.\ncurve.areaEnd - end the current area segment.\ncurve.lineStart - start a new line segment.\ncurve.lineEnd - end the current line segment.\ncurve.point - add a point to the current line segment.\n\n\n\n\nA smooth cubic B√©zier curve from a source to a target.\n\nd3.linkVertical - create a new vertical link generator.\nd3.linkHorizontal - create a new horizontal link generator.\nlink - generate a link.\nlink.source - set the source accessor.\nlink.target - set the target accessor.\nlink.x - set the point x-accessor.\nlink.y - set the point y-accessor.\nlink.context - set the rendering context.\nd3.linkRadial - create a new radial link generator.\nlinkRadial.angle - set the point angle accessor.\nlinkRadial.radius - set the point radius accessor.\n\n\n\n\nA categorical shape encoding, as in a scatterplot.\n\nd3.symbol - create a new symbol generator.\nsymbol - generate a symbol for the given datum.\nsymbol.type - set the symbol type.\nsymbol.size - set the size of the symbol in square pixels.\nsymbol.context - set the rendering context.\nd3.symbols - the array of built-in symbol types.\nd3.symbolCircle - a circle.\nd3.symbolCross - a Greek cross with arms of equal length.\nd3.symbolDiamond - a rhombus.\nd3.symbolSquare - a square.\nd3.symbolStar - a pentagonal star (pentagram).\nd3.symbolTriangle - an up-pointing triangle.\nd3.symbolWye - a Y shape.\nd3.pointRadial - relative coordinates of a point given an angle and radius.\nsymbolType.draw - draw this symbol to the given context.\n\n\n\n\nStack shapes, placing one adjacent to another, as in a stacked bar chart.\n\nd3.stack - create a new stack generator.\nstack - generate a stack for the given dataset.\nstack.keys - set the keys accessor.\nstack.value - set the value accessor.\nstack.order - set the order accessor.\nstack.offset - set the offset accessor.\nd3.stackOrderAppearance - put the earliest series on bottom.\nd3.stackOrderAscending - put the smallest series on bottom.\nd3.stackOrderDescending - put the largest series on bottom.\nd3.stackOrderInsideOut - put earlier series in the middle.\nd3.stackOrderNone - use the given series order.\nd3.stackOrderReverse - use the reverse of the given series order.\nd3.stackOffsetExpand - normalize the baseline to zero and topline to one.\nd3.stackOffsetDiverging - positive above zero; negative below zero.\nd3.stackOffsetNone - apply a zero baseline.\nd3.stackOffsetSilhouette - center the streamgraph around zero.\nd3.stackOffsetWiggle - minimize streamgraph wiggling."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#time-formats-d3-time-format",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#time-formats-d3-time-format",
    "title": "D3 API Reference",
    "section": "",
    "text": "Parse and format times, inspired by strptime and strftime.\n\nd3.timeFormat - alias for locale.format on the default locale.\nd3.timeParse - alias for locale.parse on the default locale.\nd3.utcFormat - alias for locale.utcFormat on the default locale.\nd3.utcParse - alias for locale.utcParse on the default locale.\nd3.isoFormat - an ISO 8601 UTC formatter.\nd3.isoParse - an ISO 8601 UTC parser.\nlocale.format - create a time formatter.\nlocale.parse - create a time parser.\nlocale.utcFormat - create a UTC formatter.\nlocale.utcParse - create a UTC parser.\nd3.timeFormatLocale - define a custom locale.\nd3.timeFormatDefaultLocale - define the default locale."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#time-intervals-d3-time",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#time-intervals-d3-time",
    "title": "D3 API Reference",
    "section": "",
    "text": "A calculator for humanity‚Äôs peculiar conventions of time.\n\nd3.timeInterval - implement a new custom time interval.\ninterval - alias for interval.floor.\ninterval.floor - round down to the nearest boundary.\ninterval.round - round to the nearest boundary.\ninterval.ceil - round up to the nearest boundary.\ninterval.offset - offset a date by some number of intervals.\ninterval.range - generate a range of dates at interval boundaries.\ninterval.filter - create a filtered subset of this interval.\ninterval.every - create a filtered subset of this interval.\ninterval.count - count interval boundaries between two dates.\nd3.timeMillisecond, d3.utcMillisecond - the millisecond interval.\nd3.timeMilliseconds, d3.utcMilliseconds - aliases for millisecond.range.\nd3.timeSecond, d3.utcSecond - the second interval.\nd3.timeSeconds, d3.utcSeconds - aliases for second.range.\nd3.timeMinute, d3.utcMinute - the minute interval.\nd3.timeMinutes, d3.utcMinutes - aliases for minute.range.\nd3.timeHour, d3.utcHour - the hour interval.\nd3.timeHours, d3.utcHours - aliases for hour.range.\nd3.timeDay, d3.utcDay - the day interval.\nd3.timeDays, d3.utcDays - aliases for day.range.\nd3.timeWeek, d3.utcWeek - aliases for sunday.\nd3.timeWeeks, d3.utcWeeks - aliases for week.range.\nd3.timeSunday, d3.utcSunday - the week interval, starting on Sunday.\nd3.timeSundays, d3.utcSundays - aliases for sunday.range.\nd3.timeMonday, d3.utcMonday - the week interval, starting on Monday.\nd3.timeMondays, d3.utcMondays - aliases for monday.range.\nd3.timeTuesday, d3.utcTuesday - the week interval, starting on Tuesday.\nd3.timeTuesdays, d3.utcTuesdays - aliases for tuesday.range.\nd3.timeWednesday, d3.utcWednesday - the week interval, starting on Wednesday.\nd3.timeWednesdays, d3.utcWednesdays - aliases for wednesday.range.\nd3.timeThursday, d3.utcThursday - the week interval, starting on Thursday.\nd3.timeThursdays, d3.utcThursdays - aliases for thursday.range.\nd3.timeFriday, d3.utcFriday - the week interval, starting on Friday.\nd3.timeFridays, d3.utcFridays - aliases for friday.range.\nd3.timeSaturday, d3.utcSaturday - the week interval, starting on Saturday.\nd3.timeSaturdays, d3.utcSaturdays - aliases for saturday.range.\nd3.timeMonth, d3.utcMonth - the month interval.\nd3.timeMonths, d3.utcMonths - aliases for month.range.\nd3.timeYear, d3.utcYear - the year interval.\nd3.timeYears, d3.utcYears - aliases for year.range."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#timers-d3-timer",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#timers-d3-timer",
    "title": "D3 API Reference",
    "section": "",
    "text": "An efficient queue for managing thousands of concurrent animations.\n\nd3.now - get the current high-resolution time.\nd3.timer - schedule a new timer.\ntimer.restart - reset the timer‚Äôs start time and callback.\ntimer.stop - stop the timer.\nd3.timerFlush - immediately execute any eligible timers.\nd3.timeout - schedule a timer that stops on its first callback.\nd3.interval - schedule a timer that is called with a configurable period."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#transitions-d3-transition",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#transitions-d3-transition",
    "title": "D3 API Reference",
    "section": "",
    "text": "Animated transitions for selections.\n\nselection.transition - schedule a transition for the selected elements.\nselection.interrupt - interrupt and cancel transitions on the selected elements.\nd3.interrupt - interrupt the active transition for a given node.\nd3.transition - schedule a transition on the root document element.\ntransition.select - schedule a transition on the selected elements.\ntransition.selectAll - schedule a transition on the selected elements.\ntransition.filter - filter elements based on data.\ntransition.merge - merge this transition with another.\ntransition.transition - schedule a new transition following this one.\ntransition.selection - returns a selection for this transition.\nd3.active - select the active transition for a given node.\ntransition.attr - tween the given attribute using the default interpolator.\ntransition.attrTween - tween the given attribute using a custom interpolator.\ntransition.style - tween the given style property using the default interpolator.\ntransition.styleTween - tween the given style property using a custom interpolator.\ntransition.text - set the text content when the transition starts.\ntransition.textTween - tween the text using a custom interpolator.\ntransition.remove - remove the selected elements when the transition ends.\ntransition.tween - run custom code during the transition.\ntransition.delay - specify per-element delay in milliseconds.\ntransition.duration - specify per-element duration in milliseconds.\ntransition.ease - specify the easing function.\ntransition.easeVarying - specify an easing function factory.\ntransition.end - a promise that resolves when a transition ends.\ntransition.on - await the end of a transition.\ntransition.each - call a function for each element.\ntransition.call - call a function with this transition.\ntransition.empty - returns true if this transition is empty.\ntransition.nodes - returns an array of all selected elements.\ntransition.node - returns the first (non-null) element.\ntransition.size - returns the count of elements."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/API.html#zooming-d3-zoom",
    "href": "docs/site_libs/d3v6-6.2.0/API.html#zooming-d3-zoom",
    "title": "D3 API Reference",
    "section": "",
    "text": "Pan and zoom SVG, HTML or Canvas using mouse or touch input.\n\nd3.zoom - create a zoom behavior.\nzoom - apply the zoom behavior to the selected elements.\nzoom.transform - change the transform for the selected elements.\nzoom.translateBy - translate the transform for the selected elements.\nzoom.translateTo - translate the transform for the selected elements.\nzoom.scaleBy - scale the transform for the selected elements.\nzoom.scaleTo - scale the transform for the selected elements.\nzoom.constrain - override the transform constraint logic.\nzoom.filter - control which input events initiate zooming.\nzoom.touchable - set the touch support detector.\nzoom.wheelDelta - override scaling for wheel events.\nzoom.extent - set the extent of the viewport.\nzoom.scaleExtent - set the allowed scale range.\nzoom.translateExtent - set the extent of the zoomable world.\nzoom.clickDistance - set the click distance threshold.\nzoom.tapDistance - set the tap distance threshold.\nzoom.duration - set the duration of zoom transitions.\nzoom.interpolate - control the interpolation of zoom transitions.\nzoom.on - listen for zoom events.\nd3.zoomTransform - get the zoom transform for a given element.\ntransform.scale - scale a transform by the specified amount.\ntransform.translate - translate a transform by the specified amount.\ntransform.apply - apply the transform to the given point.\ntransform.applyX - apply the transform to the given x-coordinate.\ntransform.applyY - apply the transform to the given y-coordinate.\ntransform.invert - unapply the transform to the given point.\ntransform.invertX - unapply the transform to the given x-coordinate.\ntransform.invertY - unapply the transform to the given y-coordinate.\ntransform.rescaleX - apply the transform to an x-scale‚Äôs domain.\ntransform.rescaleY - apply the transform to a y-scale‚Äôs domain.\ntransform.toString - format the transform as an SVG transform string.\nd3.zoomIdentity - the identity transform."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html",
    "title": "Changes in D3 6.0",
    "section": "",
    "text": "Released August 26, 2020.\nThis document covers only major changes. For minor and patch changes, please see the release notes.\nD3 now uses native collections (Map and Set) and accepts iterables. d3.group and d3.rollup are powerful new aggregation functions that replace d3.nest and work great with d3-hierarchy and d3-selection. There are lots of new helpers in d3-array, too, such as d3.greatest, d3.quickselect, and d3.fsum.\nD3 now passes events directly to listeners, replacing the d3.event global and bringing D3 inline with vanilla JavaScript and most other frameworks.\nd3-delaunay (based on Vladimir Agafonkin‚Äôs excellent Delaunator) replaces d3-voronoi, offering dramatic improvements to performance, robustness, and search. And there‚Äôs a new d3-geo-voronoi for spherical (geographical) data! d3-random is greatly expanded and includes a fast linear congruential generator for seeded randomness. d3-chord has new layouts for directed and transposed chord diagrams. d3-scale adds a new radial scale type.\n‚Ä¶ and a variety of other small enhancements. More than 450 examples have been updated to D3 6.0!\n\n\n\nAccept iterables.\nAdd d3.group.\nAdd d3.groups.\nAdd d3.index.\nAdd d3.indexes.\nAdd d3.rollup.\nAdd d3.rollups.\nAdd d3.maxIndex.\nAdd d3.minIndex.\nAdd d3.greatest.\nAdd d3.greatestIndex.\nAdd d3.least.\nAdd d3.leastIndex.\nAdd d3.bin.\nAdd d3.count.\nAdd d3.cumsum.\nAdd d3.fsum.\nAdd d3.Adder.\nAdd d3.quantileSorted.\nAdd d3.quickselect.\nAdd bisector.center.\nAllow more than two iterables for d3.cross.\nAccept non-sorted input with d3.quantile.\nFix a array.sort bug in Safari.\nFix bin thresholds to ignore NaN input.\nFix d3.ticks to not return ticks outside the domain.\nImprove the performance of d3.median.\n\nSee https://observablehq.com/@d3/d3-array-2-0 for details.\n\n\n\n\nAdd event.mode.\nChange brush.on to pass the event directly to listeners.\nImprove multitouch (two-touch) interaction.\n\n\n\n\n\nAdd d3.chordDirected.\nAdd d3.chordTranspose.\nAdd d3.ribbonArrow.\nAdd ribbon.padAngle.\nAdd ribbon.sourceRadius.\nAdd ribbon.targetRadius.\n\n\n\n\n\nAdd d3.Delaunay.\n\n\n\n\n\nChange drag.on to pass the event directly to listeners.\n\n\n\n\n\nAdd iterations argument to simulation.tick.\nAdd forceCenter.strength.\nAdd forceSimulation.randomSource.\nAll built-in forces are now fully deterministic (including ‚Äújiggling‚Äù coincident nodes).\nImprove the default phyllotaxis layout slightly by offsetting by one half-radius.\nImprove the error message when a link references an unknown node.\nforce.initialize is now passed a random source.\nFix bug when initializing nodes with fixed positions.\n\n\n\n\n\nChange the default minus sign to the minus sign (‚àí) instead of hyphen-minus (-).\nFix decimal d formatting of numbers greater than or equal to 1e21.\n\n\n\n\n\nFix clipping of some degenerate polygons.\n\n\n\n\n\nAccept iterables.\nAdd node[Symbol.iterator]; hierarchies are now iterable.\nAdd node.find.\nChange node.each to pass the traversal index.\nChange node.eachAfter to pass the traversal index.\nChange node.eachBefore to pass the traversal index.\nFix d3.packSiblings for huge circles.\nFix divide-by-zero bug in d3.treemapBinary.\nFix divide-by-zero bug in d3.treemapResquarify.\n\n\n\n\n\nAdd interpolateZoom.rho. (#25)\nAllow d3.piecewise to default to using d3.interpolate. #90\nChange d3.interpolateTransformCss to use DOMMatrix and require absolute units. #83\n\n\n\n\n\nFix an infinite loop when coordinates diverge to huge values.\n\n\n\n\n\nAdd d3.randomLcg.\nAdd d3.randomGamma.\nAdd d3.randomBeta.\nAdd d3.randomWeibull.\nAdd d3.randomCauchy.\nAdd d3.randomLogistic.\nAdd d3.randomPoisson.\nAdd d3.randomInt.\nAdd d3.randomBinomial.\nAdd d3.randomGeometric.\nAdd d3.randomPareto.\nAdd d3.randomBernoulli.\nAllow d3.randomBates to take fractional n.\nAllow d3.randomIrwinHall to take fractional n.\nDon‚Äôt wrap Math.random in the default source.\n\nThanks to @Lange, @p-v-d-Veeken, @svanschooten, @Parcly-Taxel and @jrus for your contributions!\n\n\n\n\nAccept iterables.\nAdd diverging.rangeRound.\nAdd sequential.range (for compatibility with d3-axis).\nAdd sequential.rangeRound.\nAdd sequentialQuantile.quantiles.\nAdd d3.scaleRadial.\ndiverging.range can now be used to set the interpolator.\nsequential.range can now be used to set the interpolator.\nd3.scaleDiverging can now accept a range array in place of an interpolator.\nd3.scaleSequential can now accept a range array in place of an interpolator.\nFix continuous.nice to ensure that niced domains always span ticks.\nFix log.ticks for small domains.\nFix log.ticks for small domains. #44\nFix scale.clamp for sequential quantile scales. Thanks, @Fil!\nFix scale.clamp for continuous scales with more domain values than range values.\nFix diverging scales with descending domains.\nRemove deprecated step argument from time.ticks and time.nice.\n\n\n\n\n\nAdd selection.selectChild.\nAdd selection.selectChildren.\nAdd d3.pointer.\nAdd d3.pointers.\nAdd selection[Symbol.iterator]; selections are now iterable!\nAccept iterables with selection.data.\nAccept iterables with d3.selectAll.\nChange selection.on to pass the event directly to listeners.\nRemove index and group from selection.on listeners!\nRemove d3.event!\nRemove d3.mouse.\nRemove d3.touch.\nRemove d3.touches.\nRemove d3.customEvent.\nRemove d3.clientPoint.\nRemove d3.sourceEvent.\nFix selection.merge(transition) to error.\n\nFor an overview of changes, see https://observablehq.com/@d3/d3-selection-2-0.\n\n\n\n\nAccept iterables.\nAdd d3.line(x, y) shorthand.\nAdd d3.area(x, y0, y1) shorthand.\nAdd d3.symbol(type, size) shorthand.\n\n\n\n\n\nAdd ISO 8601 ‚Äúweek year‚Äù (%G and %g).\n\n\n\n\n\nFix interval.restart to restart as an interval.\n\n\n\n\n\nAdd transition.easeVarying.\nAdd transition[Symbol.iterator]; transitions are now iterable.\nFix selection.transition to error if the named transition to inherit is not found.k\nFix transition.end to resolve immediately if the selection is empty.\n\n\n\n\n\nAdd zoom.tapDistance.\nChange zoom.on to pass the event directly to listeners.\nChange the default zoom.filter to observe wheel events if the control key is pressed.\nChange the default zoom.wheelDelta to go faster if the control key is pressed.\nDon‚Äòt set touch-action: none.\nUpgrade to d3-selection 2.\n\n\n\n\nD3 6.0 introduces several non-backwards-compatible changes.\n\nRemove d3.event.\nChange selection.on to pass the event directly to listeners.\nChange transition.on to pass the event directly to listeners.\nChange brush.on to pass the event directly to listeners.\nChange drag.on to pass the event directly to listeners.\nChange zoom.on to pass the event directly to listeners.\nRemove d3.mouse; use d3.pointer.\nRemove d3.touch; use d3.pointer.\nRemove d3.touches; use d3.pointers.\nRemove d3.clientPoint; use d3.pointer.\nRemove d3.voronoi; use d3.Delaunay.\nRemove d3.nest; use d3.group and d3.rollup.\nRemove d3.map; use Map.\nRemove d3.set; use Set.\nRemove d3.keys; use Object.keys.\nRemove d3.values; use Object.values.\nRemove d3.entries; use Object.entries.\nRename d3.histogram to d3.bin.\nRename d3.scan to d3.leastIndex.\nChange d3.interpolateTransformCss to require absolute units.\nChange d3.format to default to the minus sign instead of hyphen-minus for negative values.\n\nD3 now requires a browser that supports ES2015. For older browsers, you must bring your own transpiler.\nLastly, support for Bower has been dropped; D3 is now exclusively published to npm and GitHub.\nSee our migration guide for help upgrading."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#arrays-d3-array",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#arrays-d3-array",
    "title": "Changes in D3 6.0",
    "section": "Arrays (d3-array)",
    "text": "Arrays (d3-array)\nThe new d3.scan method performs a linear scan of an array, returning the index of the least element according to the specified comparator. This is similar to d3.min and d3.max, except you can use it to find the position of an extreme element, rather than just calculate an extreme value.\nvar data = [\n  {name: \"Alice\", value: 2},\n  {name: \"Bob\", value: 3},\n  {name: \"Carol\", value: 1},\n  {name: \"Dwayne\", value: 5}\n];\n\nvar i = d3.scan(data, function(a, b) { return a.value - b.value; }); // 2\ndata[i]; // {name: \"Carol\", value: 1}\nThe new d3.ticks and d3.tickStep methods are useful for generating human-readable numeric ticks. These methods are a low-level alternative to continuous.ticks from d3-scale. The new implementation is also more accurate, returning the optimal number of ticks as measured by relative error.\nvar ticks = d3.ticks(0, 10, 5); // [0, 2, 4, 6, 8, 10]\nThe d3.range method no longer makes an elaborate attempt to avoid floating-point error when step is not an integer. The returned values are strictly defined as start + i * step, where i is an integer. (Learn more about floating point math.) d3.range returns the empty array for infinite ranges, rather than throwing an error.\nThe method signature for optional accessors has been changed to be more consistent with array methods such as array.forEach: the accessor is passed the current element (d), the index (i), and the array (data), with this as undefined. This affects d3.min, d3.max, d3.extent, d3.sum, d3.mean, d3.median, d3.quantile, d3.variance and d3.deviation. The d3.quantile method previously did not take an accessor. Some methods with optional arguments now treat those arguments as missing if they are null or undefined, rather than strictly checking arguments.length.\nThe new d3.histogram API replaces d3.layout.histogram. Rather than exposing bin.x and bin.dx on each returned bin, the histogram exposes bin.x0 and bin.x1, guaranteeing that bin.x0 is exactly equal to bin.x1 on the preceding bin. The ‚Äúfrequency‚Äù and ‚Äúprobability‚Äù modes are no longer supported; each bin is simply an array of elements from the input data, so bin.length is equal to D3 3.x‚Äôs bin.y in frequency mode. To compute a probability distribution, divide the number of elements in each bin by the total number of elements.\nThe histogram.range method has been renamed histogram.domain for consistency with scales. The histogram.bins method has been renamed histogram.thresholds, and no longer accepts an upper value: n thresholds will produce n + 1 bins. If you specify a desired number of bins rather than thresholds, d3.histogram now uses d3.ticks to compute nice bin thresholds. In addition to the default Sturges‚Äô formula, D3 now implements the Freedman-Diaconis rule and Scott‚Äôs normal reference rule."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#axes-d3-axis",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#axes-d3-axis",
    "title": "Changes in D3 6.0",
    "section": "Axes (d3-axis)",
    "text": "Axes (d3-axis)\nTo render axes properly in D3 3.x, you needed to style them:\n&lt;style&gt;\n\n.axis path,\n.axis line {\n  fill: none;\n  stroke: #000;\n  shape-rendering: crispEdges;\n}\n\n.axis text {\n  font: 10px sans-serif;\n}\n\n&lt;/style&gt;\n&lt;script&gt;\n\nd3.select(\".axis\")\n    .call(d3.svg.axis()\n        .scale(x)\n        .orient(\"bottom\"));\n\n&lt;/script&gt;\nIf you didn‚Äôt, you saw this:\n\nD3 4.0 provides default styles and shorter syntax. In place of d3.svg.axis and axis.orient, D3 4.0 now provides four constructors for each orientation: d3.axisTop, d3.axisRight, d3.axisBottom, d3.axisLeft. These constructors accept a scale, so you can reduce all of the above to:\n&lt;script&gt;\n\nd3.select(\".axis\")\n    .call(d3.axisBottom(x));\n\n&lt;/script&gt;\nAnd get this:\n\nAs before, you can customize the axis appearance either by applying stylesheets or by modifying the axis elements. The default appearance has been changed slightly to offset the axis by a half-pixel; this fixes a crisp-edges rendering issue on Safari where the axis would be drawn two-pixels thick.\nThere‚Äôs now an axis.tickArguments method, as an alternative to axis.ticks that also allows the axis tick arguments to be inspected. The axis.tickSize method has been changed to only allow a single argument when setting the tick size. The axis.innerTickSize and axis.outerTickSize methods have been renamed axis.tickSizeInner and axis.tickSizeOuter, respectively."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#brushes-d3-brush",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#brushes-d3-brush",
    "title": "Changes in D3 6.0",
    "section": "Brushes (d3-brush)",
    "text": "Brushes (d3-brush)\nReplacing d3.svg.brush, there are now three classes of brush for brushing along the x-dimension, the y-dimension, or both: d3.brushX, d3.brushY, d3.brush. Brushes are no longer dependent on scales; instead, each brush defines a selection in screen coordinates. This selection can be inverted if you want to compute the corresponding data domain. And rather than rely on the scales‚Äô¬†ranges to determine the brushable area, there is now a brush.extent method for setting it. If you do not set the brush extent, it defaults to the full extent of the owner SVG element. The brush.clamp method has also been eliminated; brushing is always restricted to the brushable area defined by the brush extent.\nBrushes no longer store the active brush selection (i.e., the highlighted region; the brush‚Äôs position) internally. The brush‚Äôs position is now stored on any elements to which the brush has been applied. The brush‚Äôs position is available as event.selection within a brush event or by calling d3.brushSelection on a given element. To move the brush programmatically, use brush.move with a given selection or transition; see the brush snapping example. The brush.event method has been removed.\nBrush interaction has been improved. By default, brushes now ignore right-clicks intended for the context menu; you can change this behavior using brush.filter. Brushes also ignore emulated mouse events on iOS. Holding down SHIFT (‚áß) while brushing locks the x- or y-position of the brush. Holding down META (‚åò) while clicking and dragging starts a new selection, rather than translating the existing selection.\nThe default appearance of the brush has also been improved and slightly simplified. Previously it was necessary to apply styles to the brush to give it a reasonable appearance, such as:\n.brush .extent {\n  stroke: #fff;\n  fill-opacity: .125;\n  shape-rendering: crispEdges;\n}\nThese styles are now applied by default as attributes; if you want to customize the brush appearance, you can still apply external styles or modify the brush elements. (D3 4.0 features a similar improvement to axes.) A new brush.handleSize method lets you override the brush handle size; it defaults to six pixels.\nThe brush now consumes handled events, making it easier to combine with other interactive behaviors such as dragging and zooming. The brushstart and brushend events have been renamed to start and end, respectively. The brush event no longer reports a event.mode to distinguish between resizing and dragging the brush."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#chords-d3-chord",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#chords-d3-chord",
    "title": "Changes in D3 6.0",
    "section": "Chords (d3-chord)",
    "text": "Chords (d3-chord)\nPursuant to the great namespace flattening:\n\nd3.layout.chord ‚Ü¶ d3.chord\nd3.svg.chord ‚Ü¶ d3.ribbon\n\nFor consistency with arc.padAngle, chord.padding has also been renamed to ribbon.padAngle. A new ribbon.context method lets you render chord diagrams to Canvas! See also d3-path."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#collections-d3-collection",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#collections-d3-collection",
    "title": "Changes in D3 6.0",
    "section": "Collections (d3-collection)",
    "text": "Collections (d3-collection)\nThe d3.set constructor now accepts an existing set for making a copy. If you pass an array to d3.set, you can also pass a value accessor. This accessor takes the standard arguments: the current element (d), the index (i), and the array (data), with this undefined. For example:\nvar yields = [\n  {yield: 22.13333, variety: \"Manchuria\",        year: 1932, site: \"Grand Rapids\"},\n  {yield: 26.76667, variety: \"Peatland\",         year: 1932, site: \"Grand Rapids\"},\n  {yield: 28.10000, variety: \"No. 462\",          year: 1931, site: \"Duluth\"},\n  {yield: 38.50000, variety: \"Svansota\",         year: 1932, site: \"Waseca\"},\n  {yield: 40.46667, variety: \"Svansota\",         year: 1931, site: \"Crookston\"},\n  {yield: 36.03333, variety: \"Peatland\",         year: 1932, site: \"Waseca\"},\n  {yield: 34.46667, variety: \"Wisconsin No. 38\", year: 1931, site: \"Grand Rapids\"}\n];\n\nvar sites = d3.set(yields, function(d) { return d.site; }); // Grand Rapids, Duluth, Waseca, Crookston\nThe d3.map constructor also follows the standard array accessor argument pattern.\nThe map.forEach and set.forEach methods have been renamed to map.each and set.each respectively. The order of arguments for map.each has also been changed to value, key and map, while the order of arguments for set.each is now value, value and set. This is closer to ES6 map.forEach and set.forEach. Also like ES6 Map and Set, map.set and set.add now return the current collection (rather than the added value) to facilitate method chaining. New map.clear and set.clear methods can be used to empty collections.\nThe nest.map method now always returns a d3.map instance. For a plain object, use nest.object instead. When used in conjunction with nest.rollup, nest.entries now returns {key, value} objects for the leaf entries, instead of {key, values}. This makes nest.rollup easier to use in conjunction with hierarchies, as in this Nest Treemap example."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#colors-d3-color",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#colors-d3-color",
    "title": "Changes in D3 6.0",
    "section": "Colors (d3-color)",
    "text": "Colors (d3-color)\nAll colors now have opacity exposed as color.opacity, which is a number in [0, 1]. You can pass an optional opacity argument to the color space constructors d3.rgb, d3.hsl, d3.lab, d3.hcl or d3.cubehelix.\nYou can now parse rgba(‚Ä¶) and hsla(‚Ä¶) CSS color specifiers or the string ‚Äútransparent‚Äù using d3.color. The ‚Äútransparent‚Äù color is defined as an RGB color with zero opacity and undefined red, green and blue channels; this differs slightly from CSS which defines it as transparent black, but is useful for simplifying color interpolation logic where either the starting or ending color has undefined channels. The color.toString method now likewise returns an rgb(‚Ä¶) or rgba(‚Ä¶) string with integer channel values, not the hexadecimal RGB format, consistent with CSS computed values. This improves performance by short-circuiting transitions when the element‚Äôs starting style matches its ending style.\nThe new d3.color method is the primary method for parsing colors: it returns a d3.color instance in the appropriate color space, or null if the CSS color specifier is invalid. For example:\nvar red = d3.color(\"hsl(0, 80%, 50%)\"); // {h: 0, l: 0.5, s: 0.8, opacity: 1}\nThe parsing implementation is now more robust. For example, you can no longer mix integers and percentages in rgb(‚Ä¶), and it correctly handles whitespace, decimal points, number signs, and other edge cases. The color space constructors d3.rgb, d3.hsl, d3.lab, d3.hcl and d3.cubehelix now always return a copy of the input color, converted to the corresponding color space. While color.rgb remains, rgb.hsl has been removed; use d3.hsl to convert a color to the RGB color space.\nThe RGB color space no longer greedily quantizes and clamps channel values when creating colors, improving accuracy in color space conversion. Quantization and clamping now occurs in color.toString when formatting a color for display. You can use the new color.displayable to test whether a color is out-of-gamut.\nThe rgb.brighter method no longer special-cases black. This is a multiplicative operator, defining a new color r‚Ä≤, g‚Ä≤, b‚Ä≤ where r‚Ä≤ = r √ó pow(0.7, k), g‚Ä≤ = g √ó pow(0.7, k) and b‚Ä≤ = b √ó pow(0.7, k); a brighter black is still black.\nThere‚Äôs a new d3.cubehelix color space, generalizing Dave Green‚Äôs color scheme! (See also d3.interpolateCubehelixDefault from d3-scale.) You can continue to define your own custom color spaces, too; see d3-hsv for an example."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#dispatches-d3-dispatch",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#dispatches-d3-dispatch",
    "title": "Changes in D3 6.0",
    "section": "Dispatches (d3-dispatch)",
    "text": "Dispatches (d3-dispatch)\nRather than decorating the dispatch object with each event type, the dispatch object now exposes generic dispatch.call and dispatch.apply methods which take the type string as the first argument. For example, in D3 3.x, you might say:\ndispatcher.foo.call(that, \"Hello, Foo!\");\nTo dispatch a foo event in D3 4.0, you‚Äôd say:\ndispatcher.call(\"foo\", that, \"Hello, Foo!\");\nThe dispatch.on method now accepts multiple typenames, allowing you to add or remove listeners for multiple events simultaneously. For example, to send both foo and bar events to the same listener:\ndispatcher.on(\"foo bar\", function(message) {\n  console.log(message);\n});\nThis matches the new behavior of selection.on in d3-selection. The dispatch.on method now validates that the specifier listener is a function, rather than throwing an error in the future.\nThe new implementation d3.dispatch is faster, using fewer closures to improve performance. There‚Äôs also a new dispatch.copy method for making a copy of a dispatcher; this is used by d3-transition to improve the performance of transitions in the common case where all elements in a transition have the same transition event listeners."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#dragging-d3-drag",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#dragging-d3-drag",
    "title": "Changes in D3 6.0",
    "section": "Dragging (d3-drag)",
    "text": "Dragging (d3-drag)\nThe drag behavior d3.behavior.drag has been renamed to d3.drag. The drag.origin method has been replaced by drag.subject, which allows you to define the thing being dragged at the start of a drag gesture. This is particularly useful with Canvas, where draggable objects typically share a Canvas element (as opposed to SVG, where draggable objects typically have distinct DOM elements); see the circle dragging example.\nA new drag.container method lets you override the parent element that defines the drag gesture coordinate system. This defaults to the parent node of the element to which the drag behavior was applied. For dragging on Canvas elements, you probably want to use the Canvas element as the container.\nDrag events now expose an event.on method for registering temporary listeners for duration of the current drag gesture; these listeners can capture state for the current gesture, such as the thing being dragged. A new event.active property lets you detect whether multiple (multitouch) drag gestures are active concurrently. The dragstart and dragend events have been renamed to start and end. By default, drag behaviors now ignore right-clicks intended for the context menu; use drag.filter to control which events are ignored. The drag behavior also ignores emulated mouse events on iOS. The drag behavior now consumes handled events, making it easier to combine with other interactive behaviors such as zooming.\nThe new d3.dragEnable and d3.dragDisable methods provide a low-level API for implementing drag gestures across browsers and devices. These methods are also used by other D3 components, such as the brush."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#delimiter-separated-values-d3-dsv",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#delimiter-separated-values-d3-dsv",
    "title": "Changes in D3 6.0",
    "section": "Delimiter-Separated Values (d3-dsv)",
    "text": "Delimiter-Separated Values (d3-dsv)\nPursuant to the great namespace flattening, various CSV and TSV methods have new names:\n\nd3.csv.parse ‚Ü¶ d3.csvParse\nd3.csv.parseRows ‚Ü¶ d3.csvParseRows\nd3.csv.format ‚Ü¶ d3.csvFormat\nd3.csv.formatRows ‚Ü¶ d3.csvFormatRows\nd3.tsv.parse ‚Ü¶ d3.tsvParse\nd3.tsv.parseRows ‚Ü¶ d3.tsvParseRows\nd3.tsv.format ‚Ü¶ d3.tsvFormat\nd3.tsv.formatRows ‚Ü¶ d3.tsvFormatRows\n\nThe d3.csv and d3.tsv methods for loading files of the corresponding formats have not been renamed, however! Those are defined in d3-request.There‚Äôs no longer a d3.dsv method, which served the triple purpose of defining a DSV formatter, a DSV parser and a DSV requestor; instead, there‚Äôs just d3.dsvFormat which you can use to define a DSV formatter and parser. You can use request.response to make a request and then parse the response body, or just use d3.text.\nThe dsv.parse method now exposes the column names and their input order as data.columns. For example:\nd3.csv(\"cars.csv\", function(error, data) {\n  if (error) throw error;\n  console.log(data.columns); // [\"Year\", \"Make\", \"Model\", \"Length\"]\n});\nYou can likewise pass an optional array of column names to dsv.format to format only a subset of columns, or to specify the column order explicitly:\nvar string = d3.csvFormat(data, [\"Year\", \"Model\", \"Length\"]);\nThe parser is a bit faster and the formatter is a bit more robust: inputs are coerced to strings before formatting, fixing an obscure crash, and deprecated support for falling back to dsv.formatRows when the input data is an array of arrays has been removed."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#easings-d3-ease",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#easings-d3-ease",
    "title": "Changes in D3 6.0",
    "section": "Easings (d3-ease)",
    "text": "Easings (d3-ease)\nD3 3.x used strings, such as ‚Äúcubic-in-out‚Äù, to identify easing methods; these strings could be passed to d3.ease or transition.ease. D3 4.0 uses symbols instead, such as d3.easeCubicInOut. Symbols are simpler and cleaner. They work well with Rollup to produce smaller custom bundles. You can still define your own custom easing function, too, if desired. Here‚Äôs the full list of equivalents:\n\nlinear ‚Ü¶ d3.easeLinear¬π\nlinear-in ‚Ü¶ d3.easeLinear¬π\nlinear-out ‚Ü¶ d3.easeLinear¬π\nlinear-in-out ‚Ü¶ d3.easeLinear¬π\nlinear-out-in ‚Ü¶ d3.easeLinear¬π\npoly-in ‚Ü¶ d3.easePolyIn\npoly-out ‚Ü¶ d3.easePolyOut\npoly-in-out ‚Ü¶ d3.easePolyInOut\npoly-out-in ‚Ü¶ REMOVED¬≤\nquad-in ‚Ü¶ d3.easeQuadIn\nquad-out ‚Ü¶ d3.easeQuadOut\nquad-in-out ‚Ü¶ d3.easeQuadInOut\nquad-out-in ‚Ü¶ REMOVED¬≤\ncubic-in ‚Ü¶ d3.easeCubicIn\ncubic-out ‚Ü¶ d3.easeCubicOut\ncubic-in-out ‚Ü¶ d3.easeCubicInOut\ncubic-out-in ‚Ü¶ REMOVED¬≤\nsin-in ‚Ü¶ d3.easeSinIn\nsin-out ‚Ü¶ d3.easeSinOut\nsin-in-out ‚Ü¶ d3.easeSinInOut\nsin-out-in ‚Ü¶ REMOVED¬≤\nexp-in ‚Ü¶ d3.easeExpIn\nexp-out ‚Ü¶ d3.easeExpOut\nexp-in-out ‚Ü¶ d3.easeExpInOut\nexp-out-in ‚Ü¶ REMOVED¬≤\ncircle-in ‚Ü¶ d3.easeCircleIn\ncircle-out ‚Ü¶ d3.easeCircleOut\ncircle-in-out ‚Ü¶ d3.easeCircleInOut\ncircle-out-in ‚Ü¶ REMOVED¬≤\nelastic-in ‚Ü¶ d3.easeElasticOut¬≤\nelastic-out ‚Ü¶ d3.easeElasticIn¬≤\nelastic-in-out ‚Ü¶ REMOVED¬≤\nelastic-out-in ‚Ü¶ d3.easeElasticInOut¬≤\nback-in ‚Ü¶ d3.easeBackIn\nback-out ‚Ü¶ d3.easeBackOut\nback-in-out ‚Ü¶ d3.easeBackInOut\nback-out-in ‚Ü¶ REMOVED¬≤\nbounce-in ‚Ü¶ d3.easeBounceOut¬≤\nbounce-out ‚Ü¶ d3.easeBounceIn¬≤\nbounce-in-out ‚Ü¶ REMOVED¬≤\nbounce-out-in ‚Ü¶ d3.easeBounceInOut¬≤\n\n¬π The -in, -out and -in-out variants of linear easing are identical, so there‚Äôs just d3.easeLinear. ¬≤ Elastic and bounce easing were inadvertently reversed in 3.x, so 4.0 eliminates -out-in easing!\nFor convenience, there are also default aliases for each easing method. For example, d3.easeCubic is an alias for d3.easeCubicInOut. Most default to -in-out; the exceptions¬†are d3.easeBounce and d3.easeElastic, which default to -out.\nRather than pass optional arguments to d3.ease or transition.ease, parameterizable easing functions now have named parameters: poly.exponent, elastic.amplitude, elastic.period and back.overshoot. For example, in D3 3.x you might say:\nvar e = d3.ease(\"elastic-out-in\", 1.2);\nThe equivalent in D3 4.0 is:\nvar e = d3.easeElastic.amplitude(1.2);\nMany of the easing functions have been optimized for performance and accuracy. Several bugs have been fixed, as well, such as the interpretation of the overshoot parameter for back easing, and the period parameter for elastic easing. Also, d3-transition now explicitly guarantees that the last tick of the transition happens at exactly t = 1, avoiding floating point errors in some easing functions.\nThere‚Äôs now a nice visual reference and an animated reference to the new easing functions, too!"
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#forces-d3-force",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#forces-d3-force",
    "title": "Changes in D3 6.0",
    "section": "Forces (d3-force)",
    "text": "Forces (d3-force)\nThe force layout d3.layout.force has been renamed to d3.forceSimulation. The force simulation now uses velocity Verlet integration rather than position Verlet, tracking the nodes‚Äô positions (node.x, node.y) and velocities (node.vx, node.vy) rather than their previous positions (node.px, node.py).\nRather than hard-coding a set of built-in forces, the force simulation is now extensible: you specify which forces you want! The approach affords greater flexibility through composition. The new forces are more flexible, too: force parameters can typically be configured per-node or per-link. There are separate positioning forces for x and y that replace force.gravity; x.x and y.y replace force.size. The new link force replaces force.linkStrength and employs better default heuristics to improve stability. The new many-body force replaces force.charge and supports a new minimum-distance parameter and performance improvements thanks to 4.0‚Äôs new quadtrees. There are also brand-new forces for centering nodes and collision resolution.\nThe new forces and simulation have been carefully crafted to avoid nondeterminism. Rather than initializing nodes randomly, if the nodes do not have preset positions, they are placed in a phyllotaxis pattern:\n\nRandom jitter is still needed to resolve link, collision and many-body forces if there are coincident nodes, but at least in the common case, the force simulation (and the resulting force-directed graph layout) is now consistent across browsers and reloads. D3 no longer plays dice!\nThe force simulation has several new methods for greater control over heating, such as simulation.alphaMin and simulation.alphaDecay, and the internal timer. Calling simulation.alpha now has no effect on the internal timer, which is controlled independently via simulation.stop and simulation.restart. The force layout‚Äôs internal timer now starts automatically on creation, removing force.start. As in 3.x, you can advance the simulation manually using simulation.tick. The force.friction parameter is replaced by simulation.velocityDecay. A new simulation.alphaTarget method allows you to set the desired alpha (temperature) of the simulation, such that the simulation can be smoothly reheated during interaction, and then smoothly cooled again. This improves the stability of the graph during interaction.\nThe force layout no longer depends on the drag behavior, though you can certainly create draggable force-directed graphs! Set node.fx and node.fy to fix a node‚Äôs position. As an alternative to a Voronoi SVG overlay, you can now use simulation.find to find the closest node to a pointer."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#number-formats-d3-format",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#number-formats-d3-format",
    "title": "Changes in D3 6.0",
    "section": "Number Formats (d3-format)",
    "text": "Number Formats (d3-format)\nIf a precision is not specified, the formatting behavior has changed: there is now a default precision of 6 for all directives except none, which defaults to 12. In 3.x, if you did not specify a precision, the number was formatted using its shortest unique representation (per number.toString); this could lead to unexpected digits due to floating point math. The new default precision in 4.0 produces more consistent results:\nvar f = d3.format(\"e\");\nf(42);        // \"4.200000e+1\"\nf(0.1 + 0.2); // \"3.000000e-1\"\nTo trim insignificant trailing zeroes, use the none directive, which is similar g. For example:\nvar f = d3.format(\".3\");\nf(0.12345);   // \"0.123\"\nf(0.10000);   // \"0.1\"\nf(0.1 + 0.2); // \"0.3\"\nUnder the hood, number formatting has improved accuracy with very large and very small numbers by using number.toExponential rather than Math.log to extract the mantissa and exponent. Negative zero (-0, an IEEE 754 construct) and very small numbers that round to zero are now formatted as unsigned zero. The inherently unsafe d3.round method has been removed, along with d3.requote.\nThe d3.formatPrefix method has been changed. Rather than returning an SI-prefix string, it returns an SI-prefix format function for a given specifier and reference value. For example, to format thousands:\nvar f = d3.formatPrefix(\",.0\", 1e3);\nf(1e3); // \"1k\"\nf(1e4); // \"10k\"\nf(1e5); // \"100k\"\nf(1e6); // \"1,000k\"\nUnlike the s format directive, d3.formatPrefix always employs the same SI-prefix, producing consistent results:\nvar f = d3.format(\".0s\");\nf(1e3); // \"1k\"\nf(1e4); // \"10k\"\nf(1e5); // \"100k\"\nf(1e6); // \"1M\"\nThe new ( sign option uses parentheses for negative values. This is particularly useful in conjunction with $. For example:\nd3.format(\"+.0f\")(-42);  // \"-42\"\nd3.format(\"(.0f\")(-42);  // \"(42)\"\nd3.format(\"+$.0f\")(-42); // \"-$42\"\nd3.format(\"($.0f\")(-42); // \"($42)\"\nThe new = align option places any sign and symbol to the left of any padding:\nd3.format(\"&gt;6d\")(-42);  // \"   -42\"\nd3.format(\"=6d\")(-42);  // \"-   42\"\nd3.format(\"&gt;(6d\")(-42); // \"  (42)\"\nd3.format(\"=(6d\")(-42); // \"(  42)\"\nThe b, o, d and x directives now round to the nearest integer, rather than returning the empty string for non-integers:\nd3.format(\"b\")(41.9); // \"101010\"\nd3.format(\"o\")(41.9); // \"52\"\nd3.format(\"d\")(41.9); // \"42\"\nd3.format(\"x\")(41.9); // \"2a\"\nThe c directive is now for character data (i.e., literal strings), not for character codes. The is useful if you just want to apply padding and alignment and don‚Äôt care about formatting numbers. For example, the infamous left-pad (as well as center- and right-pad!) can be conveniently implemented as:\nd3.format(\"&gt;10c\")(\"foo\"); // \"       foo\"\nd3.format(\"^10c\")(\"foo\"); // \"   foo    \"\nd3.format(\"&lt;10c\")(\"foo\"); // \"foo       \"\nThere are several new methods for computing suggested decimal precisions; these are used by d3-scale for tick formatting, and are helpful for implementing custom number formats: d3.precisionFixed, d3.precisionPrefix and d3.precisionRound. There‚Äôs also a new d3.formatSpecifier method for parsing, validating and debugging format specifiers; it‚Äôs also good for deriving related format specifiers, such as when you want to substitute the precision automatically.\nYou can now set the default locale using d3.formatDefaultLocale! The locales are published as JSON to npm."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#geographies-d3-geo",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#geographies-d3-geo",
    "title": "Changes in D3 6.0",
    "section": "Geographies (d3-geo)",
    "text": "Geographies (d3-geo)\nPursuant to the great namespace flattening, various methods have new names:\n\nd3.geo.graticule ‚Ü¶ d3.geoGraticule\nd3.geo.circle ‚Ü¶ d3.geoCircle\nd3.geo.area ‚Ü¶ d3.geoArea\nd3.geo.bounds ‚Ü¶ d3.geoBounds\nd3.geo.centroid ‚Ü¶ d3.geoCentroid\nd3.geo.distance ‚Ü¶ d3.geoDistance\nd3.geo.interpolate ‚Ü¶ d3.geoInterpolate\nd3.geo.length ‚Ü¶ d3.geoLength\nd3.geo.rotation ‚Ü¶ d3.geoRotation\nd3.geo.stream ‚Ü¶ d3.geoStream\nd3.geo.path ‚Ü¶ d3.geoPath\nd3.geo.projection ‚Ü¶ d3.geoProjection\nd3.geo.projectionMutator ‚Ü¶ d3.geoProjectionMutator\nd3.geo.albers ‚Ü¶ d3.geoAlbers\nd3.geo.albersUsa ‚Ü¶ d3.geoAlbersUsa\nd3.geo.azimuthalEqualArea ‚Ü¶ d3.geoAzimuthalEqualArea\nd3.geo.azimuthalEquidistant ‚Ü¶ d3.geoAzimuthalEquidistant\nd3.geo.conicConformal ‚Ü¶ d3.geoConicConformal\nd3.geo.conicEqualArea ‚Ü¶ d3.geoConicEqualArea\nd3.geo.conicEquidistant ‚Ü¶ d3.geoConicEquidistant\nd3.geo.equirectangular ‚Ü¶ d3.geoEquirectangular\nd3.geo.gnomonic ‚Ü¶ d3.geoGnomonic\nd3.geo.mercator ‚Ü¶ d3.geoMercator\nd3.geo.orthographic ‚Ü¶ d3.geoOrthographic\nd3.geo.stereographic ‚Ü¶ d3.geoStereographic\nd3.geo.transverseMercator ‚Ü¶ d3.geoTransverseMercator\n\nAlso renamed for consistency:\n\ncircle.origin ‚Ü¶ circle.center\ncircle.angle ‚Ü¶ circle.radius\ngraticule.majorExtent ‚Ü¶ graticule.extentMajor\ngraticule.minorExtent ‚Ü¶ graticule.extentMinor\ngraticule.majorStep ‚Ü¶ graticule.stepMajor\ngraticule.minorStep ‚Ü¶ graticule.stepMinor\n\nProjections now have more appropriate defaults. For example, d3.geoOrthographic has a 90¬∞ clip angle by default, showing only the front hemisphere, and d3.geoGnomonic has a default 60¬∞ clip angle. The default projection for d3.geoPath is now null rather than d3.geoAlbersUsa; a null projection is used with pre-projected geometry and is typically faster to render.\n‚ÄúFallback projections‚Äù‚Äîwhen you pass a function rather than a projection to path.projection‚Äîare no longer supported. For geographic projections, use d3.geoProjection or d3.geoProjectionMutator to define a custom projection. For arbitrary geometry transformations, implement the stream interface; see also d3.geoTransform. The ‚Äúraw‚Äù projections (e.g., d3.geo.equirectangular.raw) are no longer exported."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#hierarchies-d3-hierarchy",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#hierarchies-d3-hierarchy",
    "title": "Changes in D3 6.0",
    "section": "Hierarchies (d3-hierarchy)",
    "text": "Hierarchies (d3-hierarchy)\nPursuant to the great namespace flattening:\n\nd3.layout.cluster ‚Ü¶ d3.cluster\nd3.layout.hierarchy ‚Ü¶ d3.hierarchy\nd3.layout.pack ‚Ü¶ d3.pack\nd3.layout.partition ‚Ü¶ d3.partition\nd3.layout.tree ‚Ü¶ d3.tree\nd3.layout.treemap ‚Ü¶ d3.treemap\n\nAs an alternative to using JSON to represent hierarchical data (such as the ‚Äúflare.json format‚Äù used by many D3 examples), the new d3.stratify operator simplifies the conversion of tabular data to hierarchical data! This is convenient if you already have data in a tabular format, such as the result of a SQL query or a CSV file:\nname,parent\nEve,\nCain,Eve\nSeth,Eve\nEnos,Seth\nNoam,Seth\nAbel,Eve\nAwan,Eve\nEnoch,Awan\nAzura,Eve\nTo convert this to a root node:\nvar root = d3.stratify()\n    .id(function(d) { return d.name; })\n    .parentId(function(d) { return d.parent; })\n    (nodes);\nThe resulting root can be passed to d3.tree to produce a tree diagram like this:\n\nRoot nodes can also be created from JSON data using d3.hierarchy. The hierarchy layouts now take these root nodes as input rather than operating directly on JSON data, which helps to provide a cleaner separation between the input data and the computed layout. (For example, use node.copy to isolate layout changes.) It also simplifies the API: rather than each hierarchy layout needing to implement value and sorting accessors, there are now generic node.sum and node.sort methods that work with any hierarchy layout.\nThe new d3.hierarchy API also provides a richer set of methods for manipulating hierarchical data. For example, to generate an array of all nodes in topological order, use node.descendants; for just leaf nodes, use node.leaves. To highlight the ancestors of a given node on mouseover, use node.ancestors. To generate an array of {source, target} links for a given hierarchy, use node.links; this replaces treemap.links and similar methods on the other layouts. The new node.path method replaces d3.layout.bundle; see also d3.curveBundle for hierarchical edge bundling.\nThe hierarchy layouts have been rewritten using new, non-recursive traversal methods (node.each, node.eachAfter and node.eachBefore), improving performance on large datasets. The d3.tree layout no longer uses a node._ field to store temporary state during layout.\nTreemap tiling is now extensible via treemap.tile! The default squarified tiling algorithm, d3.treemapSquarify, has been completely rewritten, improving performance and fixing bugs in padding and rounding. The treemap.sticky method has been replaced with the d3.treemapResquarify, which is identical to d3.treemapSquarify except it performs stable neighbor-preserving updates. The treemap.ratio method has been replaced with squarify.ratio. And there‚Äôs a new d3.treemapBinary for binary treemaps!\nTreemap padding has also been improved. The treemap now distinguishes between outer padding that separates a parent from its children, and inner padding that separates adjacent siblings. You can set the top-, right-, bottom- and left-outer padding separately. There are new examples for the traditional nested treemap and for L√º and Fogarty‚Äôs cascaded treemap. And there‚Äôs a new example demonstrating d3.nest with d3.treemap.\nThe space-filling layouts d3.treemap and d3.partition now output x0, x1, y0, y1 on each node instead of x0, dx, y0, dy. This improves accuracy by ensuring that the edges of adjacent cells are exactly equal, rather than sometimes being slightly off due to floating point math. The partition layout now supports rounding and padding.\nThe circle-packing layout, d3.pack, has been completely rewritten to better implement Wang et al.‚Äôs algorithm, fixing major bugs and improving results! Welzl‚Äôs algorithm is now used to compute the exact smallest enclosing circle for each parent, rather than the approximate answer used by Wang et al.¬†The 3.x output is shown on the left; 4.0 is shown on the right:\n \nA non-hierarchical implementation is also available as d3.packSiblings, and the smallest enclosing circle implementation is available as d3.packEnclose. Pack padding now applies between a parent and its children, as well as between adjacent siblings. In addition, you can now specify padding as a function that is computed dynamically for each parent."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#internals",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#internals",
    "title": "Changes in D3 6.0",
    "section": "Internals",
    "text": "Internals\nThe d3.rebind method has been removed. (See the 3.x source.) If you want to wrap a getter-setter method, the recommend pattern is to implement a wrapper method and check the return value. For example, given a component that uses an internal dispatch, component.on can rebind dispatch.on as follows:\ncomponent.on = function() {\n  var value = dispatch.on.apply(dispatch, arguments);\n  return value === dispatch ? component : value;\n};\nThe d3.functor method has been removed. (See the 3.x source.) If you want to promote a constant value to a function, the recommended pattern is to implement a closure that returns the constant value. If desired, you can use a helper method as follows:\nfunction constant(x) {\n  return function() {\n    return x;\n  };\n}\nGiven a value x, to promote x to a function if it is not already:\nvar fx = typeof x === \"function\" ? x : constant(x);"
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#interpolators-d3-interpolate",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#interpolators-d3-interpolate",
    "title": "Changes in D3 6.0",
    "section": "Interpolators (d3-interpolate)",
    "text": "Interpolators (d3-interpolate)\nThe d3.interpolate method no longer delegates to d3.interpolators, which has been removed; its behavior is now defined by the library. It is now slightly faster in the common case that b is a number. It only uses d3.interpolateRgb if b is a valid CSS color specifier (and not approximately one). And if the end value b is null, undefined, true or false, d3.interpolate now returns a constant function which always returns b.\nThe behavior of d3.interpolateObject and d3.interpolateArray has changed slightly with respect to properties or elements in the start value a that do not exist in the end value b: these properties and elements are now ignored, such that the ending value of the interpolator at t = 1 is now precisely equal to b. So, in 3.x:\nd3.interpolateObject({foo: 2, bar: 1}, {foo: 3})(0.5); // {bar: 1, foo: 2.5} in 3.x\nWhereas in 4.0, a.bar is ignored:\nd3.interpolateObject({foo: 2, bar: 1}, {foo: 3})(0.5); // {foo: 2.5} in 4.0\nIf a or b are undefined or not an object, they are now implicitly converted to the empty object or empty array as appropriate, rather than throwing a TypeError.\nThe d3.interpolateTransform interpolator has been renamed to d3.interpolateTransformSvg, and there is a new d3.interpolateTransformCss to interpolate CSS transforms! This allows d3-transition to automatically interpolate both the SVG transform attribute and the CSS transform style property. (Note, however, that only 2D CSS transforms are supported.) The d3.transform method has been removed.\nColor space interpolators now interpolate opacity (see d3-color) and return rgb(‚Ä¶) or rgba(‚Ä¶) CSS color specifier strings rather than using the RGB hexadecimal format. This is necessary to support opacity interpolation, but is also beneficial because it matches CSS computed values. When a channel in the start color a is undefined, color interpolators now use the corresponding channel value from the end color b, or vice versa. This logic previously applied to some channels (such as saturation in HSL), but now applies to all channels in all color spaces, and is especially useful when interpolating to or from transparent.\nThere are now ‚Äúlong‚Äù versions of cylindrical color space interpolators: d3.interpolateHslLong, d3.interpolateHclLong and d3.interpolateCubehelixLong. These interpolators use linear interpolation of hue, rather than using the shortest path around the 360¬∞ hue circle. See d3.interpolateRainbow for an example. The Cubehelix color space is now supported by d3-color, and so there are now d3.interpolateCubehelix and d3.interpolateCubehelixLong interpolators.\nGamma-corrected color interpolation is now supported for both RGB and Cubehelix color spaces as interpolate.gamma. For example, to interpolate from purple to orange with a gamma of 2.2 in RGB space:\nvar interpolate = d3.interpolateRgb.gamma(2.2)(\"purple\", \"orange\");\nThere are new interpolators for uniform non-rational B-splines! These are useful for smoothly interpolating between an arbitrary sequence of values from t = 0 to t = 1, such as to generate a smooth color gradient from a discrete set of colors. The d3.interpolateBasis and d3.interpolateBasisClosed interpolators generate one-dimensional B-splines, while d3.interpolateRgbBasis and d3.interpolateRgbBasisClosed generate three-dimensional B-splines through RGB color space. These are used by d3-scale-chromatic to generate continuous color scales from ColorBrewer‚Äôs discrete color schemes, such as PiYG.\nThere‚Äôs also now a d3.quantize method for generating uniformly-spaced discrete samples from a continuous interpolator. This is useful for taking one of the built-in color scales (such as d3.interpolateViridis) and quantizing it for use with d3.scaleQuantize, d3.scaleQuantile or d3.scaleThreshold."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#paths-d3-path",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#paths-d3-path",
    "title": "Changes in D3 6.0",
    "section": "Paths (d3-path)",
    "text": "Paths (d3-path)\nThe d3.path serializer implements the CanvasPathMethods API, allowing you to write code that can render to either Canvas or SVG. For example, given some code that draws to a canvas:\nfunction drawCircle(context, radius) {\n  context.moveTo(radius, 0);\n  context.arc(0, 0, radius, 0, 2 * Math.PI);\n}\nYou can render to SVG as follows:\nvar context = d3.path();\ndrawCircle(context, 40);\npathElement.setAttribute(\"d\", context.toString());\nThe path serializer enables d3-shape to support both Canvas and SVG; see line.context and area.context, for example."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#polygons-d3-polygon",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#polygons-d3-polygon",
    "title": "Changes in D3 6.0",
    "section": "Polygons (d3-polygon)",
    "text": "Polygons (d3-polygon)\nThere‚Äôs no longer a d3.geom.polygon constructor; instead you just pass an array of vertices to the polygon methods. So instead of polygon.area and polygon.centroid, there‚Äôs d3.polygonArea and d3.polygonCentroid. There are also new d3.polygonContains and d3.polygonLength methods. There‚Äôs no longer an equivalent to polygon.clip, but if Sutherland‚ÄìHodgman clipping is needed, please file a feature request.\nThe d3.geom.hull operator has been simplified: instead of an operator with hull.x and hull.y accessors, there‚Äôs just the d3.polygonHull method which takes an array of points and returns the convex hull."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#quadtrees-d3-quadtree",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#quadtrees-d3-quadtree",
    "title": "Changes in D3 6.0",
    "section": "Quadtrees (d3-quadtree)",
    "text": "Quadtrees (d3-quadtree)\nThe d3.geom.quadtree method has been replaced by d3.quadtree. 4.0 removes the concept of quadtree ‚Äúgenerators‚Äù (configurable functions that build a quadtree from an array of data); there are now just quadtrees, which you can create via d3.quadtree and add data to via quadtree.add and quadtree.addAll. This code in 3.x:\nvar quadtree = d3.geom.quadtree()\n    .extent([[0, 0], [width, height]])\n    (data);\nCan be rewritten in 4.0 as:\nvar quadtree = d3.quadtree()\n    .extent([[0, 0], [width, height]])\n    .addAll(data);\nThe new quadtree implementation is vastly improved! It is no longer recursive, avoiding stack overflows when there are large numbers of coincident points. The internal storage is now more efficient, and the implementation is also faster; constructing a quadtree of 1M normally-distributed points takes about one second in 4.0, as compared to three seconds in 3.x.\nThe change in internal node structure affects quadtree.visit: use node.length to distinguish leaf nodes from internal nodes. For example, to iterate over all data in a quadtree:\nquadtree.visit(function(node) {\n  if (!node.length) {\n    do {\n      console.log(node.data);\n    } while (node = node.next)\n  }\n});\nThere‚Äôs a new quadtree.visitAfter method for visiting nodes in post-order traversal. This feature is used in d3-force to implement the Barnes‚ÄìHut approximation.\nYou can now remove data from a quadtree using quadtree.remove and quadtree.removeAll. When adding data to a quadtree, the quadtree will now expand its extent by repeated doubling if the new point is outside the existing extent of the quadtree. There are also quadtree.extent and quadtree.cover methods for explicitly expanding the extent of the quadtree after creation.\nQuadtrees support several new utility methods: quadtree.copy returns a copy of the quadtree sharing the same data; quadtree.data generates an array of all data in the quadtree; quadtree.size returns the number of data points in the quadtree; and quadtree.root returns the root node, which is useful for manual traversal of the quadtree. The quadtree.find method now takes an optional search radius, which is useful for pointer-based selection in force-directed graphs."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#queues-d3-queue",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#queues-d3-queue",
    "title": "Changes in D3 6.0",
    "section": "Queues (d3-queue)",
    "text": "Queues (d3-queue)\nFormerly known as Queue.js and queue-async, d3.queue is now included in the default bundle, making it easy to load data files in parallel. It has been rewritten with fewer closures to improve performance, and there are now stricter checks in place to guarantee well-defined behavior. You can now use instanceof d3.queue and inspect the queue‚Äôs internal private state."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#random-numbers-d3-random",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#random-numbers-d3-random",
    "title": "Changes in D3 6.0",
    "section": "Random Numbers (d3-random)",
    "text": "Random Numbers (d3-random)\nPursuant to the great namespace flattening, the random number generators have new names:\n\nd3.random.normal ‚Ü¶ d3.randomNormal\nd3.random.logNormal ‚Ü¶ d3.randomLogNormal\nd3.random.bates ‚Ü¶ d3.randomBates\nd3.random.irwinHall ‚Ü¶ d3.randomIrwinHall\n\nThere are also new random number generators for exponential and uniform distributions. The normal and log-normal random generators have been optimized."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#requests-d3-request",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#requests-d3-request",
    "title": "Changes in D3 6.0",
    "section": "Requests (d3-request)",
    "text": "Requests (d3-request)\nThe d3.xhr method has been renamed to d3.request. Basic authentication is now supported using request.user and request.password. You can now configure a timeout using request.timeout.\nIf an error occurs, the corresponding ProgressEvent of type ‚Äúerror‚Äù is now passed to the error listener, rather than the XMLHttpRequest. Likewise, the ProgressEvent is passed to progress event listeners, rather than using d3.event. If d3.xml encounters an error parsing XML, this error is now reported to error listeners rather than returning a null response.\nThe d3.request, d3.text and d3.xml methods no longer take an optional mime type as the second argument; use request.mimeType instead. For example:\nd3.xml(\"file.svg\").mimeType(\"image/svg+xml\").get(function(error, svg) {\n  ‚Ä¶\n});\nWith the exception of d3.html and d3.xml, Node is now supported via node-XMLHttpRequest."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#scales-d3-scale",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#scales-d3-scale",
    "title": "Changes in D3 6.0",
    "section": "Scales (d3-scale)",
    "text": "Scales (d3-scale)\nPursuant to the great namespace flattening:\n\nd3.scale.linear ‚Ü¶ d3.scaleLinear\nd3.scale.sqrt ‚Ü¶ d3.scaleSqrt\nd3.scale.pow ‚Ü¶ d3.scalePow\nd3.scale.log ‚Ü¶ d3.scaleLog\nd3.scale.quantize ‚Ü¶ d3.scaleQuantize\nd3.scale.threshold ‚Ü¶ d3.scaleThreshold\nd3.scale.quantile ‚Ü¶ d3.scaleQuantile\nd3.scale.identity ‚Ü¶ d3.scaleIdentity\nd3.scale.ordinal ‚Ü¶ d3.scaleOrdinal\nd3.time.scale ‚Ü¶ d3.scaleTime\nd3.time.scale.utc ‚Ü¶ d3.scaleUtc\n\nScales now generate ticks in the same order as the domain: if you have a descending domain, you now get descending ticks. This change affects the order of tick elements generated by axes. For example:\nd3.scaleLinear().domain([10, 0]).ticks(5); // [10, 8, 6, 4, 2, 0]\nLog tick formatting now assumes a default count of ten, not Infinity, if not specified. Log scales with domains that span many powers (such as from 1e+3 to 1e+29) now return only one tick per power rather than returning base ticks per power. Non-linear quantitative scales are slightly more accurate.\nYou can now control whether an ordinal scale‚Äôs domain is implicitly extended when the scale is passed a value that is not already in its domain. By default, ordinal.unknown is d3.scaleImplicit, causing unknown values to be added to the domain:\nvar x = d3.scaleOrdinal()\n    .domain([0, 1])\n    .range([\"red\", \"green\", \"blue\"]);\n\nx.domain(); // [0, 1]\nx(2); // \"blue\"\nx.domain(); // [0, 1, 2]\nBy setting ordinal.unknown, you instead define the output value for unknown inputs. This is particularly useful for choropleth maps where you want to assign a color to missing data.\nvar x = d3.scaleOrdinal()\n    .domain([0, 1])\n    .range([\"red\", \"green\", \"blue\"])\n    .unknown(undefined);\n\nx.domain(); // [0, 1]\nx(2); // undefined\nx.domain(); // [0, 1]\nThe ordinal.rangeBands and ordinal.rangeRoundBands methods have been replaced with a new subclass of ordinal scale: band scales. The following code in 3.x:\nvar x = d3.scale.ordinal()\n    .domain([\"a\", \"b\", \"c\"])\n    .rangeBands([0, width]);\nIs equivalent to this in 4.0:\nvar x = d3.scaleBand()\n    .domain([\"a\", \"b\", \"c\"])\n    .range([0, width]);\nThe new band.padding, band.paddingInner and band.paddingOuter methods replace the optional arguments to ordinal.rangeBands. The new band.bandwidth and band.step methods replace ordinal.rangeBand. There‚Äôs also a new band.align method which you can use to control how the extra space outside the bands is distributed, say to shift columns closer to the y-axis.\nSimilarly, the ordinal.rangePoints and ordinal.rangeRoundPoints methods have been replaced with a new subclass of ordinal scale: point scales. The following code in 3.x:\nvar x = d3.scale.ordinal()\n    .domain([\"a\", \"b\", \"c\"])\n    .rangePoints([0, width]);\nIs equivalent to this in 4.0:\nvar x = d3.scalePoint()\n    .domain([\"a\", \"b\", \"c\"])\n    .range([0, width]);\nThe new point.padding method replaces the optional padding argument to ordinal.rangePoints. Like ordinal.rangeBand with ordinal.rangePoints, the point.bandwidth method always returns zero; a new point.step method returns the interval between adjacent points.\nThe ordinal scale constructor now takes an optional range for a shorter alternative to ordinal.range. This is especially useful now that the categorical color scales have been changed to simple arrays of colors rather than specialized ordinal scale constructors:\n\nd3.scale.category10 ‚Ü¶ d3.schemeCategory10\nd3.scale.category20 ‚Ü¶ d3.schemeCategory20\nd3.scale.category20b ‚Ü¶ d3.schemeCategory20b\nd3.scale.category20c ‚Ü¶ d3.schemeCategory20c\n\nThe following code in 3.x:\nvar color = d3.scale.category10();\nIs equivalent to this in 4.0:\nvar color = d3.scaleOrdinal(d3.schemeCategory10);\nSequential scales, are a new class of scales with a fixed output interpolator instead of a range. Typically these scales are used to implement continuous sequential or diverging color schemes. Inspired by Matplotlib‚Äôs new perceptually-motived colormaps, 4.0 now features viridis, inferno, magma, plasma interpolators for use with sequential scales. Using d3.quantize, these interpolators can also be applied to quantile, quantize and threshold scales.\n   \n4.0 also ships new Cubehelix schemes, including Dave Green‚Äôs default and a cyclical rainbow inspired by Matteo Niccoli:\n   \nFor even more sequential and categorical color schemes, see d3-scale-chromatic.\nFor an introduction to scales, see Introducing d3-scale."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#selections-d3-selection",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#selections-d3-selection",
    "title": "Changes in D3 6.0",
    "section": "Selections (d3-selection)",
    "text": "Selections (d3-selection)\nSelections no longer subclass Array using prototype chain injection; they are now plain objects, improving performance. The internal fields (selection._groups, selection._parents) are private; please use the documented public API to manipulate selections. The new selection.nodes method generates an array of all nodes in a selection.\nSelections are now immutable: the elements and parents in a selection never change. (The elements‚Äô attributes and content will of course still be modified!) The selection.sort and selection.data methods now return new selections rather than modifying the selection in-place. In addition, selection.append no longer merges entering nodes into the update selection; use selection.merge to combine enter and update after a data join. For example, the following general update pattern in 3.x:\nvar circle = svg.selectAll(\"circle\").data(data) // UPDATE\n    .style(\"fill\", \"blue\");\n\ncircle.exit().remove(); // EXIT\n\ncircle.enter().append(\"circle\") // ENTER; modifies UPDATE! üå∂\n    .style(\"fill\", \"green\");\n\ncircle // ENTER + UPDATE\n    .style(\"stroke\", \"black\");\nWould be rewritten in 4.0 as:\nvar circle = svg.selectAll(\"circle\").data(data) // UPDATE\n    .style(\"fill\", \"blue\");\n\ncircle.exit().remove(); // EXIT\n\ncircle.enter().append(\"circle\") // ENTER\n    .style(\"fill\", \"green\")\n  .merge(circle) // ENTER + UPDATE\n    .style(\"stroke\", \"black\");\nThis change is discussed further in What Makes Software Good.\nIn 3.x, the selection.enter and selection.exit methods were undefined until you called selection.data, resulting in a TypeError if you attempted to access them. In 4.0, now they simply return the empty selection if the selection has not been joined to data.\nIn 3.x, selection.append would always append the new element as the last child of its parent. A little-known trick was to use selection.insert without specifying a before selector when entering nodes, causing the entering nodes to be inserted before the following element in the update selection. In 4.0, this is now the default behavior of selection.append; if you do not specify a before selector to selection.insert, the inserted element is appended as the last child. This change makes the general update pattern preserve the relative order of elements and data. For example, given the following DOM:\n&lt;div&gt;a&lt;/div&gt;\n&lt;div&gt;b&lt;/div&gt;\n&lt;div&gt;f&lt;/div&gt;\nAnd the following code:\nvar div = d3.select(\"body\").selectAll(\"div\")\n  .data([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], function(d) { return d || this.textContent; });\n\ndiv.enter().append(\"div\")\n    .text(function(d) { return d; });\nThe resulting DOM will be:\n&lt;div&gt;a&lt;/div&gt;\n&lt;div&gt;b&lt;/div&gt;\n&lt;div&gt;c&lt;/div&gt;\n&lt;div&gt;d&lt;/div&gt;\n&lt;div&gt;e&lt;/div&gt;\n&lt;div&gt;f&lt;/div&gt;\nThus, the entering c, d and e are inserted before f, since f is the following element in the update selection. Although this behavior is sufficient to preserve order if the new data‚Äôs order is stable, if the data changes order, you must still use selection.order to reorder elements.\nThere is now only one class of selection. 3.x implemented enter selections using a special class with different behavior for enter.append and enter.select; a consequence of this design was that enter selections in 3.x lacked certain methods. In 4.0, enter selections are simply normal selections; they have the same methods and the same behavior. Placeholder enter nodes now implement node.appendChild, node.insertBefore, node.querySelector, and node.querySelectorAll.\nThe selection.data method has been changed slightly with respect to duplicate keys. In 3.x, if multiple data had the same key, the duplicate data would be ignored and not included in enter, update or exit; in 4.0 the duplicate data is always put in the enter selection. In both 3.x and 4.0, if multiple elements have the same key, the duplicate elements are put in the exit selection. Thus, 4.0‚Äôs behavior is now symmetric for enter and exit, and the general update pattern will now produce a DOM that matches the data even if there are duplicate keys.\nSelections have several new methods! Use selection.raise to move the selected elements to the front of their siblings, so that they are drawn on top; use selection.lower to move them to the back. Use selection.dispatch to dispatch a custom event to event listeners.\nWhen called in getter mode, selection.data now returns the data for all elements in the selection, rather than just the data for the first group of elements. The selection.call method no longer sets the this context when invoking the specified function; the selection is passed as the first argument to the function, so use that. The selection.on method now accepts multiple whitespace-separated typenames, so you can add or remove multiple listeners simultaneously. For example:\nselection.on(\"mousedown touchstart\", function() {\n  console.log(d3.event.type);\n});\nThe arguments passed to callback functions has changed slightly in 4.0 to be more consistent. The standard arguments are the element‚Äôs datum (d), the element‚Äôs index (i), and the element‚Äôs group (nodes), with this as the element. The slight exception to this convention is selection.data, which is evaluated for each group rather than each element; it is passed the group‚Äôs parent datum (d), the group index (i), and the selection‚Äôs parents (parents), with this as the group‚Äôs parent.\nThe new d3.local provides a mechanism for defining local variables: state that is bound to DOM elements, and available to any descendant element. This can be a convenient alternative to using selection.each or storing local state in data.\nThe d3.ns.prefix namespace prefix map has been renamed to d3.namespaces, and the d3.ns.qualify method has been renamed to d3.namespace. Several new low-level methods are now available, as well. d3.matcher is used internally by selection.filter; d3.selector is used by selection.select; d3.selectorAll is used by selection.selectAll; d3.creator is used by selection.append and selection.insert. The new d3.window returns the owner window for a given element, window or document. The new d3.customEvent temporarily sets d3.event while invoking a function, allowing you to implement controls which dispatch custom events; this is used by d3-drag, d3-zoom and d3-brush.\nFor the sake of parsimony, the multi-value methods‚Äîwhere you pass an object to set multiple attributes, styles or properties simultaneously‚Äîhave been extracted to d3-selection-multi and are no longer part of the default bundle. The multi-value map methods have also been renamed to plural form to reduce overload: selection.attrs, selection.styles and selection.properties."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#shapes-d3-shape",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#shapes-d3-shape",
    "title": "Changes in D3 6.0",
    "section": "Shapes (d3-shape)",
    "text": "Shapes (d3-shape)\nPursuant to the great namespace flattening:\n\nd3.svg.line ‚Ü¶ d3.line\nd3.svg.line.radial ‚Ü¶ d3.radialLine\nd3.svg.area ‚Ü¶ d3.area\nd3.svg.area.radial ‚Ü¶ d3.radialArea\nd3.svg.arc ‚Ü¶ d3.arc\nd3.svg.symbol ‚Ü¶ d3.symbol\nd3.svg.symbolTypes ‚Ü¶ d3.symbolTypes\nd3.layout.pie ‚Ü¶ d3.pie\nd3.layout.stack ‚Ü¶ d3.stack\nd3.svg.diagonal ‚Ü¶ REMOVED (see d3/d3-shape#27)\nd3.svg.diagonal.radial ‚Ü¶ REMOVED\n\nShapes are no longer limited to SVG; they can now render to Canvas! Shape generators now support an optional context: given a CanvasRenderingContext2D, you can render a shape as a canvas path to be filled or stroked. For example, a canvas pie chart might use an arc generator:\nvar arc = d3.arc()\n    .outerRadius(radius - 10)\n    .innerRadius(0)\n    .context(context);\nTo render an arc for a given datum d:\ncontext.beginPath();\narc(d);\ncontext.fill();\nSee line.context, area.context and arc.context for more. Under the hood, shapes use d3-path to serialize canvas path methods to SVG path data when the context is null; thus, shapes are optimized for rendering to canvas. You can also now derive lines from areas. The line shares most of the same accessors, such as line.defined and line.curve, with the area from which it is derived. For example, to render the topline of an area, use area.lineY1; for the baseline, use area.lineY0.\n4.0 introduces a new curve API for specifying how line and area shapes interpolate between data points. The line.interpolate and area.interpolate methods have been replaced with line.curve and area.curve. Curves are implemented using the curve interface rather than as a function that returns an SVG path data string; this allows curves to render to either SVG or Canvas. In addition, line.curve and area.curve now take a function which instantiates a curve for a given context, rather than a string. The full list of equivalents:\n\nlinear ‚Ü¶ d3.curveLinear\nlinear-closed ‚Ü¶ d3.curveLinearClosed\nstep ‚Ü¶ d3.curveStep\nstep-before ‚Ü¶ d3.curveStepBefore\nstep-after ‚Ü¶ d3.curveStepAfter\nbasis ‚Ü¶ d3.curveBasis\nbasis-open ‚Ü¶ d3.curveBasisOpen\nbasis-closed ‚Ü¶ d3.curveBasisClosed\nbundle ‚Ü¶ d3.curveBundle\ncardinal ‚Ü¶ d3.curveCardinal\ncardinal-open ‚Ü¶ d3.curveCardinalOpen\ncardinal-closed ‚Ü¶ d3.curveCardinalClosed\nmonotone ‚Ü¶ d3.curveMonotoneX\n\nBut that‚Äôs not all! 4.0 now provides parameterized Catmull‚ÄìRom splines as proposed by Yuksel et al.. These are available as d3.curveCatmullRom, d3.curveCatmullRomClosed and d3.curveCatmullRomOpen.\n  \nEach curve type can define its own named parameters, replacing line.tension and area.tension. For example, Catmull‚ÄìRom splines are parameterized using catmullRom.alpha and defaults to 0.5, which corresponds to a centripetal spline that avoids self-intersections and overshoot. For a uniform Catmull‚ÄìRom spline instead:\nvar line = d3.line()\n    .curve(d3.curveCatmullRom.alpha(0));\n4.0 fixes the interpretation of the cardinal spline tension parameter, which is now specified as cardinal.tension and defaults to zero for a uniform Catmull‚ÄìRom spline; a tension of one produces a linear curve. The first and last segments of basis and cardinal curves have also been fixed! The undocumented interpolate.reverse field has been removed. Curves can define different behavior for toplines and baselines by counting the sequence of curve.lineStart within curve.areaStart. See the d3.curveStep implementation for an example.\n4.0 fixes numerous bugs in the monotone curve implementation, and introduces d3.curveMonotoneY; this is like d3.curveMonotoneX, except it requires that the input points are monotone in y rather than x, such as for a vertically-oriented line chart. The new d3.curveNatural produces a natural cubic spline. The default Œ≤ for d3.curveBundle is now 0.85, rather than 0.7, matching the values used by Holten. 4.0 also has a more robust implementation of arc padding; see arc.padAngle and arc.padRadius.\n4.0 introduces a new symbol type API. Symbol types are passed to symbol.type in place of strings. The equivalents are:\n\ncircle ‚Ü¶ d3.symbolCircle\ncross ‚Ü¶ d3.symbolCross\ndiamond ‚Ü¶ d3.symbolDiamond\nsquare ‚Ü¶ d3.symbolSquare\ntriangle-down ‚Ü¶ REMOVED\ntriangle-up ‚Ü¶ d3.symbolTriangle\nADDED ‚Ü¶ d3.symbolStar\nADDED ‚Ü¶ d3.symbolWye\n\nThe full set of symbol types is now:\n\nLastly, 4.0 overhauls the stack layout API, replacing d3.layout.stack with d3.stack. The stack generator no longer needs an x-accessor. In addition, the API has been simplified: the stack generator now accepts tabular input, such as this array of objects:\nvar data = [\n  {month: new Date(2015, 0, 1), apples: 3840, bananas: 1920, cherries: 960, dates: 400},\n  {month: new Date(2015, 1, 1), apples: 1600, bananas: 1440, cherries: 960, dates: 400},\n  {month: new Date(2015, 2, 1), apples:  640, bananas:  960, cherries: 640, dates: 400},\n  {month: new Date(2015, 3, 1), apples:  320, bananas:  480, cherries: 640, dates: 400}\n];\nTo generate the stack layout, first define a stack generator, and then apply it to the data:\nvar stack = d3.stack()\n    .keys([\"apples\", \"bananas\", \"cherries\", \"dates\"])\n    .order(d3.stackOrderNone)\n    .offset(d3.stackOffsetNone);\n\nvar series = stack(data);\nThe resulting array has one element per series. Each series has one point per month, and each point has a lower and upper value defining the baseline and topline:\n[\n  [[   0, 3840], [   0, 1600], [   0,  640], [   0,  320]], // apples\n  [[3840, 5760], [1600, 3040], [ 640, 1600], [ 320,  800]], // bananas\n  [[5760, 6720], [3040, 4000], [1600, 2240], [ 800, 1440]], // cherries\n  [[6720, 7120], [4000, 4400], [2240, 2640], [1440, 1840]], // dates\n]\nEach series in then typically passed to an area generator to render an area chart, or used to construct rectangles for a bar chart. Stack generators no longer modify the input data, so stack.out has been removed.\nFor an introduction to shapes, see Introducing d3-shape."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#time-formats-d3-time-format",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#time-formats-d3-time-format",
    "title": "Changes in D3 6.0",
    "section": "Time Formats (d3-time-format)",
    "text": "Time Formats (d3-time-format)\nPursuant to the great namespace flattening, the format constructors have new names:\n\nd3.time.format ‚Ü¶ d3.timeFormat\nd3.time.format.utc ‚Ü¶ d3.utcFormat\nd3.time.format.iso ‚Ü¶ d3.isoFormat\n\nThe format.parse method has also been removed in favor of separate d3.timeParse, d3.utcParse and d3.isoParse parser constructors. Thus, this code in 3.x:\nvar parseTime = d3.time.format(\"%c\").parse;\nCan be rewritten in 4.0 as:\nvar parseTime = d3.timeParse(\"%c\");\nThe multi-scale time format d3.time.format.multi has been replaced by d3.scaleTime‚Äôs tick format. Time formats now coerce inputs to dates, and time parsers coerce inputs to strings. The %Z directive now allows more flexible parsing of time zone offsets, such as -0700, -07:00, -07, and Z. The %p directive is now parsed correctly when the locale‚Äôs period name is longer than two characters (e.g., ‚Äúa.m.‚Äù).\nThe default U.S. English locale now uses 12-hour time and a more concise representation of the date. This aligns with local convention and is consistent with date.toLocaleString in Chrome, Firefox and Node:\nvar now = new Date;\nd3.timeFormat(\"%c\")(new Date); // \"6/23/2016, 2:01:33 PM\"\nd3.timeFormat(\"%x\")(new Date); // \"6/23/2016\"\nd3.timeFormat(\"%X\")(new Date); // \"2:01:38 PM\"\nYou can now set the default locale using d3.timeFormatDefaultLocale! The locales are published as JSON to npm.\nThe performance of time formatting and parsing has been improved, and the UTC formatter and parser have a cleaner implementation (that avoids temporarily overriding the Date global)."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#time-intervals-d3-time",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#time-intervals-d3-time",
    "title": "Changes in D3 6.0",
    "section": "Time Intervals (d3-time)",
    "text": "Time Intervals (d3-time)\nPursuant to the great namespace flattening, the local time intervals have been renamed:\n\nADDED ‚Ü¶ d3.timeMillisecond\nd3.time.second ‚Ü¶ d3.timeSecond\nd3.time.minute ‚Ü¶ d3.timeMinute\nd3.time.hour ‚Ü¶ d3.timeHour\nd3.time.day ‚Ü¶ d3.timeDay\nd3.time.sunday ‚Ü¶ d3.timeSunday\nd3.time.monday ‚Ü¶ d3.timeMonday\nd3.time.tuesday ‚Ü¶ d3.timeTuesday\nd3.time.wednesday ‚Ü¶ d3.timeWednesday\nd3.time.thursday ‚Ü¶ d3.timeThursday\nd3.time.friday ‚Ü¶ d3.timeFriday\nd3.time.saturday ‚Ü¶ d3.timeSaturday\nd3.time.week ‚Ü¶ d3.timeWeek\nd3.time.month ‚Ü¶ d3.timeMonth\nd3.time.year ‚Ü¶ d3.timeYear\n\nThe UTC time intervals have likewise been renamed:\n\nADDED ‚Ü¶ d3.utcMillisecond\nd3.time.second.utc ‚Ü¶ d3.utcSecond\nd3.time.minute.utc ‚Ü¶ d3.utcMinute\nd3.time.hour.utc ‚Ü¶ d3.utcHour\nd3.time.day.utc ‚Ü¶ d3.utcDay\nd3.time.sunday.utc ‚Ü¶ d3.utcSunday\nd3.time.monday.utc ‚Ü¶ d3.utcMonday\nd3.time.tuesday.utc ‚Ü¶ d3.utcTuesday\nd3.time.wednesday.utc ‚Ü¶ d3.utcWednesday\nd3.time.thursday.utc ‚Ü¶ d3.utcThursday\nd3.time.friday.utc ‚Ü¶ d3.utcFriday\nd3.time.saturday.utc ‚Ü¶ d3.utcSaturday\nd3.time.week.utc ‚Ü¶ d3.utcWeek\nd3.time.month.utc ‚Ü¶ d3.utcMonth\nd3.time.year.utc ‚Ü¶ d3.utcYear\n\nThe local time range aliases have been renamed:\n\nd3.time.seconds ‚Ü¶ d3.timeSeconds\nd3.time.minutes ‚Ü¶ d3.timeMinutes\nd3.time.hours ‚Ü¶ d3.timeHours\nd3.time.days ‚Ü¶ d3.timeDays\nd3.time.sundays ‚Ü¶ d3.timeSundays\nd3.time.mondays ‚Ü¶ d3.timeMondays\nd3.time.tuesdays ‚Ü¶ d3.timeTuesdays\nd3.time.wednesdays ‚Ü¶ d3.timeWednesdays\nd3.time.thursdays ‚Ü¶ d3.timeThursdays\nd3.time.fridays ‚Ü¶ d3.timeFridays\nd3.time.saturdays ‚Ü¶ d3.timeSaturdays\nd3.time.weeks ‚Ü¶ d3.timeWeeks\nd3.time.months ‚Ü¶ d3.timeMonths\nd3.time.years ‚Ü¶ d3.timeYears\n\nThe UTC time range aliases have been renamed:\n\nd3.time.seconds.utc ‚Ü¶ d3.utcSeconds\nd3.time.minutes.utc ‚Ü¶ d3.utcMinutes\nd3.time.hours.utc ‚Ü¶ d3.utcHours\nd3.time.days.utc ‚Ü¶ d3.utcDays\nd3.time.sundays.utc ‚Ü¶ d3.utcSundays\nd3.time.mondays.utc ‚Ü¶ d3.utcMondays\nd3.time.tuesdays.utc ‚Ü¶ d3.utcTuesdays\nd3.time.wednesdays.utc ‚Ü¶ d3.utcWednesdays\nd3.time.thursdays.utc ‚Ü¶ d3.utcThursdays\nd3.time.fridays.utc ‚Ü¶ d3.utcFridays\nd3.time.saturdays.utc ‚Ü¶ d3.utcSaturdays\nd3.time.weeks.utc ‚Ü¶ d3.utcWeeks\nd3.time.months.utc ‚Ü¶ d3.utcMonths\nd3.time.years.utc ‚Ü¶ d3.utcYears\n\nThe behavior of interval.range (and the convenience aliases such as d3.timeDays) has been changed when step is greater than one. Rather than filtering the returned dates using the field number, interval.range now behaves like d3.range: it simply skips, returning every stepth date. For example, the following code in 3.x returns only odd days of the month:\nd3.time.days(new Date(2016, 4, 28), new Date(2016, 5, 5), 2);\n// [Sun May 29 2016 00:00:00 GMT-0700 (PDT),\n//  Tue May 31 2016 00:00:00 GMT-0700 (PDT),\n//  Wed Jun 01 2016 00:00:00 GMT-0700 (PDT),\n//  Fri Jun 03 2016 00:00:00 GMT-0700 (PDT)]\nNote the returned array of dates does not start on the start date because May 28 is even. Also note that May 31 and June 1 are one day apart, not two! The behavior of d3.timeDays in 4.0 is probably closer to what you expect:\nd3.timeDays(new Date(2016, 4, 28), new Date(2016, 5, 5), 2);\n// [Sat May 28 2016 00:00:00 GMT-0700 (PDT),\n//  Mon May 30 2016 00:00:00 GMT-0700 (PDT),\n//  Wed Jun 01 2016 00:00:00 GMT-0700 (PDT),\n//  Fri Jun 03 2016 00:00:00 GMT-0700 (PDT)]\nIf you want a filtered view of a time interval (say to guarantee that two overlapping ranges are consistent, such as when generating time scale ticks), you can use the new interval.every method or its more general cousin interval.filter:\nd3.timeDay.every(2).range(new Date(2016, 4, 28), new Date(2016, 5, 5));\n// [Sun May 29 2016 00:00:00 GMT-0700 (PDT),\n//  Tue May 31 2016 00:00:00 GMT-0700 (PDT),\n//  Wed Jun 01 2016 00:00:00 GMT-0700 (PDT),\n//  Fri Jun 03 2016 00:00:00 GMT-0700 (PDT)]\nTime intervals now expose an interval.count method for counting the number of interval boundaries after a start date and before or equal to an end date. This replaces d3.time.dayOfYear and related methods in 3.x. For example, this code in 3.x:\nvar now = new Date;\nd3.time.dayOfYear(now); // 165\nCan be rewritten in 4.0 as:\nvar now = new Date;\nd3.timeDay.count(d3.timeYear(now), now); // 165\nLikewise, in place of 3.x‚Äôs d3.time.weekOfYear, in 4.0 you would say:\nd3.timeWeek.count(d3.timeYear(now), now); // 24\nThe new interval.count is of course more general. For example, you can use it to compute hour-of-week for a heatmap:\nd3.timeHour.count(d3.timeWeek(now), now); // 64\nHere are all the equivalences from 3.x to 4.0:\n\nd3.time.dayOfYear ‚Ü¶ d3.timeDay.count\nd3.time.sundayOfYear ‚Ü¶ d3.timeSunday.count\nd3.time.mondayOfYear ‚Ü¶ d3.timeMonday.count\nd3.time.tuesdayOfYear ‚Ü¶ d3.timeTuesday.count\nd3.time.wednesdayOfYear ‚Ü¶ d3.timeWednesday.count\nd3.time.thursdayOfYear ‚Ü¶ d3.timeThursday.count\nd3.time.fridayOfYear ‚Ü¶ d3.timeFriday.count\nd3.time.saturdayOfYear ‚Ü¶ d3.timeSaturday.count\nd3.time.weekOfYear ‚Ü¶ d3.timeWeek.count\nd3.time.dayOfYear.utc ‚Ü¶ d3.utcDay.count\nd3.time.sundayOfYear.utc ‚Ü¶ d3.utcSunday.count\nd3.time.mondayOfYear.utc ‚Ü¶ d3.utcMonday.count\nd3.time.tuesdayOfYear.utc ‚Ü¶ d3.utcTuesday.count\nd3.time.wednesdayOfYear.utc ‚Ü¶ d3.utcWednesday.count\nd3.time.thursdayOfYear.utc ‚Ü¶ d3.utcThursday.count\nd3.time.fridayOfYear.utc ‚Ü¶ d3.utcFriday.count\nd3.time.saturdayOfYear.utc ‚Ü¶ d3.utcSaturday.count\nd3.time.weekOfYear.utc ‚Ü¶ d3.utcWeek.count\n\nD3 4.0 now also lets you define custom time intervals using d3.timeInterval. The d3.timeYear, d3.utcYear, d3.timeMillisecond and d3.utcMillisecond intervals have optimized implementations of interval.every, which is necessary to generate time ticks for very large or very small domains efficiently. More generally, the performance of time intervals has been improved, and time intervals now do a better job with respect to daylight savings in various locales."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#timers-d3-timer",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#timers-d3-timer",
    "title": "Changes in D3 6.0",
    "section": "Timers (d3-timer)",
    "text": "Timers (d3-timer)\nIn D3 3.x, the only way to stop a timer was for its callback to return true. For example, this timer stops after one second:\nd3.timer(function(elapsed) {\n  console.log(elapsed);\n  return elapsed &gt;= 1000;\n});\nIn 4.0, use timer.stop instead:\nvar t = d3.timer(function(elapsed) {\n  console.log(elapsed);\n  if (elapsed &gt;= 1000) {\n    t.stop();\n  }\n});\nThe primary benefit of timer.stop is that timers are not required to self-terminate: they can be stopped externally, allowing for the immediate and synchronous disposal of associated resources, and the separation of concerns. The above is equivalent to:\nvar t = d3.timer(function(elapsed) {\n  console.log(elapsed);\n});\n\nd3.timeout(function() {\n  t.stop();\n}, 1000);\nThis improvement extends to d3-transition: now when a transition is interrupted, its resources are immediately freed rather than having to wait for transition to start.\n4.0 also introduces a new timer.restart method for restarting timers, for replacing the callback of a running timer, or for changing its delay or reference time. Unlike timer.stop followed by d3.timer, timer.restart maintains the invocation priority of an existing timer: it guarantees that the order of invocation of active timers remains the same. The d3.timer.flush method has been renamed to d3.timerFlush.\nSome usage patterns in D3 3.x could cause the browser to hang when a background page returned to the foreground. For example, the following code schedules a transition every second:\nsetInterval(function() {\n  d3.selectAll(\"div\").transition().call(someAnimation); // BAD\n}, 1000);\nIf such code runs in the background for hours, thousands of queued transitions will try to run simultaneously when the page is foregrounded. D3 4.0 avoids this hang by freezing time in the background: when a page is in the background, time does not advance, and so no queue of timers accumulates to run when the page returns to the foreground. Use d3.timer instead of transitions to schedule a long-running animation, or use d3.timeout and d3.interval in place of setTimeout and setInterval to prevent transitions from being queued in the background:\nd3.interval(function() {\n  d3.selectAll(\"div\").transition().call(someAnimation); // GOOD\n}, 1000);\nBy freezing time in the background, timers are effectively ‚Äúunaware‚Äù of being backgrounded. It‚Äôs like nothing happened! 4.0 also now uses high-precision time (performance.now) where available; the current time is available as d3.now."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#transitions-d3-transition",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#transitions-d3-transition",
    "title": "Changes in D3 6.0",
    "section": "Transitions (d3-transition)",
    "text": "Transitions (d3-transition)\nThe selection.transition method now takes an optional transition instance which can be used to synchronize a new transition with an existing transition. (This change is discussed further in What Makes Software Good?) For example:\nvar t = d3.transition()\n    .duration(750)\n    .ease(d3.easeLinear);\n\nd3.selectAll(\".apple\").transition(t)\n    .style(\"fill\", \"red\");\n\nd3.selectAll(\".orange\").transition(t)\n    .style(\"fill\", \"orange\");\nTransitions created this way inherit timing from the closest ancestor element, and thus are synchronized even when the referenced transition has variable timing such as a staggered delay. This method replaces the deeply magical behavior of transition.each in 3.x; in 4.0, transition.each is identical to selection.each. Use the new transition.on method to listen to transition events.\nThe meaning of transition.delay has changed for chained transitions created by transition.transition. The specified delay is now relative to the previous transition in the chain, rather than the first transition in the chain; this makes it easier to insert interstitial pauses. For example:\nd3.selectAll(\".apple\")\n  .transition() // First fade to green.\n    .style(\"fill\", \"green\")\n  .transition() // Then red.\n    .style(\"fill\", \"red\")\n  .transition() // Wait one second. Then brown, and remove.\n    .delay(1000)\n    .style(\"fill\", \"brown\")\n    .remove();\nTime is now frozen in the background; see d3-timer for more information. While it was previously the case that transitions did not run in the background, now they pick up where they left off when the page returns to the foreground. This avoids page hangs by not scheduling an unbounded number of transitions in the background. If you want to schedule an infinitely-repeating transition, use transition events, or use d3.timeout and d3.interval in place of setTimeout and setInterval.\nThe selection.interrupt method now cancels all scheduled transitions on the selected elements, in addition to interrupting any active transition. When transitions are interrupted, any resources associated with the transition are now released immediately, rather than waiting until the transition starts, improving performance. (See also timer.stop.) The new d3.interrupt method is an alternative to selection.interrupt for quickly interrupting a single node.\nThe new d3.active method allows you to select the currently-active transition on a given node, if any. This is useful for modifying in-progress transitions and for scheduling infinitely-repeating transitions. For example, this transition continuously oscillates between red and blue:\nd3.select(\"circle\")\n  .transition()\n    .on(\"start\", function repeat() {\n        d3.active(this)\n            .style(\"fill\", \"red\")\n          .transition()\n            .style(\"fill\", \"blue\")\n          .transition()\n            .on(\"start\", repeat);\n      });\nThe life cycle of a transition is now more formally defined and enforced. For example, attempting to change the duration of a running transition now throws an error rather than silently failing. The transition.remove method has been fixed if multiple transition names are in use: the element is only removed if it has no scheduled transitions, regardless of name. The transition.ease method now always takes an easing function, not a string. When a transition ends, the tweens are invoked one last time with t equal to exactly 1, regardless of the associated easing function.\nAs with selections in 4.0, all transition callback functions now receive the standard arguments: the element‚Äôs datum (d), the element‚Äôs index (i), and the element‚Äôs group (nodes), with this as the element. This notably affects transition.attrTween and transition.styleTween, which no longer pass the tween function the current attribute or style value as the third argument. The transition.attrTween and transition.styleTween methods can now be called in getter modes for debugging or to share tween definitions between transitions.\nHomogenous transitions are now optimized! If all elements in a transition share the same tween, interpolator, or event listeners, this state is now shared across the transition rather than separately allocated for each element. 4.0 also uses an optimized default interpolator in place of d3.interpolate for transition.attr and transition.style. And transitions can now interpolate both CSS and SVG transforms.\nFor reusable components that support transitions, such as axes, a new transition.selection method returns the selection that corresponds to a given transition. There is also a new transition.merge method that is equivalent to selection.merge.\nFor the sake of parsimony, the multi-value map methods have been extracted to d3-selection-multi and are no longer part of the default bundle. The multi-value map methods have also been renamed to plural form to reduce overload: transition.attrs and transition.styles."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#voronoi-diagrams-d3-voronoi",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#voronoi-diagrams-d3-voronoi",
    "title": "Changes in D3 6.0",
    "section": "Voronoi Diagrams (d3-voronoi)",
    "text": "Voronoi Diagrams (d3-voronoi)\nThe d3.geom.voronoi method has been renamed to d3.voronoi, and the voronoi.clipExtent method has been renamed to voronoi.extent. The undocumented polygon.point property in 3.x, which is the element in the input data corresponding to the polygon, has been renamed to polygon.data.\nCalling voronoi now returns the full Voronoi diagram, which includes topological information: each Voronoi edge exposes edge.left and edge.right specifying the sites on either side of the edge, and each Voronoi cell is defined as an array of these edges and a corresponding site. The Voronoi diagram can be used to efficiently compute both the Voronoi and Delaunay tessellations for a set of points: diagram.polygons, diagram.links, and diagram.triangles. The new topology is also useful in conjunction with TopoJSON; see the Voronoi topology example.\nThe voronoi.polygons and diagram.polygons now require an extent; there is no longer an implicit extent of ¬±1e6. The voronoi.links, voronoi.triangles, diagram.links and diagram.triangles are now affected by the clip extent: as the Delaunay is computed as the dual of the Voronoi, two sites are only linked if the clipped cells are touching. To compute the Delaunay triangulation without respect to clipping, set the extent to null.\nThe Voronoi generator finally has well-defined behavior for coincident vertices: the first of a set of coincident points has a defined cell, while the subsequent duplicate points have null cells. The returned array of polygons is sparse, so by using array.forEach or array.map, you can easily skip undefined cells. The Voronoi generator also now correctly handles the case where no cell edges intersect the extent."
  },
  {
    "objectID": "docs/site_libs/d3v6-6.2.0/CHANGES.html#zooming-d3-zoom",
    "href": "docs/site_libs/d3v6-6.2.0/CHANGES.html#zooming-d3-zoom",
    "title": "Changes in D3 6.0",
    "section": "Zooming (d3-zoom)",
    "text": "Zooming (d3-zoom)\nThe zoom behavior d3.behavior.zoom has been renamed to d3.zoom. Zoom behaviors no longer store the active zoom transform (i.e., the visible region; the scale and translate) internally. The zoom transform is now stored on any elements to which the zoom behavior has been applied. The zoom transform is available as event.transform within a zoom event or by calling d3.zoomTransform on a given element. To zoom programmatically, use zoom.transform with a given selection or transition; see the zoom transitions example. The zoom.event method has been removed.\nTo make programmatic zooming easier, there are several new convenience methods on top of zoom.transform: zoom.translateBy, zoom.scaleBy and zoom.scaleTo. There is also a new API for describing zoom transforms. Zoom behaviors are no longer dependent on scales, but you can use transform.rescaleX, transform.rescaleY, transform.invertX or transform.invertY to transform a scale‚Äôs domain. 3.x‚Äôs event.scale is replaced with event.transform.k, and event.translate is replaced with event.transform.x and event.transform.y. The zoom.center method has been removed in favor of programmatic zooming.\nThe zoom behavior finally supports simple constraints on panning! The new zoom.translateExtent lets you define the viewable extent of the world: the currently-visible extent (the extent of the viewport, as defined by zoom.extent) is always contained within the translate extent. The zoom.size method has been replaced by zoom.extent, and the default behavior is now smarter: it defaults to the extent of the zoom behavior‚Äôs owner element, rather than being hardcoded to 960√ó500. (This also improves the default path chosen during smooth zoom transitions!)\nThe zoom behavior‚Äôs interaction has also improved. It now correctly handles concurrent wheeling and dragging, as well as concurrent touching and mousing. The zoom behavior now ignores wheel events at the limits of its scale extent, allowing you to scroll past a zoomable area. The zoomstart and zoomend events have been renamed start and end. By default, zoom behaviors now ignore right-clicks intended for the context menu; use zoom.filter to control which events are ignored. The zoom behavior also ignores emulated mouse events on iOS. The zoom behavior now consumes handled events, making it easier to combine with other interactive behaviors such as dragging."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html",
    "title": "Changes in D3 5.0",
    "section": "",
    "text": "Released March 22, 2018.\nD3 5.0 introduces only a few non-backwards-compatible changes.\nD3 now uses Promises instead of asynchronous callbacks to load data. Promises simplify the structure of asynchronous code, especially in modern browsers that support async and await. (See this introduction to promises on Observable.) For example, to load a CSV file in v4, you might say:\nd3.csv(\"file.csv\", function(error, data) {\n  if (error) throw error;\n  console.log(data);\n});\nIn v5, using promises:\nd3.csv(\"file.csv\").then(function(data) {\n  console.log(data);\n});\nNote that you don‚Äôt need to rethrow the error‚Äîthe promise will reject automatically, and you can promise.catch if desired. Using await, the code is even simpler:\nconst data = await d3.csv(\"file.csv\");\nconsole.log(data);\nWith the adoption of promises, D3 now uses the Fetch API instead of XMLHttpRequest: the d3-request module has been replaced by d3-fetch. Fetch supports many powerful new features, such as streaming responses. D3 5.0 also deprecates and removes the d3-queue module. Use Promise.all to run a batch of asynchronous tasks in parallel, or a helper library such as p-queue to control concurrency.\nD3 no longer provides the d3.schemeCategory20* categorical color schemes. These twenty-color schemes were flawed because their grouped design could falsely imply relationships in the data: a shared hue can imply that the encoded data are part of a group (a super-category), while relative lightness can imply order. Instead, D3 now includes d3-scale-chromatic, which implements excellent schemes from ColorBrewer, including categorical, diverging, sequential single-hue and sequential multi-hue schemes. These schemes are available in both discrete and continuous variants.\nD3 now provides implementations of marching squares and density estimation via d3-contour! There are two new d3-selection methods: selection.clone for inserting clones of the selected nodes, and d3.create for creating detached elements. Geographic projections now support projection.angle, which has enabled several fantastic new polyhedral projections by Philippe Rivi√®re.\nLastly, D3‚Äôs package.json no longer pins exact versions of the dependent D3 modules. This fixes an issue with duplicate installs of D3 modules."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#arrays-d3-array",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#arrays-d3-array",
    "title": "Changes in D3 5.0",
    "section": "Arrays (d3-array)",
    "text": "Arrays (d3-array)\nThe new d3.scan method performs a linear scan of an array, returning the index of the least element according to the specified comparator. This is similar to d3.min and d3.max, except you can use it to find the position of an extreme element, rather than just calculate an extreme value.\nvar data = [\n  {name: \"Alice\", value: 2},\n  {name: \"Bob\", value: 3},\n  {name: \"Carol\", value: 1},\n  {name: \"Dwayne\", value: 5}\n];\n\nvar i = d3.scan(data, function(a, b) { return a.value - b.value; }); // 2\ndata[i]; // {name: \"Carol\", value: 1}\nThe new d3.ticks and d3.tickStep methods are useful for generating human-readable numeric ticks. These methods are a low-level alternative to continuous.ticks from d3-scale. The new implementation is also more accurate, returning the optimal number of ticks as measured by relative error.\nvar ticks = d3.ticks(0, 10, 5); // [0, 2, 4, 6, 8, 10]\nThe d3.range method no longer makes an elaborate attempt to avoid floating-point error when step is not an integer. The returned values are strictly defined as start + i * step, where i is an integer. (Learn more about floating point math.) d3.range returns the empty array for infinite ranges, rather than throwing an error.\nThe method signature for optional accessors has been changed to be more consistent with array methods such as array.forEach: the accessor is passed the current element (d), the index (i), and the array (data), with this as undefined. This affects d3.min, d3.max, d3.extent, d3.sum, d3.mean, d3.median, d3.quantile, d3.variance and d3.deviation. The d3.quantile method previously did not take an accessor. Some methods with optional arguments now treat those arguments as missing if they are null or undefined, rather than strictly checking arguments.length.\nThe new d3.histogram API replaces d3.layout.histogram. Rather than exposing bin.x and bin.dx on each returned bin, the histogram exposes bin.x0 and bin.x1, guaranteeing that bin.x0 is exactly equal to bin.x1 on the preceding bin. The ‚Äúfrequency‚Äù and ‚Äúprobability‚Äù modes are no longer supported; each bin is simply an array of elements from the input data, so bin.length is equal to D3 3.x‚Äôs bin.y in frequency mode. To compute a probability distribution, divide the number of elements in each bin by the total number of elements.\nThe histogram.range method has been renamed histogram.domain for consistency with scales. The histogram.bins method has been renamed histogram.thresholds, and no longer accepts an upper value: n thresholds will produce n + 1 bins. If you specify a desired number of bins rather than thresholds, d3.histogram now uses d3.ticks to compute nice bin thresholds. In addition to the default Sturges‚Äô formula, D3 now implements the Freedman-Diaconis rule and Scott‚Äôs normal reference rule."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#axes-d3-axis",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#axes-d3-axis",
    "title": "Changes in D3 5.0",
    "section": "Axes (d3-axis)",
    "text": "Axes (d3-axis)\nTo render axes properly in D3 3.x, you needed to style them:\n&lt;style&gt;\n\n.axis path,\n.axis line {\n  fill: none;\n  stroke: #000;\n  shape-rendering: crispEdges;\n}\n\n.axis text {\n  font: 10px sans-serif;\n}\n\n&lt;/style&gt;\n&lt;script&gt;\n\nd3.select(\".axis\")\n    .call(d3.svg.axis()\n        .scale(x)\n        .orient(\"bottom\"));\n\n&lt;/script&gt;\nIf you didn‚Äôt, you saw this:\n\nD3 4.0 provides default styles and shorter syntax. In place of d3.svg.axis and axis.orient, D3 4.0 now provides four constructors for each orientation: d3.axisTop, d3.axisRight, d3.axisBottom, d3.axisLeft. These constructors accept a scale, so you can reduce all of the above to:\n&lt;script&gt;\n\nd3.select(\".axis\")\n    .call(d3.axisBottom(x));\n\n&lt;/script&gt;\nAnd get this:\n\nAs before, you can customize the axis appearance either by applying stylesheets or by modifying the axis elements. The default appearance has been changed slightly to offset the axis by a half-pixel; this fixes a crisp-edges rendering issue on Safari where the axis would be drawn two-pixels thick.\nThere‚Äôs now an axis.tickArguments method, as an alternative to axis.ticks that also allows the axis tick arguments to be inspected. The axis.tickSize method has been changed to only allow a single argument when setting the tick size. The axis.innerTickSize and axis.outerTickSize methods have been renamed axis.tickSizeInner and axis.tickSizeOuter, respectively."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#brushes-d3-brush",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#brushes-d3-brush",
    "title": "Changes in D3 5.0",
    "section": "Brushes (d3-brush)",
    "text": "Brushes (d3-brush)\nReplacing d3.svg.brush, there are now three classes of brush for brushing along the x-dimension, the y-dimension, or both: d3.brushX, d3.brushY, d3.brush. Brushes are no longer dependent on scales; instead, each brush defines a selection in screen coordinates. This selection can be inverted if you want to compute the corresponding data domain. And rather than rely on the scales‚Äô¬†ranges to determine the brushable area, there is now a brush.extent method for setting it. If you do not set the brush extent, it defaults to the full extent of the owner SVG element. The brush.clamp method has also been eliminated; brushing is always restricted to the brushable area defined by the brush extent.\nBrushes no longer store the active brush selection (i.e., the highlighted region; the brush‚Äôs position) internally. The brush‚Äôs position is now stored on any elements to which the brush has been applied. The brush‚Äôs position is available as event.selection within a brush event or by calling d3.brushSelection on a given element. To move the brush programmatically, use brush.move with a given selection or transition; see the brush snapping example. The brush.event method has been removed.\nBrush interaction has been improved. By default, brushes now ignore right-clicks intended for the context menu; you can change this behavior using brush.filter. Brushes also ignore emulated mouse events on iOS. Holding down SHIFT (‚áß) while brushing locks the x- or y-position of the brush. Holding down META (‚åò) while clicking and dragging starts a new selection, rather than translating the existing selection.\nThe default appearance of the brush has also been improved and slightly simplified. Previously it was necessary to apply styles to the brush to give it a reasonable appearance, such as:\n.brush .extent {\n  stroke: #fff;\n  fill-opacity: .125;\n  shape-rendering: crispEdges;\n}\nThese styles are now applied by default as attributes; if you want to customize the brush appearance, you can still apply external styles or modify the brush elements. (D3 4.0 features a similar improvement to axes.) A new brush.handleSize method lets you override the brush handle size; it defaults to six pixels.\nThe brush now consumes handled events, making it easier to combine with other interactive behaviors such as dragging and zooming. The brushstart and brushend events have been renamed to start and end, respectively. The brush event no longer reports a event.mode to distinguish between resizing and dragging the brush."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#chords-d3-chord",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#chords-d3-chord",
    "title": "Changes in D3 5.0",
    "section": "Chords (d3-chord)",
    "text": "Chords (d3-chord)\nPursuant to the great namespace flattening:\n\nd3.layout.chord ‚Ü¶ d3.chord\nd3.svg.chord ‚Ü¶ d3.ribbon\n\nFor consistency with arc.padAngle, chord.padding has also been renamed to ribbon.padAngle. A new ribbon.context method lets you render chord diagrams to Canvas! See also d3-path."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#collections-d3-collection",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#collections-d3-collection",
    "title": "Changes in D3 5.0",
    "section": "Collections (d3-collection)",
    "text": "Collections (d3-collection)\nThe d3.set constructor now accepts an existing set for making a copy. If you pass an array to d3.set, you can also pass a value accessor. This accessor takes the standard arguments: the current element (d), the index (i), and the array (data), with this undefined. For example:\nvar yields = [\n  {yield: 22.13333, variety: \"Manchuria\",        year: 1932, site: \"Grand Rapids\"},\n  {yield: 26.76667, variety: \"Peatland\",         year: 1932, site: \"Grand Rapids\"},\n  {yield: 28.10000, variety: \"No. 462\",          year: 1931, site: \"Duluth\"},\n  {yield: 38.50000, variety: \"Svansota\",         year: 1932, site: \"Waseca\"},\n  {yield: 40.46667, variety: \"Svansota\",         year: 1931, site: \"Crookston\"},\n  {yield: 36.03333, variety: \"Peatland\",         year: 1932, site: \"Waseca\"},\n  {yield: 34.46667, variety: \"Wisconsin No. 38\", year: 1931, site: \"Grand Rapids\"}\n];\n\nvar sites = d3.set(yields, function(d) { return d.site; }); // Grand Rapids, Duluth, Waseca, Crookston\nThe d3.map constructor also follows the standard array accessor argument pattern.\nThe map.forEach and set.forEach methods have been renamed to map.each and set.each respectively. The order of arguments for map.each has also been changed to value, key and map, while the order of arguments for set.each is now value, value and set. This is closer to ES6 map.forEach and set.forEach. Also like ES6 Map and Set, map.set and set.add now return the current collection (rather than the added value) to facilitate method chaining. New map.clear and set.clear methods can be used to empty collections.\nThe nest.map method now always returns a d3.map instance. For a plain object, use nest.object instead. When used in conjunction with nest.rollup, nest.entries now returns {key, value} objects for the leaf entries, instead of {key, values}. This makes nest.rollup easier to use in conjunction with hierarchies, as in this Nest Treemap example."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#colors-d3-color",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#colors-d3-color",
    "title": "Changes in D3 5.0",
    "section": "Colors (d3-color)",
    "text": "Colors (d3-color)\nAll colors now have opacity exposed as color.opacity, which is a number in [0, 1]. You can pass an optional opacity argument to the color space constructors d3.rgb, d3.hsl, d3.lab, d3.hcl or d3.cubehelix.\nYou can now parse rgba(‚Ä¶) and hsla(‚Ä¶) CSS color specifiers or the string ‚Äútransparent‚Äù using d3.color. The ‚Äútransparent‚Äù color is defined as an RGB color with zero opacity and undefined red, green and blue channels; this differs slightly from CSS which defines it as transparent black, but is useful for simplifying color interpolation logic where either the starting or ending color has undefined channels. The color.toString method now likewise returns an rgb(‚Ä¶) or rgba(‚Ä¶) string with integer channel values, not the hexadecimal RGB format, consistent with CSS computed values. This improves performance by short-circuiting transitions when the element‚Äôs starting style matches its ending style.\nThe new d3.color method is the primary method for parsing colors: it returns a d3.color instance in the appropriate color space, or null if the CSS color specifier is invalid. For example:\nvar red = d3.color(\"hsl(0, 80%, 50%)\"); // {h: 0, l: 0.5, s: 0.8, opacity: 1}\nThe parsing implementation is now more robust. For example, you can no longer mix integers and percentages in rgb(‚Ä¶), and it correctly handles whitespace, decimal points, number signs, and other edge cases. The color space constructors d3.rgb, d3.hsl, d3.lab, d3.hcl and d3.cubehelix now always return a copy of the input color, converted to the corresponding color space. While color.rgb remains, rgb.hsl has been removed; use d3.hsl to convert a color to the RGB color space.\nThe RGB color space no longer greedily quantizes and clamps channel values when creating colors, improving accuracy in color space conversion. Quantization and clamping now occurs in color.toString when formatting a color for display. You can use the new color.displayable to test whether a color is out-of-gamut.\nThe rgb.brighter method no longer special-cases black. This is a multiplicative operator, defining a new color r‚Ä≤, g‚Ä≤, b‚Ä≤ where r‚Ä≤ = r √ó pow(0.7, k), g‚Ä≤ = g √ó pow(0.7, k) and b‚Ä≤ = b √ó pow(0.7, k); a brighter black is still black.\nThere‚Äôs a new d3.cubehelix color space, generalizing Dave Green‚Äôs color scheme! (See also d3.interpolateCubehelixDefault from d3-scale.) You can continue to define your own custom color spaces, too; see d3-hsv for an example."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#dispatches-d3-dispatch",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#dispatches-d3-dispatch",
    "title": "Changes in D3 5.0",
    "section": "Dispatches (d3-dispatch)",
    "text": "Dispatches (d3-dispatch)\nRather than decorating the dispatch object with each event type, the dispatch object now exposes generic dispatch.call and dispatch.apply methods which take the type string as the first argument. For example, in D3 3.x, you might say:\ndispatcher.foo.call(that, \"Hello, Foo!\");\nTo dispatch a foo event in D3 4.0, you‚Äôd say:\ndispatcher.call(\"foo\", that, \"Hello, Foo!\");\nThe dispatch.on method now accepts multiple typenames, allowing you to add or remove listeners for multiple events simultaneously. For example, to send both foo and bar events to the same listener:\ndispatcher.on(\"foo bar\", function(message) {\n  console.log(message);\n});\nThis matches the new behavior of selection.on in d3-selection. The dispatch.on method now validates that the specifier listener is a function, rather than throwing an error in the future.\nThe new implementation d3.dispatch is faster, using fewer closures to improve performance. There‚Äôs also a new dispatch.copy method for making a copy of a dispatcher; this is used by d3-transition to improve the performance of transitions in the common case where all elements in a transition have the same transition event listeners."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#dragging-d3-drag",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#dragging-d3-drag",
    "title": "Changes in D3 5.0",
    "section": "Dragging (d3-drag)",
    "text": "Dragging (d3-drag)\nThe drag behavior d3.behavior.drag has been renamed to d3.drag. The drag.origin method has been replaced by drag.subject, which allows you to define the thing being dragged at the start of a drag gesture. This is particularly useful with Canvas, where draggable objects typically share a Canvas element (as opposed to SVG, where draggable objects typically have distinct DOM elements); see the circle dragging example.\nA new drag.container method lets you override the parent element that defines the drag gesture coordinate system. This defaults to the parent node of the element to which the drag behavior was applied. For dragging on Canvas elements, you probably want to use the Canvas element as the container.\nDrag events now expose an event.on method for registering temporary listeners for duration of the current drag gesture; these listeners can capture state for the current gesture, such as the thing being dragged. A new event.active property lets you detect whether multiple (multitouch) drag gestures are active concurrently. The dragstart and dragend events have been renamed to start and end. By default, drag behaviors now ignore right-clicks intended for the context menu; use drag.filter to control which events are ignored. The drag behavior also ignores emulated mouse events on iOS. The drag behavior now consumes handled events, making it easier to combine with other interactive behaviors such as zooming.\nThe new d3.dragEnable and d3.dragDisable methods provide a low-level API for implementing drag gestures across browsers and devices. These methods are also used by other D3 components, such as the brush."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#delimiter-separated-values-d3-dsv",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#delimiter-separated-values-d3-dsv",
    "title": "Changes in D3 5.0",
    "section": "Delimiter-Separated Values (d3-dsv)",
    "text": "Delimiter-Separated Values (d3-dsv)\nPursuant to the great namespace flattening, various CSV and TSV methods have new names:\n\nd3.csv.parse ‚Ü¶ d3.csvParse\nd3.csv.parseRows ‚Ü¶ d3.csvParseRows\nd3.csv.format ‚Ü¶ d3.csvFormat\nd3.csv.formatRows ‚Ü¶ d3.csvFormatRows\nd3.tsv.parse ‚Ü¶ d3.tsvParse\nd3.tsv.parseRows ‚Ü¶ d3.tsvParseRows\nd3.tsv.format ‚Ü¶ d3.tsvFormat\nd3.tsv.formatRows ‚Ü¶ d3.tsvFormatRows\n\nThe d3.csv and d3.tsv methods for loading files of the corresponding formats have not been renamed, however! Those are defined in d3-request.There‚Äôs no longer a d3.dsv method, which served the triple purpose of defining a DSV formatter, a DSV parser and a DSV requestor; instead, there‚Äôs just d3.dsvFormat which you can use to define a DSV formatter and parser. You can use request.response to make a request and then parse the response body, or just use d3.text.\nThe dsv.parse method now exposes the column names and their input order as data.columns. For example:\nd3.csv(\"cars.csv\", function(error, data) {\n  if (error) throw error;\n  console.log(data.columns); // [\"Year\", \"Make\", \"Model\", \"Length\"]\n});\nYou can likewise pass an optional array of column names to dsv.format to format only a subset of columns, or to specify the column order explicitly:\nvar string = d3.csvFormat(data, [\"Year\", \"Model\", \"Length\"]);\nThe parser is a bit faster and the formatter is a bit more robust: inputs are coerced to strings before formatting, fixing an obscure crash, and deprecated support for falling back to dsv.formatRows when the input data is an array of arrays has been removed."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#easings-d3-ease",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#easings-d3-ease",
    "title": "Changes in D3 5.0",
    "section": "Easings (d3-ease)",
    "text": "Easings (d3-ease)\nD3 3.x used strings, such as ‚Äúcubic-in-out‚Äù, to identify easing methods; these strings could be passed to d3.ease or transition.ease. D3 4.0 uses symbols instead, such as d3.easeCubicInOut. Symbols are simpler and cleaner. They work well with Rollup to produce smaller custom bundles. You can still define your own custom easing function, too, if desired. Here‚Äôs the full list of equivalents:\n\nlinear ‚Ü¶ d3.easeLinear¬π\nlinear-in ‚Ü¶ d3.easeLinear¬π\nlinear-out ‚Ü¶ d3.easeLinear¬π\nlinear-in-out ‚Ü¶ d3.easeLinear¬π\nlinear-out-in ‚Ü¶ d3.easeLinear¬π\npoly-in ‚Ü¶ d3.easePolyIn\npoly-out ‚Ü¶ d3.easePolyOut\npoly-in-out ‚Ü¶ d3.easePolyInOut\npoly-out-in ‚Ü¶ REMOVED¬≤\nquad-in ‚Ü¶ d3.easeQuadIn\nquad-out ‚Ü¶ d3.easeQuadOut\nquad-in-out ‚Ü¶ d3.easeQuadInOut\nquad-out-in ‚Ü¶ REMOVED¬≤\ncubic-in ‚Ü¶ d3.easeCubicIn\ncubic-out ‚Ü¶ d3.easeCubicOut\ncubic-in-out ‚Ü¶ d3.easeCubicInOut\ncubic-out-in ‚Ü¶ REMOVED¬≤\nsin-in ‚Ü¶ d3.easeSinIn\nsin-out ‚Ü¶ d3.easeSinOut\nsin-in-out ‚Ü¶ d3.easeSinInOut\nsin-out-in ‚Ü¶ REMOVED¬≤\nexp-in ‚Ü¶ d3.easeExpIn\nexp-out ‚Ü¶ d3.easeExpOut\nexp-in-out ‚Ü¶ d3.easeExpInOut\nexp-out-in ‚Ü¶ REMOVED¬≤\ncircle-in ‚Ü¶ d3.easeCircleIn\ncircle-out ‚Ü¶ d3.easeCircleOut\ncircle-in-out ‚Ü¶ d3.easeCircleInOut\ncircle-out-in ‚Ü¶ REMOVED¬≤\nelastic-in ‚Ü¶ d3.easeElasticOut¬≤\nelastic-out ‚Ü¶ d3.easeElasticIn¬≤\nelastic-in-out ‚Ü¶ REMOVED¬≤\nelastic-out-in ‚Ü¶ d3.easeElasticInOut¬≤\nback-in ‚Ü¶ d3.easeBackIn\nback-out ‚Ü¶ d3.easeBackOut\nback-in-out ‚Ü¶ d3.easeBackInOut\nback-out-in ‚Ü¶ REMOVED¬≤\nbounce-in ‚Ü¶ d3.easeBounceOut¬≤\nbounce-out ‚Ü¶ d3.easeBounceIn¬≤\nbounce-in-out ‚Ü¶ REMOVED¬≤\nbounce-out-in ‚Ü¶ d3.easeBounceInOut¬≤\n\n¬π The -in, -out and -in-out variants of linear easing are identical, so there‚Äôs just d3.easeLinear. ¬≤ Elastic and bounce easing were inadvertently reversed in 3.x, so 4.0 eliminates -out-in easing!\nFor convenience, there are also default aliases for each easing method. For example, d3.easeCubic is an alias for d3.easeCubicInOut. Most default to -in-out; the exceptions¬†are d3.easeBounce and d3.easeElastic, which default to -out.\nRather than pass optional arguments to d3.ease or transition.ease, parameterizable easing functions now have named parameters: poly.exponent, elastic.amplitude, elastic.period and back.overshoot. For example, in D3 3.x you might say:\nvar e = d3.ease(\"elastic-out-in\", 1.2);\nThe equivalent in D3 4.0 is:\nvar e = d3.easeElastic.amplitude(1.2);\nMany of the easing functions have been optimized for performance and accuracy. Several bugs have been fixed, as well, such as the interpretation of the overshoot parameter for back easing, and the period parameter for elastic easing. Also, d3-transition now explicitly guarantees that the last tick of the transition happens at exactly t = 1, avoiding floating point errors in some easing functions.\nThere‚Äôs now a nice visual reference and an animated reference to the new easing functions, too!"
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#forces-d3-force",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#forces-d3-force",
    "title": "Changes in D3 5.0",
    "section": "Forces (d3-force)",
    "text": "Forces (d3-force)\nThe force layout d3.layout.force has been renamed to d3.forceSimulation. The force simulation now uses velocity Verlet integration rather than position Verlet, tracking the nodes‚Äô positions (node.x, node.y) and velocities (node.vx, node.vy) rather than their previous positions (node.px, node.py).\nRather than hard-coding a set of built-in forces, the force simulation is now extensible: you specify which forces you want! The approach affords greater flexibility through composition. The new forces are more flexible, too: force parameters can typically be configured per-node or per-link. There are separate positioning forces for x and y that replace force.gravity; x.x and y.y replace force.size. The new link force replaces force.linkStrength and employs better default heuristics to improve stability. The new many-body force replaces force.charge and supports a new minimum-distance parameter and performance improvements thanks to 4.0‚Äôs new quadtrees. There are also brand-new forces for centering nodes and collision resolution.\nThe new forces and simulation have been carefully crafted to avoid nondeterminism. Rather than initializing nodes randomly, if the nodes do not have preset positions, they are placed in a phyllotaxis pattern:\n\nRandom jitter is still needed to resolve link, collision and many-body forces if there are coincident nodes, but at least in the common case, the force simulation (and the resulting force-directed graph layout) is now consistent across browsers and reloads. D3 no longer plays dice!\nThe force simulation has several new methods for greater control over heating, such as simulation.alphaMin and simulation.alphaDecay, and the internal timer. Calling simulation.alpha now has no effect on the internal timer, which is controlled independently via simulation.stop and simulation.restart. The force layout‚Äôs internal timer now starts automatically on creation, removing force.start. As in 3.x, you can advance the simulation manually using simulation.tick. The force.friction parameter is replaced by simulation.velocityDecay. A new simulation.alphaTarget method allows you to set the desired alpha (temperature) of the simulation, such that the simulation can be smoothly reheated during interaction, and then smoothly cooled again. This improves the stability of the graph during interaction.\nThe force layout no longer depends on the drag behavior, though you can certainly create draggable force-directed graphs! Set node.fx and node.fy to fix a node‚Äôs position. As an alternative to a Voronoi SVG overlay, you can now use simulation.find to find the closest node to a pointer."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#number-formats-d3-format",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#number-formats-d3-format",
    "title": "Changes in D3 5.0",
    "section": "Number Formats (d3-format)",
    "text": "Number Formats (d3-format)\nIf a precision is not specified, the formatting behavior has changed: there is now a default precision of 6 for all directives except none, which defaults to 12. In 3.x, if you did not specify a precision, the number was formatted using its shortest unique representation (per number.toString); this could lead to unexpected digits due to floating point math. The new default precision in 4.0 produces more consistent results:\nvar f = d3.format(\"e\");\nf(42);        // \"4.200000e+1\"\nf(0.1 + 0.2); // \"3.000000e-1\"\nTo trim insignificant trailing zeroes, use the none directive, which is similar g. For example:\nvar f = d3.format(\".3\");\nf(0.12345);   // \"0.123\"\nf(0.10000);   // \"0.1\"\nf(0.1 + 0.2); // \"0.3\"\nUnder the hood, number formatting has improved accuracy with very large and very small numbers by using number.toExponential rather than Math.log to extract the mantissa and exponent. Negative zero (-0, an IEEE 754 construct) and very small numbers that round to zero are now formatted as unsigned zero. The inherently unsafe d3.round method has been removed, along with d3.requote.\nThe d3.formatPrefix method has been changed. Rather than returning an SI-prefix string, it returns an SI-prefix format function for a given specifier and reference value. For example, to format thousands:\nvar f = d3.formatPrefix(\",.0\", 1e3);\nf(1e3); // \"1k\"\nf(1e4); // \"10k\"\nf(1e5); // \"100k\"\nf(1e6); // \"1,000k\"\nUnlike the s format directive, d3.formatPrefix always employs the same SI-prefix, producing consistent results:\nvar f = d3.format(\".0s\");\nf(1e3); // \"1k\"\nf(1e4); // \"10k\"\nf(1e5); // \"100k\"\nf(1e6); // \"1M\"\nThe new ( sign option uses parentheses for negative values. This is particularly useful in conjunction with $. For example:\nd3.format(\"+.0f\")(-42);  // \"-42\"\nd3.format(\"(.0f\")(-42);  // \"(42)\"\nd3.format(\"+$.0f\")(-42); // \"-$42\"\nd3.format(\"($.0f\")(-42); // \"($42)\"\nThe new = align option places any sign and symbol to the left of any padding:\nd3.format(\"&gt;6d\")(-42);  // \"   -42\"\nd3.format(\"=6d\")(-42);  // \"-   42\"\nd3.format(\"&gt;(6d\")(-42); // \"  (42)\"\nd3.format(\"=(6d\")(-42); // \"(  42)\"\nThe b, o, d and x directives now round to the nearest integer, rather than returning the empty string for non-integers:\nd3.format(\"b\")(41.9); // \"101010\"\nd3.format(\"o\")(41.9); // \"52\"\nd3.format(\"d\")(41.9); // \"42\"\nd3.format(\"x\")(41.9); // \"2a\"\nThe c directive is now for character data (i.e., literal strings), not for character codes. The is useful if you just want to apply padding and alignment and don‚Äôt care about formatting numbers. For example, the infamous left-pad (as well as center- and right-pad!) can be conveniently implemented as:\nd3.format(\"&gt;10c\")(\"foo\"); // \"       foo\"\nd3.format(\"^10c\")(\"foo\"); // \"   foo    \"\nd3.format(\"&lt;10c\")(\"foo\"); // \"foo       \"\nThere are several new methods for computing suggested decimal precisions; these are used by d3-scale for tick formatting, and are helpful for implementing custom number formats: d3.precisionFixed, d3.precisionPrefix and d3.precisionRound. There‚Äôs also a new d3.formatSpecifier method for parsing, validating and debugging format specifiers; it‚Äôs also good for deriving related format specifiers, such as when you want to substitute the precision automatically.\nYou can now set the default locale using d3.formatDefaultLocale! The locales are published as JSON to npm."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#geographies-d3-geo",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#geographies-d3-geo",
    "title": "Changes in D3 5.0",
    "section": "Geographies (d3-geo)",
    "text": "Geographies (d3-geo)\nPursuant to the great namespace flattening, various methods have new names:\n\nd3.geo.graticule ‚Ü¶ d3.geoGraticule\nd3.geo.circle ‚Ü¶ d3.geoCircle\nd3.geo.area ‚Ü¶ d3.geoArea\nd3.geo.bounds ‚Ü¶ d3.geoBounds\nd3.geo.centroid ‚Ü¶ d3.geoCentroid\nd3.geo.distance ‚Ü¶ d3.geoDistance\nd3.geo.interpolate ‚Ü¶ d3.geoInterpolate\nd3.geo.length ‚Ü¶ d3.geoLength\nd3.geo.rotation ‚Ü¶ d3.geoRotation\nd3.geo.stream ‚Ü¶ d3.geoStream\nd3.geo.path ‚Ü¶ d3.geoPath\nd3.geo.projection ‚Ü¶ d3.geoProjection\nd3.geo.projectionMutator ‚Ü¶ d3.geoProjectionMutator\nd3.geo.albers ‚Ü¶ d3.geoAlbers\nd3.geo.albersUsa ‚Ü¶ d3.geoAlbersUsa\nd3.geo.azimuthalEqualArea ‚Ü¶ d3.geoAzimuthalEqualArea\nd3.geo.azimuthalEquidistant ‚Ü¶ d3.geoAzimuthalEquidistant\nd3.geo.conicConformal ‚Ü¶ d3.geoConicConformal\nd3.geo.conicEqualArea ‚Ü¶ d3.geoConicEqualArea\nd3.geo.conicEquidistant ‚Ü¶ d3.geoConicEquidistant\nd3.geo.equirectangular ‚Ü¶ d3.geoEquirectangular\nd3.geo.gnomonic ‚Ü¶ d3.geoGnomonic\nd3.geo.mercator ‚Ü¶ d3.geoMercator\nd3.geo.orthographic ‚Ü¶ d3.geoOrthographic\nd3.geo.stereographic ‚Ü¶ d3.geoStereographic\nd3.geo.transverseMercator ‚Ü¶ d3.geoTransverseMercator\n\nAlso renamed for consistency:\n\ncircle.origin ‚Ü¶ circle.center\ncircle.angle ‚Ü¶ circle.radius\ngraticule.majorExtent ‚Ü¶ graticule.extentMajor\ngraticule.minorExtent ‚Ü¶ graticule.extentMinor\ngraticule.majorStep ‚Ü¶ graticule.stepMajor\ngraticule.minorStep ‚Ü¶ graticule.stepMinor\n\nProjections now have more appropriate defaults. For example, d3.geoOrthographic has a 90¬∞ clip angle by default, showing only the front hemisphere, and d3.geoGnomonic has a default 60¬∞ clip angle. The default projection for d3.geoPath is now null rather than d3.geoAlbersUsa; a null projection is used with pre-projected geometry and is typically faster to render.\n‚ÄúFallback projections‚Äù‚Äîwhen you pass a function rather than a projection to path.projection‚Äîare no longer supported. For geographic projections, use d3.geoProjection or d3.geoProjectionMutator to define a custom projection. For arbitrary geometry transformations, implement the stream interface; see also d3.geoTransform. The ‚Äúraw‚Äù projections (e.g., d3.geo.equirectangular.raw) are no longer exported."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#hierarchies-d3-hierarchy",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#hierarchies-d3-hierarchy",
    "title": "Changes in D3 5.0",
    "section": "Hierarchies (d3-hierarchy)",
    "text": "Hierarchies (d3-hierarchy)\nPursuant to the great namespace flattening:\n\nd3.layout.cluster ‚Ü¶ d3.cluster\nd3.layout.hierarchy ‚Ü¶ d3.hierarchy\nd3.layout.pack ‚Ü¶ d3.pack\nd3.layout.partition ‚Ü¶ d3.partition\nd3.layout.tree ‚Ü¶ d3.tree\nd3.layout.treemap ‚Ü¶ d3.treemap\n\nAs an alternative to using JSON to represent hierarchical data (such as the ‚Äúflare.json format‚Äù used by many D3 examples), the new d3.stratify operator simplifies the conversion of tabular data to hierarchical data! This is convenient if you already have data in a tabular format, such as the result of a SQL query or a CSV file:\nname,parent\nEve,\nCain,Eve\nSeth,Eve\nEnos,Seth\nNoam,Seth\nAbel,Eve\nAwan,Eve\nEnoch,Awan\nAzura,Eve\nTo convert this to a root node:\nvar root = d3.stratify()\n    .id(function(d) { return d.name; })\n    .parentId(function(d) { return d.parent; })\n    (nodes);\nThe resulting root can be passed to d3.tree to produce a tree diagram like this:\n\nRoot nodes can also be created from JSON data using d3.hierarchy. The hierarchy layouts now take these root nodes as input rather than operating directly on JSON data, which helps to provide a cleaner separation between the input data and the computed layout. (For example, use node.copy to isolate layout changes.) It also simplifies the API: rather than each hierarchy layout needing to implement value and sorting accessors, there are now generic node.sum and node.sort methods that work with any hierarchy layout.\nThe new d3.hierarchy API also provides a richer set of methods for manipulating hierarchical data. For example, to generate an array of all nodes in topological order, use node.descendants; for just leaf nodes, use node.leaves. To highlight the ancestors of a given node on mouseover, use node.ancestors. To generate an array of {source, target} links for a given hierarchy, use node.links; this replaces treemap.links and similar methods on the other layouts. The new node.path method replaces d3.layout.bundle; see also d3.curveBundle for hierarchical edge bundling.\nThe hierarchy layouts have been rewritten using new, non-recursive traversal methods (node.each, node.eachAfter and node.eachBefore), improving performance on large datasets. The d3.tree layout no longer uses a node._ field to store temporary state during layout.\nTreemap tiling is now extensible via treemap.tile! The default squarified tiling algorithm, d3.treemapSquarify, has been completely rewritten, improving performance and fixing bugs in padding and rounding. The treemap.sticky method has been replaced with the d3.treemapResquarify, which is identical to d3.treemapSquarify except it performs stable neighbor-preserving updates. The treemap.ratio method has been replaced with squarify.ratio. And there‚Äôs a new d3.treemapBinary for binary treemaps!\nTreemap padding has also been improved. The treemap now distinguishes between outer padding that separates a parent from its children, and inner padding that separates adjacent siblings. You can set the top-, right-, bottom- and left-outer padding separately. There are new examples for the traditional nested treemap and for L√º and Fogarty‚Äôs cascaded treemap. And there‚Äôs a new example demonstrating d3.nest with d3.treemap.\nThe space-filling layouts d3.treemap and d3.partition now output x0, x1, y0, y1 on each node instead of x0, dx, y0, dy. This improves accuracy by ensuring that the edges of adjacent cells are exactly equal, rather than sometimes being slightly off due to floating point math. The partition layout now supports rounding and padding.\nThe circle-packing layout, d3.pack, has been completely rewritten to better implement Wang et al.‚Äôs algorithm, fixing major bugs and improving results! Welzl‚Äôs algorithm is now used to compute the exact smallest enclosing circle for each parent, rather than the approximate answer used by Wang et al.¬†The 3.x output is shown on the left; 4.0 is shown on the right:\n \nA non-hierarchical implementation is also available as d3.packSiblings, and the smallest enclosing circle implementation is available as d3.packEnclose. Pack padding now applies between a parent and its children, as well as between adjacent siblings. In addition, you can now specify padding as a function that is computed dynamically for each parent."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#internals",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#internals",
    "title": "Changes in D3 5.0",
    "section": "Internals",
    "text": "Internals\nThe d3.rebind method has been removed. (See the 3.x source.) If you want to wrap a getter-setter method, the recommend pattern is to implement a wrapper method and check the return value. For example, given a component that uses an internal dispatch, component.on can rebind dispatch.on as follows:\ncomponent.on = function() {\n  var value = dispatch.on.apply(dispatch, arguments);\n  return value === dispatch ? component : value;\n};\nThe d3.functor method has been removed. (See the 3.x source.) If you want to promote a constant value to a function, the recommended pattern is to implement a closure that returns the constant value. If desired, you can use a helper method as follows:\nfunction constant(x) {\n  return function() {\n    return x;\n  };\n}\nGiven a value x, to promote x to a function if it is not already:\nvar fx = typeof x === \"function\" ? x : constant(x);"
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#interpolators-d3-interpolate",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#interpolators-d3-interpolate",
    "title": "Changes in D3 5.0",
    "section": "Interpolators (d3-interpolate)",
    "text": "Interpolators (d3-interpolate)\nThe d3.interpolate method no longer delegates to d3.interpolators, which has been removed; its behavior is now defined by the library. It is now slightly faster in the common case that b is a number. It only uses d3.interpolateRgb if b is a valid CSS color specifier (and not approximately one). And if the end value b is null, undefined, true or false, d3.interpolate now returns a constant function which always returns b.\nThe behavior of d3.interpolateObject and d3.interpolateArray has changed slightly with respect to properties or elements in the start value a that do not exist in the end value b: these properties and elements are now ignored, such that the ending value of the interpolator at t = 1 is now precisely equal to b. So, in 3.x:\nd3.interpolateObject({foo: 2, bar: 1}, {foo: 3})(0.5); // {bar: 1, foo: 2.5} in 3.x\nWhereas in 4.0, a.bar is ignored:\nd3.interpolateObject({foo: 2, bar: 1}, {foo: 3})(0.5); // {foo: 2.5} in 4.0\nIf a or b are undefined or not an object, they are now implicitly converted to the empty object or empty array as appropriate, rather than throwing a TypeError.\nThe d3.interpolateTransform interpolator has been renamed to d3.interpolateTransformSvg, and there is a new d3.interpolateTransformCss to interpolate CSS transforms! This allows d3-transition to automatically interpolate both the SVG transform attribute and the CSS transform style property. (Note, however, that only 2D CSS transforms are supported.) The d3.transform method has been removed.\nColor space interpolators now interpolate opacity (see d3-color) and return rgb(‚Ä¶) or rgba(‚Ä¶) CSS color specifier strings rather than using the RGB hexadecimal format. This is necessary to support opacity interpolation, but is also beneficial because it matches CSS computed values. When a channel in the start color a is undefined, color interpolators now use the corresponding channel value from the end color b, or vice versa. This logic previously applied to some channels (such as saturation in HSL), but now applies to all channels in all color spaces, and is especially useful when interpolating to or from transparent.\nThere are now ‚Äúlong‚Äù versions of cylindrical color space interpolators: d3.interpolateHslLong, d3.interpolateHclLong and d3.interpolateCubehelixLong. These interpolators use linear interpolation of hue, rather than using the shortest path around the 360¬∞ hue circle. See d3.interpolateRainbow for an example. The Cubehelix color space is now supported by d3-color, and so there are now d3.interpolateCubehelix and d3.interpolateCubehelixLong interpolators.\nGamma-corrected color interpolation is now supported for both RGB and Cubehelix color spaces as interpolate.gamma. For example, to interpolate from purple to orange with a gamma of 2.2 in RGB space:\nvar interpolate = d3.interpolateRgb.gamma(2.2)(\"purple\", \"orange\");\nThere are new interpolators for uniform non-rational B-splines! These are useful for smoothly interpolating between an arbitrary sequence of values from t = 0 to t = 1, such as to generate a smooth color gradient from a discrete set of colors. The d3.interpolateBasis and d3.interpolateBasisClosed interpolators generate one-dimensional B-splines, while d3.interpolateRgbBasis and d3.interpolateRgbBasisClosed generate three-dimensional B-splines through RGB color space. These are used by d3-scale-chromatic to generate continuous color scales from ColorBrewer‚Äôs discrete color schemes, such as PiYG.\nThere‚Äôs also now a d3.quantize method for generating uniformly-spaced discrete samples from a continuous interpolator. This is useful for taking one of the built-in color scales (such as d3.interpolateViridis) and quantizing it for use with d3.scaleQuantize, d3.scaleQuantile or d3.scaleThreshold."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#paths-d3-path",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#paths-d3-path",
    "title": "Changes in D3 5.0",
    "section": "Paths (d3-path)",
    "text": "Paths (d3-path)\nThe d3.path serializer implements the CanvasPathMethods API, allowing you to write code that can render to either Canvas or SVG. For example, given some code that draws to a canvas:\nfunction drawCircle(context, radius) {\n  context.moveTo(radius, 0);\n  context.arc(0, 0, radius, 0, 2 * Math.PI);\n}\nYou can render to SVG as follows:\nvar context = d3.path();\ndrawCircle(context, 40);\npathElement.setAttribute(\"d\", context.toString());\nThe path serializer enables d3-shape to support both Canvas and SVG; see line.context and area.context, for example."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#polygons-d3-polygon",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#polygons-d3-polygon",
    "title": "Changes in D3 5.0",
    "section": "Polygons (d3-polygon)",
    "text": "Polygons (d3-polygon)\nThere‚Äôs no longer a d3.geom.polygon constructor; instead you just pass an array of vertices to the polygon methods. So instead of polygon.area and polygon.centroid, there‚Äôs d3.polygonArea and d3.polygonCentroid. There are also new d3.polygonContains and d3.polygonLength methods. There‚Äôs no longer an equivalent to polygon.clip, but if Sutherland‚ÄìHodgman clipping is needed, please file a feature request.\nThe d3.geom.hull operator has been simplified: instead of an operator with hull.x and hull.y accessors, there‚Äôs just the d3.polygonHull method which takes an array of points and returns the convex hull."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#quadtrees-d3-quadtree",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#quadtrees-d3-quadtree",
    "title": "Changes in D3 5.0",
    "section": "Quadtrees (d3-quadtree)",
    "text": "Quadtrees (d3-quadtree)\nThe d3.geom.quadtree method has been replaced by d3.quadtree. 4.0 removes the concept of quadtree ‚Äúgenerators‚Äù (configurable functions that build a quadtree from an array of data); there are now just quadtrees, which you can create via d3.quadtree and add data to via quadtree.add and quadtree.addAll. This code in 3.x:\nvar quadtree = d3.geom.quadtree()\n    .extent([[0, 0], [width, height]])\n    (data);\nCan be rewritten in 4.0 as:\nvar quadtree = d3.quadtree()\n    .extent([[0, 0], [width, height]])\n    .addAll(data);\nThe new quadtree implementation is vastly improved! It is no longer recursive, avoiding stack overflows when there are large numbers of coincident points. The internal storage is now more efficient, and the implementation is also faster; constructing a quadtree of 1M normally-distributed points takes about one second in 4.0, as compared to three seconds in 3.x.\nThe change in internal node structure affects quadtree.visit: use node.length to distinguish leaf nodes from internal nodes. For example, to iterate over all data in a quadtree:\nquadtree.visit(function(node) {\n  if (!node.length) {\n    do {\n      console.log(node.data);\n    } while (node = node.next)\n  }\n});\nThere‚Äôs a new quadtree.visitAfter method for visiting nodes in post-order traversal. This feature is used in d3-force to implement the Barnes‚ÄìHut approximation.\nYou can now remove data from a quadtree using quadtree.remove and quadtree.removeAll. When adding data to a quadtree, the quadtree will now expand its extent by repeated doubling if the new point is outside the existing extent of the quadtree. There are also quadtree.extent and quadtree.cover methods for explicitly expanding the extent of the quadtree after creation.\nQuadtrees support several new utility methods: quadtree.copy returns a copy of the quadtree sharing the same data; quadtree.data generates an array of all data in the quadtree; quadtree.size returns the number of data points in the quadtree; and quadtree.root returns the root node, which is useful for manual traversal of the quadtree. The quadtree.find method now takes an optional search radius, which is useful for pointer-based selection in force-directed graphs."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#queues-d3-queue",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#queues-d3-queue",
    "title": "Changes in D3 5.0",
    "section": "Queues (d3-queue)",
    "text": "Queues (d3-queue)\nFormerly known as Queue.js and queue-async, d3.queue is now included in the default bundle, making it easy to load data files in parallel. It has been rewritten with fewer closures to improve performance, and there are now stricter checks in place to guarantee well-defined behavior. You can now use instanceof d3.queue and inspect the queue‚Äôs internal private state."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#random-numbers-d3-random",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#random-numbers-d3-random",
    "title": "Changes in D3 5.0",
    "section": "Random Numbers (d3-random)",
    "text": "Random Numbers (d3-random)\nPursuant to the great namespace flattening, the random number generators have new names:\n\nd3.random.normal ‚Ü¶ d3.randomNormal\nd3.random.logNormal ‚Ü¶ d3.randomLogNormal\nd3.random.bates ‚Ü¶ d3.randomBates\nd3.random.irwinHall ‚Ü¶ d3.randomIrwinHall\n\nThere are also new random number generators for exponential and uniform distributions. The normal and log-normal random generators have been optimized."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#requests-d3-request",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#requests-d3-request",
    "title": "Changes in D3 5.0",
    "section": "Requests (d3-request)",
    "text": "Requests (d3-request)\nThe d3.xhr method has been renamed to d3.request. Basic authentication is now supported using request.user and request.password. You can now configure a timeout using request.timeout.\nIf an error occurs, the corresponding ProgressEvent of type ‚Äúerror‚Äù is now passed to the error listener, rather than the XMLHttpRequest. Likewise, the ProgressEvent is passed to progress event listeners, rather than using d3.event. If d3.xml encounters an error parsing XML, this error is now reported to error listeners rather than returning a null response.\nThe d3.request, d3.text and d3.xml methods no longer take an optional mime type as the second argument; use request.mimeType instead. For example:\nd3.xml(\"file.svg\").mimeType(\"image/svg+xml\").get(function(error, svg) {\n  ‚Ä¶\n});\nWith the exception of d3.html and d3.xml, Node is now supported via node-XMLHttpRequest."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#scales-d3-scale",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#scales-d3-scale",
    "title": "Changes in D3 5.0",
    "section": "Scales (d3-scale)",
    "text": "Scales (d3-scale)\nPursuant to the great namespace flattening:\n\nd3.scale.linear ‚Ü¶ d3.scaleLinear\nd3.scale.sqrt ‚Ü¶ d3.scaleSqrt\nd3.scale.pow ‚Ü¶ d3.scalePow\nd3.scale.log ‚Ü¶ d3.scaleLog\nd3.scale.quantize ‚Ü¶ d3.scaleQuantize\nd3.scale.threshold ‚Ü¶ d3.scaleThreshold\nd3.scale.quantile ‚Ü¶ d3.scaleQuantile\nd3.scale.identity ‚Ü¶ d3.scaleIdentity\nd3.scale.ordinal ‚Ü¶ d3.scaleOrdinal\nd3.time.scale ‚Ü¶ d3.scaleTime\nd3.time.scale.utc ‚Ü¶ d3.scaleUtc\n\nScales now generate ticks in the same order as the domain: if you have a descending domain, you now get descending ticks. This change affects the order of tick elements generated by axes. For example:\nd3.scaleLinear().domain([10, 0]).ticks(5); // [10, 8, 6, 4, 2, 0]\nLog tick formatting now assumes a default count of ten, not Infinity, if not specified. Log scales with domains that span many powers (such as from 1e+3 to 1e+29) now return only one tick per power rather than returning base ticks per power. Non-linear quantitative scales are slightly more accurate.\nYou can now control whether an ordinal scale‚Äôs domain is implicitly extended when the scale is passed a value that is not already in its domain. By default, ordinal.unknown is d3.scaleImplicit, causing unknown values to be added to the domain:\nvar x = d3.scaleOrdinal()\n    .domain([0, 1])\n    .range([\"red\", \"green\", \"blue\"]);\n\nx.domain(); // [0, 1]\nx(2); // \"blue\"\nx.domain(); // [0, 1, 2]\nBy setting ordinal.unknown, you instead define the output value for unknown inputs. This is particularly useful for choropleth maps where you want to assign a color to missing data.\nvar x = d3.scaleOrdinal()\n    .domain([0, 1])\n    .range([\"red\", \"green\", \"blue\"])\n    .unknown(undefined);\n\nx.domain(); // [0, 1]\nx(2); // undefined\nx.domain(); // [0, 1]\nThe ordinal.rangeBands and ordinal.rangeRoundBands methods have been replaced with a new subclass of ordinal scale: band scales. The following code in 3.x:\nvar x = d3.scale.ordinal()\n    .domain([\"a\", \"b\", \"c\"])\n    .rangeBands([0, width]);\nIs equivalent to this in 4.0:\nvar x = d3.scaleBand()\n    .domain([\"a\", \"b\", \"c\"])\n    .range([0, width]);\nThe new band.padding, band.paddingInner and band.paddingOuter methods replace the optional arguments to ordinal.rangeBands. The new band.bandwidth and band.step methods replace ordinal.rangeBand. There‚Äôs also a new band.align method which you can use to control how the extra space outside the bands is distributed, say to shift columns closer to the y-axis.\nSimilarly, the ordinal.rangePoints and ordinal.rangeRoundPoints methods have been replaced with a new subclass of ordinal scale: point scales. The following code in 3.x:\nvar x = d3.scale.ordinal()\n    .domain([\"a\", \"b\", \"c\"])\n    .rangePoints([0, width]);\nIs equivalent to this in 4.0:\nvar x = d3.scalePoint()\n    .domain([\"a\", \"b\", \"c\"])\n    .range([0, width]);\nThe new point.padding method replaces the optional padding argument to ordinal.rangePoints. Like ordinal.rangeBand with ordinal.rangePoints, the point.bandwidth method always returns zero; a new point.step method returns the interval between adjacent points.\nThe ordinal scale constructor now takes an optional range for a shorter alternative to ordinal.range. This is especially useful now that the categorical color scales have been changed to simple arrays of colors rather than specialized ordinal scale constructors:\n\nd3.scale.category10 ‚Ü¶ d3.schemeCategory10\nd3.scale.category20 ‚Ü¶ d3.schemeCategory20\nd3.scale.category20b ‚Ü¶ d3.schemeCategory20b\nd3.scale.category20c ‚Ü¶ d3.schemeCategory20c\n\nThe following code in 3.x:\nvar color = d3.scale.category10();\nIs equivalent to this in 4.0:\nvar color = d3.scaleOrdinal(d3.schemeCategory10);\nSequential scales, are a new class of scales with a fixed output interpolator instead of a range. Typically these scales are used to implement continuous sequential or diverging color schemes. Inspired by Matplotlib‚Äôs new perceptually-motived colormaps, 4.0 now features viridis, inferno, magma, plasma interpolators for use with sequential scales. Using d3.quantize, these interpolators can also be applied to quantile, quantize and threshold scales.\n   \n4.0 also ships new Cubehelix schemes, including Dave Green‚Äôs default and a cyclical rainbow inspired by Matteo Niccoli:\n   \nFor even more sequential and categorical color schemes, see d3-scale-chromatic.\nFor an introduction to scales, see Introducing d3-scale."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#selections-d3-selection",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#selections-d3-selection",
    "title": "Changes in D3 5.0",
    "section": "Selections (d3-selection)",
    "text": "Selections (d3-selection)\nSelections no longer subclass Array using prototype chain injection; they are now plain objects, improving performance. The internal fields (selection._groups, selection._parents) are private; please use the documented public API to manipulate selections. The new selection.nodes method generates an array of all nodes in a selection.\nSelections are now immutable: the elements and parents in a selection never change. (The elements‚Äô attributes and content will of course still be modified!) The selection.sort and selection.data methods now return new selections rather than modifying the selection in-place. In addition, selection.append no longer merges entering nodes into the update selection; use selection.merge to combine enter and update after a data join. For example, the following general update pattern in 3.x:\nvar circle = svg.selectAll(\"circle\").data(data) // UPDATE\n    .style(\"fill\", \"blue\");\n\ncircle.exit().remove(); // EXIT\n\ncircle.enter().append(\"circle\") // ENTER; modifies UPDATE! üå∂\n    .style(\"fill\", \"green\");\n\ncircle // ENTER + UPDATE\n    .style(\"stroke\", \"black\");\nWould be rewritten in 4.0 as:\nvar circle = svg.selectAll(\"circle\").data(data) // UPDATE\n    .style(\"fill\", \"blue\");\n\ncircle.exit().remove(); // EXIT\n\ncircle.enter().append(\"circle\") // ENTER\n    .style(\"fill\", \"green\")\n  .merge(circle) // ENTER + UPDATE\n    .style(\"stroke\", \"black\");\nThis change is discussed further in What Makes Software Good.\nIn 3.x, the selection.enter and selection.exit methods were undefined until you called selection.data, resulting in a TypeError if you attempted to access them. In 4.0, now they simply return the empty selection if the selection has not been joined to data.\nIn 3.x, selection.append would always append the new element as the last child of its parent. A little-known trick was to use selection.insert without specifying a before selector when entering nodes, causing the entering nodes to be inserted before the following element in the update selection. In 4.0, this is now the default behavior of selection.append; if you do not specify a before selector to selection.insert, the inserted element is appended as the last child. This change makes the general update pattern preserve the relative order of elements and data. For example, given the following DOM:\n&lt;div&gt;a&lt;/div&gt;\n&lt;div&gt;b&lt;/div&gt;\n&lt;div&gt;f&lt;/div&gt;\nAnd the following code:\nvar div = d3.select(\"body\").selectAll(\"div\")\n  .data([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], function(d) { return d || this.textContent; });\n\ndiv.enter().append(\"div\")\n    .text(function(d) { return d; });\nThe resulting DOM will be:\n&lt;div&gt;a&lt;/div&gt;\n&lt;div&gt;b&lt;/div&gt;\n&lt;div&gt;c&lt;/div&gt;\n&lt;div&gt;d&lt;/div&gt;\n&lt;div&gt;e&lt;/div&gt;\n&lt;div&gt;f&lt;/div&gt;\nThus, the entering c, d and e are inserted before f, since f is the following element in the update selection. Although this behavior is sufficient to preserve order if the new data‚Äôs order is stable, if the data changes order, you must still use selection.order to reorder elements.\nThere is now only one class of selection. 3.x implemented enter selections using a special class with different behavior for enter.append and enter.select; a consequence of this design was that enter selections in 3.x lacked certain methods. In 4.0, enter selections are simply normal selections; they have the same methods and the same behavior. Placeholder enter nodes now implement node.appendChild, node.insertBefore, node.querySelector, and node.querySelectorAll.\nThe selection.data method has been changed slightly with respect to duplicate keys. In 3.x, if multiple data had the same key, the duplicate data would be ignored and not included in enter, update or exit; in 4.0 the duplicate data is always put in the enter selection. In both 3.x and 4.0, if multiple elements have the same key, the duplicate elements are put in the exit selection. Thus, 4.0‚Äôs behavior is now symmetric for enter and exit, and the general update pattern will now produce a DOM that matches the data even if there are duplicate keys.\nSelections have several new methods! Use selection.raise to move the selected elements to the front of their siblings, so that they are drawn on top; use selection.lower to move them to the back. Use selection.dispatch to dispatch a custom event to event listeners.\nWhen called in getter mode, selection.data now returns the data for all elements in the selection, rather than just the data for the first group of elements. The selection.call method no longer sets the this context when invoking the specified function; the selection is passed as the first argument to the function, so use that. The selection.on method now accepts multiple whitespace-separated typenames, so you can add or remove multiple listeners simultaneously. For example:\nselection.on(\"mousedown touchstart\", function() {\n  console.log(d3.event.type);\n});\nThe arguments passed to callback functions has changed slightly in 4.0 to be more consistent. The standard arguments are the element‚Äôs datum (d), the element‚Äôs index (i), and the element‚Äôs group (nodes), with this as the element. The slight exception to this convention is selection.data, which is evaluated for each group rather than each element; it is passed the group‚Äôs parent datum (d), the group index (i), and the selection‚Äôs parents (parents), with this as the group‚Äôs parent.\nThe new d3.local provides a mechanism for defining local variables: state that is bound to DOM elements, and available to any descendant element. This can be a convenient alternative to using selection.each or storing local state in data.\nThe d3.ns.prefix namespace prefix map has been renamed to d3.namespaces, and the d3.ns.qualify method has been renamed to d3.namespace. Several new low-level methods are now available, as well. d3.matcher is used internally by selection.filter; d3.selector is used by selection.select; d3.selectorAll is used by selection.selectAll; d3.creator is used by selection.append and selection.insert. The new d3.window returns the owner window for a given element, window or document. The new d3.customEvent temporarily sets d3.event while invoking a function, allowing you to implement controls which dispatch custom events; this is used by d3-drag, d3-zoom and d3-brush.\nFor the sake of parsimony, the multi-value methods‚Äîwhere you pass an object to set multiple attributes, styles or properties simultaneously‚Äîhave been extracted to d3-selection-multi and are no longer part of the default bundle. The multi-value map methods have also been renamed to plural form to reduce overload: selection.attrs, selection.styles and selection.properties."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#shapes-d3-shape",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#shapes-d3-shape",
    "title": "Changes in D3 5.0",
    "section": "Shapes (d3-shape)",
    "text": "Shapes (d3-shape)\nPursuant to the great namespace flattening:\n\nd3.svg.line ‚Ü¶ d3.line\nd3.svg.line.radial ‚Ü¶ d3.radialLine\nd3.svg.area ‚Ü¶ d3.area\nd3.svg.area.radial ‚Ü¶ d3.radialArea\nd3.svg.arc ‚Ü¶ d3.arc\nd3.svg.symbol ‚Ü¶ d3.symbol\nd3.svg.symbolTypes ‚Ü¶ d3.symbolTypes\nd3.layout.pie ‚Ü¶ d3.pie\nd3.layout.stack ‚Ü¶ d3.stack\nd3.svg.diagonal ‚Ü¶ REMOVED (see d3/d3-shape#27)\nd3.svg.diagonal.radial ‚Ü¶ REMOVED\n\nShapes are no longer limited to SVG; they can now render to Canvas! Shape generators now support an optional context: given a CanvasRenderingContext2D, you can render a shape as a canvas path to be filled or stroked. For example, a canvas pie chart might use an arc generator:\nvar arc = d3.arc()\n    .outerRadius(radius - 10)\n    .innerRadius(0)\n    .context(context);\nTo render an arc for a given datum d:\ncontext.beginPath();\narc(d);\ncontext.fill();\nSee line.context, area.context and arc.context for more. Under the hood, shapes use d3-path to serialize canvas path methods to SVG path data when the context is null; thus, shapes are optimized for rendering to canvas. You can also now derive lines from areas. The line shares most of the same accessors, such as line.defined and line.curve, with the area from which it is derived. For example, to render the topline of an area, use area.lineY1; for the baseline, use area.lineY0.\n4.0 introduces a new curve API for specifying how line and area shapes interpolate between data points. The line.interpolate and area.interpolate methods have been replaced with line.curve and area.curve. Curves are implemented using the curve interface rather than as a function that returns an SVG path data string; this allows curves to render to either SVG or Canvas. In addition, line.curve and area.curve now take a function which instantiates a curve for a given context, rather than a string. The full list of equivalents:\n\nlinear ‚Ü¶ d3.curveLinear\nlinear-closed ‚Ü¶ d3.curveLinearClosed\nstep ‚Ü¶ d3.curveStep\nstep-before ‚Ü¶ d3.curveStepBefore\nstep-after ‚Ü¶ d3.curveStepAfter\nbasis ‚Ü¶ d3.curveBasis\nbasis-open ‚Ü¶ d3.curveBasisOpen\nbasis-closed ‚Ü¶ d3.curveBasisClosed\nbundle ‚Ü¶ d3.curveBundle\ncardinal ‚Ü¶ d3.curveCardinal\ncardinal-open ‚Ü¶ d3.curveCardinalOpen\ncardinal-closed ‚Ü¶ d3.curveCardinalClosed\nmonotone ‚Ü¶ d3.curveMonotoneX\n\nBut that‚Äôs not all! 4.0 now provides parameterized Catmull‚ÄìRom splines as proposed by Yuksel et al.. These are available as d3.curveCatmullRom, d3.curveCatmullRomClosed and d3.curveCatmullRomOpen.\n  \nEach curve type can define its own named parameters, replacing line.tension and area.tension. For example, Catmull‚ÄìRom splines are parameterized using catmullRom.alpha and defaults to 0.5, which corresponds to a centripetal spline that avoids self-intersections and overshoot. For a uniform Catmull‚ÄìRom spline instead:\nvar line = d3.line()\n    .curve(d3.curveCatmullRom.alpha(0));\n4.0 fixes the interpretation of the cardinal spline tension parameter, which is now specified as cardinal.tension and defaults to zero for a uniform Catmull‚ÄìRom spline; a tension of one produces a linear curve. The first and last segments of basis and cardinal curves have also been fixed! The undocumented interpolate.reverse field has been removed. Curves can define different behavior for toplines and baselines by counting the sequence of curve.lineStart within curve.areaStart. See the d3.curveStep implementation for an example.\n4.0 fixes numerous bugs in the monotone curve implementation, and introduces d3.curveMonotoneY; this is like d3.curveMonotoneX, except it requires that the input points are monotone in y rather than x, such as for a vertically-oriented line chart. The new d3.curveNatural produces a natural cubic spline. The default Œ≤ for d3.curveBundle is now 0.85, rather than 0.7, matching the values used by Holten. 4.0 also has a more robust implementation of arc padding; see arc.padAngle and arc.padRadius.\n4.0 introduces a new symbol type API. Symbol types are passed to symbol.type in place of strings. The equivalents are:\n\ncircle ‚Ü¶ d3.symbolCircle\ncross ‚Ü¶ d3.symbolCross\ndiamond ‚Ü¶ d3.symbolDiamond\nsquare ‚Ü¶ d3.symbolSquare\ntriangle-down ‚Ü¶ REMOVED\ntriangle-up ‚Ü¶ d3.symbolTriangle\nADDED ‚Ü¶ d3.symbolStar\nADDED ‚Ü¶ d3.symbolWye\n\nThe full set of symbol types is now:\n\nLastly, 4.0 overhauls the stack layout API, replacing d3.layout.stack with d3.stack. The stack generator no longer needs an x-accessor. In addition, the API has been simplified: the stack generator now accepts tabular input, such as this array of objects:\nvar data = [\n  {month: new Date(2015, 0, 1), apples: 3840, bananas: 1920, cherries: 960, dates: 400},\n  {month: new Date(2015, 1, 1), apples: 1600, bananas: 1440, cherries: 960, dates: 400},\n  {month: new Date(2015, 2, 1), apples:  640, bananas:  960, cherries: 640, dates: 400},\n  {month: new Date(2015, 3, 1), apples:  320, bananas:  480, cherries: 640, dates: 400}\n];\nTo generate the stack layout, first define a stack generator, and then apply it to the data:\nvar stack = d3.stack()\n    .keys([\"apples\", \"bananas\", \"cherries\", \"dates\"])\n    .order(d3.stackOrderNone)\n    .offset(d3.stackOffsetNone);\n\nvar series = stack(data);\nThe resulting array has one element per series. Each series has one point per month, and each point has a lower and upper value defining the baseline and topline:\n[\n  [[   0, 3840], [   0, 1600], [   0,  640], [   0,  320]], // apples\n  [[3840, 5760], [1600, 3040], [ 640, 1600], [ 320,  800]], // bananas\n  [[5760, 6720], [3040, 4000], [1600, 2240], [ 800, 1440]], // cherries\n  [[6720, 7120], [4000, 4400], [2240, 2640], [1440, 1840]], // dates\n]\nEach series in then typically passed to an area generator to render an area chart, or used to construct rectangles for a bar chart. Stack generators no longer modify the input data, so stack.out has been removed.\nFor an introduction to shapes, see Introducing d3-shape."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#time-formats-d3-time-format",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#time-formats-d3-time-format",
    "title": "Changes in D3 5.0",
    "section": "Time Formats (d3-time-format)",
    "text": "Time Formats (d3-time-format)\nPursuant to the great namespace flattening, the format constructors have new names:\n\nd3.time.format ‚Ü¶ d3.timeFormat\nd3.time.format.utc ‚Ü¶ d3.utcFormat\nd3.time.format.iso ‚Ü¶ d3.isoFormat\n\nThe format.parse method has also been removed in favor of separate d3.timeParse, d3.utcParse and d3.isoParse parser constructors. Thus, this code in 3.x:\nvar parseTime = d3.time.format(\"%c\").parse;\nCan be rewritten in 4.0 as:\nvar parseTime = d3.timeParse(\"%c\");\nThe multi-scale time format d3.time.format.multi has been replaced by d3.scaleTime‚Äôs tick format. Time formats now coerce inputs to dates, and time parsers coerce inputs to strings. The %Z directive now allows more flexible parsing of time zone offsets, such as -0700, -07:00, -07, and Z. The %p directive is now parsed correctly when the locale‚Äôs period name is longer than two characters (e.g., ‚Äúa.m.‚Äù).\nThe default U.S. English locale now uses 12-hour time and a more concise representation of the date. This aligns with local convention and is consistent with date.toLocaleString in Chrome, Firefox and Node:\nvar now = new Date;\nd3.timeFormat(\"%c\")(new Date); // \"6/23/2016, 2:01:33 PM\"\nd3.timeFormat(\"%x\")(new Date); // \"6/23/2016\"\nd3.timeFormat(\"%X\")(new Date); // \"2:01:38 PM\"\nYou can now set the default locale using d3.timeFormatDefaultLocale! The locales are published as JSON to npm.\nThe performance of time formatting and parsing has been improved, and the UTC formatter and parser have a cleaner implementation (that avoids temporarily overriding the Date global)."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#time-intervals-d3-time",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#time-intervals-d3-time",
    "title": "Changes in D3 5.0",
    "section": "Time Intervals (d3-time)",
    "text": "Time Intervals (d3-time)\nPursuant to the great namespace flattening, the local time intervals have been renamed:\n\nADDED ‚Ü¶ d3.timeMillisecond\nd3.time.second ‚Ü¶ d3.timeSecond\nd3.time.minute ‚Ü¶ d3.timeMinute\nd3.time.hour ‚Ü¶ d3.timeHour\nd3.time.day ‚Ü¶ d3.timeDay\nd3.time.sunday ‚Ü¶ d3.timeSunday\nd3.time.monday ‚Ü¶ d3.timeMonday\nd3.time.tuesday ‚Ü¶ d3.timeTuesday\nd3.time.wednesday ‚Ü¶ d3.timeWednesday\nd3.time.thursday ‚Ü¶ d3.timeThursday\nd3.time.friday ‚Ü¶ d3.timeFriday\nd3.time.saturday ‚Ü¶ d3.timeSaturday\nd3.time.week ‚Ü¶ d3.timeWeek\nd3.time.month ‚Ü¶ d3.timeMonth\nd3.time.year ‚Ü¶ d3.timeYear\n\nThe UTC time intervals have likewise been renamed:\n\nADDED ‚Ü¶ d3.utcMillisecond\nd3.time.second.utc ‚Ü¶ d3.utcSecond\nd3.time.minute.utc ‚Ü¶ d3.utcMinute\nd3.time.hour.utc ‚Ü¶ d3.utcHour\nd3.time.day.utc ‚Ü¶ d3.utcDay\nd3.time.sunday.utc ‚Ü¶ d3.utcSunday\nd3.time.monday.utc ‚Ü¶ d3.utcMonday\nd3.time.tuesday.utc ‚Ü¶ d3.utcTuesday\nd3.time.wednesday.utc ‚Ü¶ d3.utcWednesday\nd3.time.thursday.utc ‚Ü¶ d3.utcThursday\nd3.time.friday.utc ‚Ü¶ d3.utcFriday\nd3.time.saturday.utc ‚Ü¶ d3.utcSaturday\nd3.time.week.utc ‚Ü¶ d3.utcWeek\nd3.time.month.utc ‚Ü¶ d3.utcMonth\nd3.time.year.utc ‚Ü¶ d3.utcYear\n\nThe local time range aliases have been renamed:\n\nd3.time.seconds ‚Ü¶ d3.timeSeconds\nd3.time.minutes ‚Ü¶ d3.timeMinutes\nd3.time.hours ‚Ü¶ d3.timeHours\nd3.time.days ‚Ü¶ d3.timeDays\nd3.time.sundays ‚Ü¶ d3.timeSundays\nd3.time.mondays ‚Ü¶ d3.timeMondays\nd3.time.tuesdays ‚Ü¶ d3.timeTuesdays\nd3.time.wednesdays ‚Ü¶ d3.timeWednesdays\nd3.time.thursdays ‚Ü¶ d3.timeThursdays\nd3.time.fridays ‚Ü¶ d3.timeFridays\nd3.time.saturdays ‚Ü¶ d3.timeSaturdays\nd3.time.weeks ‚Ü¶ d3.timeWeeks\nd3.time.months ‚Ü¶ d3.timeMonths\nd3.time.years ‚Ü¶ d3.timeYears\n\nThe UTC time range aliases have been renamed:\n\nd3.time.seconds.utc ‚Ü¶ d3.utcSeconds\nd3.time.minutes.utc ‚Ü¶ d3.utcMinutes\nd3.time.hours.utc ‚Ü¶ d3.utcHours\nd3.time.days.utc ‚Ü¶ d3.utcDays\nd3.time.sundays.utc ‚Ü¶ d3.utcSundays\nd3.time.mondays.utc ‚Ü¶ d3.utcMondays\nd3.time.tuesdays.utc ‚Ü¶ d3.utcTuesdays\nd3.time.wednesdays.utc ‚Ü¶ d3.utcWednesdays\nd3.time.thursdays.utc ‚Ü¶ d3.utcThursdays\nd3.time.fridays.utc ‚Ü¶ d3.utcFridays\nd3.time.saturdays.utc ‚Ü¶ d3.utcSaturdays\nd3.time.weeks.utc ‚Ü¶ d3.utcWeeks\nd3.time.months.utc ‚Ü¶ d3.utcMonths\nd3.time.years.utc ‚Ü¶ d3.utcYears\n\nThe behavior of interval.range (and the convenience aliases such as d3.timeDays) has been changed when step is greater than one. Rather than filtering the returned dates using the field number, interval.range now behaves like d3.range: it simply skips, returning every stepth date. For example, the following code in 3.x returns only odd days of the month:\nd3.time.days(new Date(2016, 4, 28), new Date(2016, 5, 5), 2);\n// [Sun May 29 2016 00:00:00 GMT-0700 (PDT),\n//  Tue May 31 2016 00:00:00 GMT-0700 (PDT),\n//  Wed Jun 01 2016 00:00:00 GMT-0700 (PDT),\n//  Fri Jun 03 2016 00:00:00 GMT-0700 (PDT)]\nNote the returned array of dates does not start on the start date because May 28 is even. Also note that May 31 and June 1 are one day apart, not two! The behavior of d3.timeDays in 4.0 is probably closer to what you expect:\nd3.timeDays(new Date(2016, 4, 28), new Date(2016, 5, 5), 2);\n// [Sat May 28 2016 00:00:00 GMT-0700 (PDT),\n//  Mon May 30 2016 00:00:00 GMT-0700 (PDT),\n//  Wed Jun 01 2016 00:00:00 GMT-0700 (PDT),\n//  Fri Jun 03 2016 00:00:00 GMT-0700 (PDT)]\nIf you want a filtered view of a time interval (say to guarantee that two overlapping ranges are consistent, such as when generating time scale ticks), you can use the new interval.every method or its more general cousin interval.filter:\nd3.timeDay.every(2).range(new Date(2016, 4, 28), new Date(2016, 5, 5));\n// [Sun May 29 2016 00:00:00 GMT-0700 (PDT),\n//  Tue May 31 2016 00:00:00 GMT-0700 (PDT),\n//  Wed Jun 01 2016 00:00:00 GMT-0700 (PDT),\n//  Fri Jun 03 2016 00:00:00 GMT-0700 (PDT)]\nTime intervals now expose an interval.count method for counting the number of interval boundaries after a start date and before or equal to an end date. This replaces d3.time.dayOfYear and related methods in 3.x. For example, this code in 3.x:\nvar now = new Date;\nd3.time.dayOfYear(now); // 165\nCan be rewritten in 4.0 as:\nvar now = new Date;\nd3.timeDay.count(d3.timeYear(now), now); // 165\nLikewise, in place of 3.x‚Äôs d3.time.weekOfYear, in 4.0 you would say:\nd3.timeWeek.count(d3.timeYear(now), now); // 24\nThe new interval.count is of course more general. For example, you can use it to compute hour-of-week for a heatmap:\nd3.timeHour.count(d3.timeWeek(now), now); // 64\nHere are all the equivalences from 3.x to 4.0:\n\nd3.time.dayOfYear ‚Ü¶ d3.timeDay.count\nd3.time.sundayOfYear ‚Ü¶ d3.timeSunday.count\nd3.time.mondayOfYear ‚Ü¶ d3.timeMonday.count\nd3.time.tuesdayOfYear ‚Ü¶ d3.timeTuesday.count\nd3.time.wednesdayOfYear ‚Ü¶ d3.timeWednesday.count\nd3.time.thursdayOfYear ‚Ü¶ d3.timeThursday.count\nd3.time.fridayOfYear ‚Ü¶ d3.timeFriday.count\nd3.time.saturdayOfYear ‚Ü¶ d3.timeSaturday.count\nd3.time.weekOfYear ‚Ü¶ d3.timeWeek.count\nd3.time.dayOfYear.utc ‚Ü¶ d3.utcDay.count\nd3.time.sundayOfYear.utc ‚Ü¶ d3.utcSunday.count\nd3.time.mondayOfYear.utc ‚Ü¶ d3.utcMonday.count\nd3.time.tuesdayOfYear.utc ‚Ü¶ d3.utcTuesday.count\nd3.time.wednesdayOfYear.utc ‚Ü¶ d3.utcWednesday.count\nd3.time.thursdayOfYear.utc ‚Ü¶ d3.utcThursday.count\nd3.time.fridayOfYear.utc ‚Ü¶ d3.utcFriday.count\nd3.time.saturdayOfYear.utc ‚Ü¶ d3.utcSaturday.count\nd3.time.weekOfYear.utc ‚Ü¶ d3.utcWeek.count\n\nD3 4.0 now also lets you define custom time intervals using d3.timeInterval. The d3.timeYear, d3.utcYear, d3.timeMillisecond and d3.utcMillisecond intervals have optimized implementations of interval.every, which is necessary to generate time ticks for very large or very small domains efficiently. More generally, the performance of time intervals has been improved, and time intervals now do a better job with respect to daylight savings in various locales."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#timers-d3-timer",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#timers-d3-timer",
    "title": "Changes in D3 5.0",
    "section": "Timers (d3-timer)",
    "text": "Timers (d3-timer)\nIn D3 3.x, the only way to stop a timer was for its callback to return true. For example, this timer stops after one second:\nd3.timer(function(elapsed) {\n  console.log(elapsed);\n  return elapsed &gt;= 1000;\n});\nIn 4.0, use timer.stop instead:\nvar t = d3.timer(function(elapsed) {\n  console.log(elapsed);\n  if (elapsed &gt;= 1000) {\n    t.stop();\n  }\n});\nThe primary benefit of timer.stop is that timers are not required to self-terminate: they can be stopped externally, allowing for the immediate and synchronous disposal of associated resources, and the separation of concerns. The above is equivalent to:\nvar t = d3.timer(function(elapsed) {\n  console.log(elapsed);\n});\n\nd3.timeout(function() {\n  t.stop();\n}, 1000);\nThis improvement extends to d3-transition: now when a transition is interrupted, its resources are immediately freed rather than having to wait for transition to start.\n4.0 also introduces a new timer.restart method for restarting timers, for replacing the callback of a running timer, or for changing its delay or reference time. Unlike timer.stop followed by d3.timer, timer.restart maintains the invocation priority of an existing timer: it guarantees that the order of invocation of active timers remains the same. The d3.timer.flush method has been renamed to d3.timerFlush.\nSome usage patterns in D3 3.x could cause the browser to hang when a background page returned to the foreground. For example, the following code schedules a transition every second:\nsetInterval(function() {\n  d3.selectAll(\"div\").transition().call(someAnimation); // BAD\n}, 1000);\nIf such code runs in the background for hours, thousands of queued transitions will try to run simultaneously when the page is foregrounded. D3 4.0 avoids this hang by freezing time in the background: when a page is in the background, time does not advance, and so no queue of timers accumulates to run when the page returns to the foreground. Use d3.timer instead of transitions to schedule a long-running animation, or use d3.timeout and d3.interval in place of setTimeout and setInterval to prevent transitions from being queued in the background:\nd3.interval(function() {\n  d3.selectAll(\"div\").transition().call(someAnimation); // GOOD\n}, 1000);\nBy freezing time in the background, timers are effectively ‚Äúunaware‚Äù of being backgrounded. It‚Äôs like nothing happened! 4.0 also now uses high-precision time (performance.now) where available; the current time is available as d3.now."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#transitions-d3-transition",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#transitions-d3-transition",
    "title": "Changes in D3 5.0",
    "section": "Transitions (d3-transition)",
    "text": "Transitions (d3-transition)\nThe selection.transition method now takes an optional transition instance which can be used to synchronize a new transition with an existing transition. (This change is discussed further in What Makes Software Good?) For example:\nvar t = d3.transition()\n    .duration(750)\n    .ease(d3.easeLinear);\n\nd3.selectAll(\".apple\").transition(t)\n    .style(\"fill\", \"red\");\n\nd3.selectAll(\".orange\").transition(t)\n    .style(\"fill\", \"orange\");\nTransitions created this way inherit timing from the closest ancestor element, and thus are synchronized even when the referenced transition has variable timing such as a staggered delay. This method replaces the deeply magical behavior of transition.each in 3.x; in 4.0, transition.each is identical to selection.each. Use the new transition.on method to listen to transition events.\nThe meaning of transition.delay has changed for chained transitions created by transition.transition. The specified delay is now relative to the previous transition in the chain, rather than the first transition in the chain; this makes it easier to insert interstitial pauses. For example:\nd3.selectAll(\".apple\")\n  .transition() // First fade to green.\n    .style(\"fill\", \"green\")\n  .transition() // Then red.\n    .style(\"fill\", \"red\")\n  .transition() // Wait one second. Then brown, and remove.\n    .delay(1000)\n    .style(\"fill\", \"brown\")\n    .remove();\nTime is now frozen in the background; see d3-timer for more information. While it was previously the case that transitions did not run in the background, now they pick up where they left off when the page returns to the foreground. This avoids page hangs by not scheduling an unbounded number of transitions in the background. If you want to schedule an infinitely-repeating transition, use transition events, or use d3.timeout and d3.interval in place of setTimeout and setInterval.\nThe selection.interrupt method now cancels all scheduled transitions on the selected elements, in addition to interrupting any active transition. When transitions are interrupted, any resources associated with the transition are now released immediately, rather than waiting until the transition starts, improving performance. (See also timer.stop.) The new d3.interrupt method is an alternative to selection.interrupt for quickly interrupting a single node.\nThe new d3.active method allows you to select the currently-active transition on a given node, if any. This is useful for modifying in-progress transitions and for scheduling infinitely-repeating transitions. For example, this transition continuously oscillates between red and blue:\nd3.select(\"circle\")\n  .transition()\n    .on(\"start\", function repeat() {\n        d3.active(this)\n            .style(\"fill\", \"red\")\n          .transition()\n            .style(\"fill\", \"blue\")\n          .transition()\n            .on(\"start\", repeat);\n      });\nThe life cycle of a transition is now more formally defined and enforced. For example, attempting to change the duration of a running transition now throws an error rather than silently failing. The transition.remove method has been fixed if multiple transition names are in use: the element is only removed if it has no scheduled transitions, regardless of name. The transition.ease method now always takes an easing function, not a string. When a transition ends, the tweens are invoked one last time with t equal to exactly 1, regardless of the associated easing function.\nAs with selections in 4.0, all transition callback functions now receive the standard arguments: the element‚Äôs datum (d), the element‚Äôs index (i), and the element‚Äôs group (nodes), with this as the element. This notably affects transition.attrTween and transition.styleTween, which no longer pass the tween function the current attribute or style value as the third argument. The transition.attrTween and transition.styleTween methods can now be called in getter modes for debugging or to share tween definitions between transitions.\nHomogenous transitions are now optimized! If all elements in a transition share the same tween, interpolator, or event listeners, this state is now shared across the transition rather than separately allocated for each element. 4.0 also uses an optimized default interpolator in place of d3.interpolate for transition.attr and transition.style. And transitions can now interpolate both CSS and SVG transforms.\nFor reusable components that support transitions, such as axes, a new transition.selection method returns the selection that corresponds to a given transition. There is also a new transition.merge method that is equivalent to selection.merge.\nFor the sake of parsimony, the multi-value map methods have been extracted to d3-selection-multi and are no longer part of the default bundle. The multi-value map methods have also been renamed to plural form to reduce overload: transition.attrs and transition.styles."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#voronoi-diagrams-d3-voronoi",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#voronoi-diagrams-d3-voronoi",
    "title": "Changes in D3 5.0",
    "section": "Voronoi Diagrams (d3-voronoi)",
    "text": "Voronoi Diagrams (d3-voronoi)\nThe d3.geom.voronoi method has been renamed to d3.voronoi, and the voronoi.clipExtent method has been renamed to voronoi.extent. The undocumented polygon.point property in 3.x, which is the element in the input data corresponding to the polygon, has been renamed to polygon.data.\nCalling voronoi now returns the full Voronoi diagram, which includes topological information: each Voronoi edge exposes edge.left and edge.right specifying the sites on either side of the edge, and each Voronoi cell is defined as an array of these edges and a corresponding site. The Voronoi diagram can be used to efficiently compute both the Voronoi and Delaunay tessellations for a set of points: diagram.polygons, diagram.links, and diagram.triangles. The new topology is also useful in conjunction with TopoJSON; see the Voronoi topology example.\nThe voronoi.polygons and diagram.polygons now require an extent; there is no longer an implicit extent of ¬±1e6. The voronoi.links, voronoi.triangles, diagram.links and diagram.triangles are now affected by the clip extent: as the Delaunay is computed as the dual of the Voronoi, two sites are only linked if the clipped cells are touching. To compute the Delaunay triangulation without respect to clipping, set the extent to null.\nThe Voronoi generator finally has well-defined behavior for coincident vertices: the first of a set of coincident points has a defined cell, while the subsequent duplicate points have null cells. The returned array of polygons is sparse, so by using array.forEach or array.map, you can easily skip undefined cells. The Voronoi generator also now correctly handles the case where no cell edges intersect the extent."
  },
  {
    "objectID": "docs/site_libs/d3v5-5.9.2/CHANGES.html#zooming-d3-zoom",
    "href": "docs/site_libs/d3v5-5.9.2/CHANGES.html#zooming-d3-zoom",
    "title": "Changes in D3 5.0",
    "section": "Zooming (d3-zoom)",
    "text": "Zooming (d3-zoom)\nThe zoom behavior d3.behavior.zoom has been renamed to d3.zoom. Zoom behaviors no longer store the active zoom transform (i.e., the visible region; the scale and translate) internally. The zoom transform is now stored on any elements to which the zoom behavior has been applied. The zoom transform is available as event.transform within a zoom event or by calling d3.zoomTransform on a given element. To zoom programmatically, use zoom.transform with a given selection or transition; see the zoom transitions example. The zoom.event method has been removed.\nTo make programmatic zooming easier, there are several new convenience methods on top of zoom.transform: zoom.translateBy, zoom.scaleBy and zoom.scaleTo. There is also a new API for describing zoom transforms. Zoom behaviors are no longer dependent on scales, but you can use transform.rescaleX, transform.rescaleY, transform.invertX or transform.invertY to transform a scale‚Äôs domain. 3.x‚Äôs event.scale is replaced with event.transform.k, and event.translate is replaced with event.transform.x and event.transform.y. The zoom.center method has been removed in favor of programmatic zooming.\nThe zoom behavior finally supports simple constraints on panning! The new zoom.translateExtent lets you define the viewable extent of the world: the currently-visible extent (the extent of the viewport, as defined by zoom.extent) is always contained within the translate extent. The zoom.size method has been replaced by zoom.extent, and the default behavior is now smarter: it defaults to the extent of the zoom behavior‚Äôs owner element, rather than being hardcoded to 960√ó500. (This also improves the default path chosen during smooth zoom transitions!)\nThe zoom behavior‚Äôs interaction has also improved. It now correctly handles concurrent wheeling and dragging, as well as concurrent touching and mousing. The zoom behavior now ignores wheel events at the limits of its scale extent, allowing you to scroll past a zoomable area. The zoomstart and zoomend events have been renamed start and end. By default, zoom behaviors now ignore right-clicks intended for the context menu; use zoom.filter to control which events are ignored. The zoom behavior also ignores emulated mouse events on iOS. The zoom behavior now consumes handled events, making it easier to combine with other interactive behaviors such as dragging."
  },
  {
    "objectID": "R files/9 Module/mod9.html",
    "href": "R files/9 Module/mod9.html",
    "title": "Module 9: Writing Functions",
    "section": "",
    "text": "Download a copy of Module 9 slides"
  },
  {
    "objectID": "R files/9 Module/mod9.html#writing-functions",
    "href": "R files/9 Module/mod9.html#writing-functions",
    "title": "Module 9: Writing Functions",
    "section": "",
    "text": "Download a copy of Module 9 slides"
  },
  {
    "objectID": "R files/9 Module/mod9.html#lab-9",
    "href": "R files/9 Module/mod9.html#lab-9",
    "title": "Module 9: Writing Functions",
    "section": "Lab 9",
    "text": "Lab 9\n\nGeneral Guidelines:\nYou will encounter a few functions we did not cover in the lecture video. This will give you some practice on how to use a new function for the first time. You can try following steps:\n\nStart by typing ?new_function in your Console to open up the help page\nRead the help page of this new_function. The description might be too technical for now. That‚Äôs OK. Pay attention to the Usage and Arguments, especially the argument x or x,y (when two arguments are required)\nAt the bottom of the help page, there are a few examples. Run the first few lines to see how it works\nApply it in your lab questions\n\nIt is highly likely that you will encounter error messages while doing this lab Here are a few steps that might help get you through it.\n\nLocate which line is causing this error first\nCheck if you may have a typo in the code. Sometimes another person can spot a typo faster than you.\nIf you enter the code without any typo, try googling the error message\nScroll through the top few links see if any of them helps\nTry working on the next few questions while waiting for answers by TAs\n\n\n\nQuestions\nRecall a function has the following form\n\nname &lt;- function(args) { \n  # body\n  do something (probably with args) \n  }\n\n\nWrite a function called calc_quadratic that takes an input x and calculates \\(f(x) = x^2 + 2x + 1\\). For example:\n\n\ncalc_quadratic(5)\n\n[1] 36\n\n\n\nWhat are the arguments to your function? What is the body of the function?\nThis function is vectorized! (Since binary operators are vectorized). Show this is true by running calc_quadratic with an input vector that is -10 to 10.\n\n\nYou realize you want to be able to work with any quadratic. Update your functions so that it can work with any quadratic in standard form \\(f(x) = ax^2 + bx + c\\).\n\n\nYour new function will take arguments x, a, b and c.\nSet the default arguments to a=1, b=2 and c=1.\n\n\nWrite a function called solve_quadratic that takes arguments a, b and c and provides the two roots using the quadratic formula.\n\nIn our outline, we suggest you:\n\nCalculate the determinant \\(\\sqrt{b^2 ‚àí 4ac}\\) and store as an intermediate value.\nReturn two values by putting them in a vector. If you stored the roots as root_1 and root_2, then the final line of code in the function should be c(root_1, root_2) or, if you prefer, return(c(root_1, root_2)).\n\n\n# fill in the ... with appropriate code\nsolve_quadratic &lt;- function(...){\n  determinant &lt;- ...\n  root_1 &lt;- ...\n  root_2 &lt;- ...\n  c(root_1, root_2)\n}\n\nThe code should work as follows:\n\nsolve_quadratic(a = -4, b = 0, c = 1)\n\n[1] -0.5  0.5\n\n\n\nWe ‚Äúnormalize‚Äù a variable by subtracting the mean and dividing by the standard deviation \\(\\frac{x - \\mu}{\\sigma}\\) .\n\nWrite a function called normalize that takes a vector as input and normalizes it. You should get the following output.\n\nnormalize(1:5)\n\n[1] -1.2649111 -0.6324555  0.0000000  0.6324555  1.2649111\n\n\n\nWhat output do you get when the input vector is 0:4? How about -100:-96? Why?\nWhat happens when your input vector is c(1,2,3,4,5, NA)? Rewrite the function so the result is:\nThe txhousing data set comes with ggplot. Use your normalize function in mutate to create normalized_annual_volume to make the following graph.\n\n\n# replace the ... with the appropriate code.\ntxhousing %&gt;%\n  group_by(year, city) %&gt;%\n  summarize(annual_volume = sum(volume, na.rm = TRUE)) %&gt;% \n  group_by(year) %&gt;%\n  mutate(...) %&gt;%\n  ggplot(aes(x = year, y = normalized_annual_volume)) + \n  geom_point() +\n  geom_line(aes(color = city))\n\n\n\n\n\n\n\n\nSimulating Data with Monte Carlo Simulations (Extension)\nYou will be asked to investigate statistical concepts using Monte Carlo simulations. We‚Äôll try not to get too technical in the main body of the lab. There are some ‚Äútechnical notes‚Äù which you can ignore!\nIn a monte carlo simulation, you repeatedly:\n\nGenerate random samples of data using a known process.\nMake calculations based on the random sample.\nAggregate the results.\n\nFunctions and loops help us do these repetitious acts efficiently, without repeatedly writing similar code or copying and pasting.\nToday‚Äôs problem: Let us investigate how good the random number generator in R is.1 We hypothesize that rnorm(n, mean = true_mean) provides random sample of size n from the normal distribution with mean = true_mean and standard deviation = 1.\nThe lesson is organized as follows.\n\nWe do a single simulation.\nWe take the logic of the simulation, encapsulate it in functions and then run 1000s of simulations!\n\n\nA single simulation\nRecall our hypothesis is that rnorm() faithfully gives us random numbers from the normal distribution. If we test this with a single random draw, we might be misled. For example, let‚Äôs draw 30 numbers from a normal distribution with true mean of 0.5 and see if the observed mean appears statistically different from the true mean.\n\n# Setting a seed ensures replicability\nset.seed(4)\n# we set our parameters\ntrue_mean &lt;- .5\nN &lt;- 30\n# We simulate and observe outcomes\nsimulated_data &lt;- rnorm(N, mean = true_mean) # the standard deviation is 1 by default!\nobs_mean &lt;- mean(simulated_data)\nobs_mean\n\n[1] 0.9871873\n\n\nWow! The observed mean is twice what we expected given true_mean! Let‚Äôs calculate a z-score to put that in perspective. (Focus on the formulas, you‚Äôll learn the intuition in stats class)\nA z-score is calculated \\(\\frac{\\bar{X}-\\mu}{\\frac{s_n}{\\sqrt{N}}}\\) where \\(\\bar{X}\\) is the sample mean, \\(\\mu\\) is the true mean, \\(s_n\\) is the sample standard deviation and \\(N\\) is the number of observations.\n\nobs_sd &lt;- sd(simulated_data)\nzscore &lt;- (obs_mean - true_mean) / (obs_sd / sqrt(N)) \nzscore\n\n[1] 3.303849\n\n\nWe expect the observed mean of this simulated data will be within 1.96 standard deviations of \\(\\mu\\) 95 out of 100 times.This observation is 3.3 standard deviations from Mu. The probability of that happening by chance is very small. To be more formal about this probability, we can calculate a p-value. Plug in the z-score below:\n\n(1 - pnorm(abs(zscore)))*2\n\n[1] 0.000953672\n\n\nThis says that the probability of getting this draw by chance is less than 0.1 percent or 1 in 1000.\nThat outcome seems surprising, but we could also just have made an unusual draw. In this workshop, we want to see how often we get such extreme results. We will repeat the steps above 1000 times each, but first we‚Äôll write functions that will make this process smooth!\n\n\nWriting Helper Functions to Make Our Monte Carlo Simulation\nWe want to develop functions that automate repeated steps in our Monte Carlo. In that way, we can define a few important parameters and run the entire process without rewriting or copying and pasting code over and over again.\nAs you saw in the motivating example, we must do the following a 1000 times or B times if parameterize the number of iterations with B:\n\nSimulate data and calculate sample statistics.\nDetermine z-scores.\nTest whether the z-score is outside the threshold. Finally, we:\nMeasure to what extent our simulations match the theory.\n\nTo proceed, we‚Äôll write the steps into their own functions, then call them in the right order in the function do_monte_carlo(). We are breaking a complicated process into smaller chunks and tackling them one by one!\nLet‚Äôs look at do_monte_carlo(). It takes a sample-size N, a true_mean, number of iterations B (1000 by default) and a significance level alpha (.05 by default). It returns the proportion of observed means that are significantly different from the true_mean with 95 percent confidence level\n\nBefore following our road map, think about how you would set up functions to automate this process. What would the inputs and outputs be of each step/function? Your processes will be different from ours, but that doesn‚Äôt mean ours is better.\n\nNow check out do_monte_carlo() below. It‚Äôs our road map.\n\ndo_monte_carlo &lt;- function(N, true_mean, B= 1000, alpha = .05){\n# step 1: Simulate B random samples and calculate sample statistics\n  sample_statistics &lt;- make_mc_sample(N, true_mean, B)\n# step 2: Determine z-scores\n  z_scores &lt;- get_zscores(sample_statistics$mean, true_mean, sample_statistics$sd, N)\n# step 3: Test whether the z-scores are outside the threshold.\n  significance &lt;- test_significance(z_scores, alpha)\n# step 4: Measure to what extent our simulations match the theory. (We expect a number close to alpha)\n  mean(significance)\n}\n\n\n\nDetermine z-scores\nWe‚Äôll start with step 2 determine z-scores. Recall the formula for a zscore is\\(\\frac{\\bar{X}-\\mu}{\\frac{s_n}{\\sqrt{N}}}\\).\nWrite a function called get_zscores that takes the observed means and sds, the true mean and N as inputs and returns a z-score as an output. Name the arguments obs_mean, true_mean, obs_sd, and N.\nIf your functions works, it should return 4 for test.\n\ntest &lt;- get_zscores(obs_mean = 4.4, true_mean = 4.3, obs_sd = 0.25, N = 100)\ntest\n\n[1] 4\n\n\nThe function you wrote should also work on vectorized functions. Run the following code which takes estimates of the mean and standard deviation from 5 random draws and returns their associated z-scores:\n\n# before running set eval = TRUE (and delete this comment)\nmade_up_means &lt;- c(4.4, 4.1, 4.2, 4.4, 4.2)\nmade_up_sd &lt;- c(.25, .5, .4, 1, .4)\nmade_up_zscores &lt;- get_zscores(obs_mean = made_up_means,\n                               true_mean = 4.3,\n                               obs_sd = made_up_sd,\n                               N = 100)\nmade_up_zscores\n\n\nWhich observation from made_up_zscores is not statistically different from 4.3 with 95 percent confidence? In other words, which observed mean and standard deviation return \\(|z-score| &lt; 1.96\\)?\n\n\n\n\nCheck for Significance\nNow we write code for step 3. Test whether the z-scores are outside the threshold.\nThe threshold depends on alpha and the formula is abs(qnorm(alpha/2)).\n\nFor example, for a two-tailed z-test at the 95% confidence level, the cutoff is set at 1.96. Verify this using the formula above.\nWrite a function test_significance() that takes zscores and a given alpha and determines if there is a significant difference at the given level.\n\nRun the following code, and check that your code matches the expected output:\n\n# before knitting set eval = TRUE (and delete this comment)\ntest_significance(zscores = 2, alpha = 0.05)\n\nShould return TRUE. And:\n\n# before knitting set eval = TRUE (and delete this comment)\ntest_significance(zscores = c(1.9, -0.3, -3), alpha = 0.05)\n\nShould return FALSE, FALSE, and TRUE.\n\nBuilding make_mc_sample()\nNow we do step 1: simulate B random samples and calculate sample statistics.\nOur goal is make_mc_sample(N, true_mean, B) a function that produces sample statistics from B random samples from the normal distribution with mean true_mean of size N. When you think of doing something B times it suggest we need a loop. Let‚Äôs start with the body of the loop. And because we‚Äôre in a lesson about functions, let‚Äôs write a function.\n\nWrite a function called calc_mean_and_sd_from_sample() that\n\n\nGenerates a random sample with rnorm() of size N centered around true_mean\nCalculate the mean() and sd() of the random sample.\nReturn the mean and sd in a tibble with column names mean and sd.\n\nIdea: To return two values from a function, we need to put those values into a data structure like a vector or tibble.\nHere‚Äôs a test! Verify your function works. Remember, what guarantees that you get the same numbers from a random number generator as we did is that we‚Äôre setting a seed to 5\n\n# before knitting set eval = TRUE (and delete this comment)\nset.seed(5)\ncalc_mean_and_sd_from_sample(N = 30, true_mean = 0.5)\n\nNow, this function only does what we need once, while we‚Äôll need it to do it B times. This is an appropriate time for a loop!\n\nWrite the function make_mc_sample. The inputs are described above. The output is a tibble with B rows of means and standard deviations.\n\nHere‚Äôs a test.\n\nset.seed(24601)\nmake_mc_sample(N = 30, true_mean = 100, B = 3 )\n\n# A tibble: 3 √ó 2\n   mean    sd\n  &lt;dbl&gt; &lt;dbl&gt;\n1  99.8 0.920\n2  99.8 0.952\n3 100.  1.04 \n\n\n\n\nFunctions, Assemble\nNow you have all the helper functions that are critical for our simulation. We want to simulate 1000 sets of 30 data points drawn from a normal distribution with true mean 0.5 and then see how often our random sample mean is significantly different from the true mean at a significance level of 0.05. If everything is working as expected, we should see about 5% of the random means to be statistically different.\n\ndo_monte_carlo &lt;- function(N, true_mean, B = 1000, alpha = .05){\n# step 1: Simulate B random samples and calculate sample statistics\nsample_statistics &lt;- make_mc_sample(N, true_mean, B)\n# step 2: Determine z-scores\nz_scores &lt;- get_zscores(sample_statistics$mean, true_mean, sample_statistics$sd, N)\n# step 3: Test whether the z-scores are outside the threshold.\nsignificance &lt;- test_significance(z_scores, alpha)\n# step 5: Measure to what extent our simulations match the theory. (We expect a number close to alpha)\nmean(significance)\n}\n\n\nTest out your function with N equals 30 and true_mean equals 0.5. The resulting number should be close to .05 (alpha).\nTry again with a different alpha and verify that do_monte_carlo returns a number in the ball park of alpha.\n\nWant to improve this tutorial? Report any suggestions/bugs/improvements on here! We‚Äôre interested in learning from you how we can make this tutorial better."
  },
  {
    "objectID": "R files/3 Module/mod3.html",
    "href": "R files/3 Module/mod3.html",
    "title": "Module 3: Vectors and Lists",
    "section": "",
    "text": "Download a copy of Module 3 slides\nDownload data for Module 3 lab and tutorial"
  },
  {
    "objectID": "R files/3 Module/mod3.html#vectors-and-lists",
    "href": "R files/3 Module/mod3.html#vectors-and-lists",
    "title": "Module 3: Vectors and Lists",
    "section": "",
    "text": "Download a copy of Module 3 slides\nDownload data for Module 3 lab and tutorial"
  },
  {
    "objectID": "R files/3 Module/mod3.html#lab-3",
    "href": "R files/3 Module/mod3.html#lab-3",
    "title": "Module 3: Vectors and Lists",
    "section": "Lab 3",
    "text": "Lab 3\n\nGeneral Guidelines:\nYou will encounter a few functions we did not cover in the lecture video. This will give you some practice on how to use a new function for the first time. You can try following steps:\n\nStart by typing ?new_function in your Console to open up the help page\nRead the help page of this new_function. The description might be too technical for now. That‚Äôs OK. Pay attention to the Usage and Arguments, especially the argument x or x,y (when two arguments are required)\nAt the bottom of the help page, there are a few examples. Run the first few lines to see how it works\nApply it in your lab questions\n\nIt is highly likely that you will encounter error messages while doing this lab Here are a few steps that might help get you through it.\n\nLocate which line is causing this error first\nCheck if you may have a typo in the code. Sometimes another person can spot a typo faster than you.\nIf you enter the code without any typo, try googling the error message\nScroll through the top few links see if any of them helps\nTry working on the next few questions while waiting for answers by TAs\n\n\n\nWarm-up\n\nIn the lecture, we covered c(), :, rep(), seq() among other ways to create vectors.\n\n\ndolly = c(9, 10, 11, 12, 13, 14, 15, 16, 17) \nbees = c(\"b\", \"b\", \"b\", \"b\", \"b\")\n\n\nRecreate dolly using :.\nCreate the same vector using seq().\nRecreate bees using rep().\n\n\nWe are now going to use the functions rnorm() and runif() to initialize vectors.\n\n\nrandom_norm = rnorm(100) \nrandom_unif = runif(1000)\n\n\nHow long are the vectors random_norm and random_unif? Use length() to verify.\nWhat are the largest and smallest values in random_norm and random_unif? Use min() and max().\nUse mean() and sd() to calculate the mean and standard deviation of the two distributions.\nCreate a new vector with 10000 draws from the standard normal distribution.\nrnorm() by default sets mean = 0 (see ?rnorm). Create a vector of 10000 draws from the normal distribution with mean = 1. Use mean() to verify.\n\nNotice the functions min(), max(), mean() and sd() all take a vector with many values and summarize them as one value. These are good to use with summarize() when doing data analysis on simple dataframes.\n\nData Types\n\nUse typeof() to verify the data types of dolly, bees, random_unif\nCoerce dolly to a character vector. Recall we have functions as.&lt;type&gt;() for this kind of coercion.\nTry to coerce bees to type numeric. What does R do when you ask it to turn ‚Äúb‚Äù into a number?\n\n\n\nVectorized Math\n\na and b are vectors of length 10. Look at them in the console.\n\n\na &lt;- 1:10\nb &lt;- rep(c(2, 4), 5)\n\n\nAdd a and b element by element.\nSubtract a and b element by element.\nDivide a by b element by element.\nMultiply a and b element by element.\nRaise the element of a to the power of b element by element.\nMultiply each element of a by 3 then subtract b\nRaise each element of b to the third power.\nTake the square root of each element of a.\n\n\n\nCalculating Mean and Standard Deviation\n\nCalculating the Mean\nIn this exercise, we will calculate the mean of a vector of random numbers. Wewill practice assigning new variables and using functions in R.\nWe can run the following code to create a vector of 1000 random numbers. The function set.seed() ensures that the process used to generate random numbers is the same across computers.\nNote: rf() is a R command we use to generate 1000 random numbers according to the F distribution, and 10 and 100 are parameters that specify how ‚Äúpeaked‚Äù the distribution is.\n\nset.seed(1)\nrandom_numbers = rf(1000, 10, 100)\n\nWrite code that gives you the sum of random_numbers and saves it to a new variable called numbers_sum:\nHint: To sum the numbers in a vector, use the sum() function.\nNote: You don‚Äôt automatically see the output of numbers_sum when you assign it to a variable. Type numbers_sum into the console and run it to see the value that you assigned it.\nWrite code that gives you the number of items in the random_numbers vector and saves it to a new variable called numbers_count:\nHint: To count the number of items in a vector, use the length() function.\nNow write code that uses the above two variables to calculate the average of random_numbers and assign it to a new variable called this_mean.\nWhat number did you get? It should have been 1.018. If it isn‚Äôt, double check your code!\nR actually has a built in function to calculate the mean for you, so you don‚Äôt have to remember how to build it from scratch each time! Check your above answer by using the mean() function on the random_numbers vector.\n\n\nCalculating the Standard Deviation\nNow that you‚Äôve got that under your fingers, let‚Äôs move on to standard deviation.\nWe will be converting the following formula for calculating the sample standard deviation into code:\n\\(s = \\sqrt{\\frac{\\sum_{i=1}^n (x_i - \\overline{x})^2} {n-1}}\\)\nFor this, we‚Äôll review the concept of vectorization. This means that an operation like subtraction will act on all numbers in a vector at the same time.\nSubtract this_mean from the random_numbers vector. Did each number in random_numbers change?\nTry to write the formula for standard deviation in R code using the sqrt(), sum(), and length() functions, along with other operators (^, /, -). Assign it to a new variable called this_sd. Watch out for your parentheses!\nWhat number did you get for this_sd, or the standard deviation of random_numbers? If you didn‚Äôt get 0.489704, recheck your code!\nR also has a built in function for standard deviation. Check if you calculated the standard deviation correctly by using the sd() function on the random_numbers vector.\n\n\n\nMaking a Histogram of Our Numbers\nWhat do these random numbers look like, anyway? We can use base plotting in R to visualize the distribution of our random numbers.\nRun the following code to visualize the original distribution of random_numbers as a histogram.\n\nhist(random_numbers)\n\nNotice how most of the values are concentrated on the left-hand side of the graph, while there is a longer ‚Äútail‚Äù to the right? Counterintuitively, this is known as a right-skewed distribution. When we see a distribution like this, one common thing to do is to normalize it.\nThis is also known as calculating a z-score, which we will cover next.\n\n\nCalculating a Z-Score\nThe formula for calculating a z-score for a single value, or normalizing that value, is as follows:\n\\(z = \\frac{x - \\bar{x}}{s}\\)\nThis can be calculated for each value in random_numbers in context of the larger set of values.\nCan you translate this formula into code?\nUsing random_numbers, this_mean, and this_sd that are already in your environment, write a formula to transform all the values in random_numbers into z-scores, and assign it to the new variable normalized_data.\nHint: R is vectorized, so you can subtract the mean from each random number in random_numbers in a straightforward way.\nTake the mean of normalized_data and assign it to a variable called normalized_mean.\nNote: If you see something that ends in ‚Äúe-16‚Äù, that means that it‚Äôs a very small decimal number (16 places to the right of the decimal point), and is essentially 0.\nTake the standard deviation of normalized_data and assign it to a variable called normalized_sd.\nWhat is the value of normalized_mean? What is the value of normalized_sd? You should get a vector that is mean zero and has a standard deviation of one, because the data has been normalized.\n\nMaking a Histogram of Z-scores\nLet‚Äôs plot the z-scores and see if our values are still skewed. How does this compare to the histogram of random_numbers? Run the following code:\n\nhist(normalized_data)\n\nIs the resulting data skewed?\n\n\n\n\nCalculating a T-Score\nT-tests are used to determine if two sample means are equal. The formula for calculating a t-score is as follows:\n\\(t = \\frac{\\overline{x}_1 - \\overline{x}_2}{\\sqrt{\\frac{s_1^2}{n_1} + \\frac{s_2^2}{n_2}}}\\)\nwhere \\(\\overline{x}_i\\) is the mean of the first or second set of data, \\(s_i\\) is the sample standard deviation of the first or second set of data, and \\(n_i\\) is the sample size of the \\(i\\)th set of data.\nWe‚Äôll first create two data sets of random numbers following a normal distribution:\n\nset.seed(1)\ndata_1 &lt;- rnorm(1000, 3)\ndata_2 &lt;- rnorm(100, 2)\n\nHere‚Äôs how we‚Äôll calculate the mean (x_1), standard deviation (s_1), and sample size (n_1) of the first data set:\n\nx_1 &lt;- mean(data_1)\ns_1 &lt;- sd(data_1)\nn_1 &lt;- length(data_1)\n\nWhat numeric types do you get from doing this? Try running the typeof() function on each of x_1, s_1, and n_1. We have you started with x_1.\n\ntypeof(x_1)\n\n[1] \"double\"\n\n\nWhat object type is n_1?\nCan you calculate the same values for data_2, assigning mean, standard deviation, and length to the variables of x_2, s_2, and n_2, respectively?\nWhat values do you get for x_2 and s_2?\nNow, you should be able to translate the t-score formula (\\(\\frac{\\overline{x}_1 - \\overline{x}_2}{\\sqrt{\\frac{s_1^2}{n_1} + \\frac{s_2^2}{n_2}}}\\)) into code, based on the above calculated values.\nWhat did you get for the t-score? You should have gotten 9.243, if not, double check your code!\nThe t-score‚Äôs meaning depends on your sample size, but in general t-scores close to 0 imply that the means are not statistically distinguishable, and large t-scores (e.g.¬†t &gt; 3) imply the data have different means.\n\nPerforming a T-Test\nOnce again, R has a built in function that will perform a T-test for us, aptly named t.test(). Look up the arguments the function t.test() takes, and perform a T-test on data_1 and data_2.\nWhat are the sample means, and are they distinguishable from each other?\nWell done! You‚Äôve learned how to work with R to calculate basic statistics. We‚Äôve had you generate a few by hand, but be sure to use the built-in functions in R in the future.\nWant to improve this tutorial? Report any suggestions/bugs/improvements on here! We‚Äôre interested in learning from you how we can make this tutorial better."
  },
  {
    "objectID": "R files/4 Module/mod4.html",
    "href": "R files/4 Module/mod4.html",
    "title": "Module 4: Data Manipulation",
    "section": "",
    "text": "Download a copy of Module 4 slides\nDownload data for Module 4 lab and tutorial"
  },
  {
    "objectID": "R files/4 Module/mod4.html#data-manipulation",
    "href": "R files/4 Module/mod4.html#data-manipulation",
    "title": "Module 4: Data Manipulation",
    "section": "",
    "text": "Download a copy of Module 4 slides\nDownload data for Module 4 lab and tutorial"
  },
  {
    "objectID": "R files/4 Module/mod4.html#lab-4",
    "href": "R files/4 Module/mod4.html#lab-4",
    "title": "Module 4: Data Manipulation",
    "section": "Lab 4",
    "text": "Lab 4\nIn this lab, you will work with 2 data sets (world_wealth_inequality.xlsx and midwest.dta).\n\nGeneral Guidelines:\nYou will encounter a few functions we did not cover in the lecture video. This will give you some practice on how to use a new function for the first time. You can try following steps:\n\nStart by typing ?new_function in your Console to open up the help page\nRead the help page of this new_function. The description might be too technical for now. That‚Äôs OK. Pay attention to the Usage and Arguments, especially the argument x or x,y (when two arguments are required)\nAt the bottom of the help page, there are a few examples. Run the first few lines to see how it works\nApply it in your lab questions\n\nIt is highly likely that you will encounter error messages while doing this lab Here are a few steps that might help get you through it.\n\nLocate which line is causing this error first\nCheck if you may have a typo in the code. Sometimes another person can spot a typo faster than you.\nIf you enter the code without any typo, try googling the error message\nScroll through the top few links see if any of them helps\nTry working on the next few questions while waiting for answers by TAs\n\n\n\nWarm-up\n\nWhich of these are commands from dplyr?\n\n\nmutate()\nfilter()\nmean()\n\n\nIn the videos, you learned about head(). What if you wanted to get the tail end of your data instead?\nImagine you have a data set, df with 4 variables, county, year, income, and employment. You only need the year and employment status of people whose income is below $5000. Which two dplyr commands do you need to do this? Can you write the code for this?\nRemember the mean() function? What dplyr commands would we need if we want the average income in counties for the year 2003? Can you write the code for this?\nLoad tidyverse, haven, and readxl in your Rmd. If you haven‚Äôt yet, download the data from this page and put the data in your data folder and set your working directory. The data source is the World Inequality Database where you can find data about the distribution of income and wealth in several contries over time. Outside of lab time, check out wid.world for more information.\nIf you followed the set-up from above, you should be able to run the following code with no error.\n\n\nwid_data &lt;- read_xlsx(\"world_wealth_inequality.xlsx\")\n\n\n\nExamining ‚Äôwid_data\n\nLook at the data. What is the main problem here?\nWe don‚Äôt have columns headers. The World Inequality Database says the ‚Äústructure‚Äù of the download is as shown in the image below.\n\n\nSo we can create our own header in read_xlsx. Calling the read_xlsx function using readxl::read_xlsx() ensures that we use the read_xlsx() function from the readxl package.\n\nwid_data_raw &lt;- readxl::read_xlsx(\"world_wealth_inequality.xlsx\",\n                                   col_names = c(\"country\", \"indicator\",\n                                                 \"percentile\", \"year\", \"value\"))\n\nNow when we look at the second column. It‚Äôs a mess. We can separate it based on where the \\n are and then deal with the data later. Don‚Äôt worry about this code right now.\n\nwid_data_raw &lt;- readxl::read_xlsx(\"world_wealth_inequality.xlsx\",\n                                  col_names = c(\"country\", \"indicator\",\n                                                \"percentile\", \"year\", \n                                                \"value\")) %&gt;%\n  separate(indicator, sep = \"\\\\n\", into = c(\"row_tag\", \"type\", \"notes\"))\n\nNote: We want a clean reproducible script so you should just have one block of code reading the data: that last one. The other code were building blocks. If you want to keep ‚Äúextra‚Äù code temporarily in your script you can use # to comment out the code.\n\n\nManipulating World Inequality Data with dplyr\nNow we have some data and are ready to use select(), filter(), mutate(), summarize() and arrange() to explore it.\n\nThe data comes with some redundant columns that add clutter when we examine the data. What dplyr verb let‚Äôs you choose what columns to see? Remove the unwanted column row_tag and move notes to the last column position and assign the output to the name wid_data1\nLet‚Äôs start to dig into the data. We have two types of data: ‚ÄúNet personal wealth‚Äù and ‚ÄúNational income‚Äù. Start by filter()ing the data so we only have ‚ÄúNet personal wealth‚Äù for France, name the resulting data french_data and then run the code below to visualize the data.\n\n\n# replace each ... with relevant code\nfrench_data &lt;- wid_data %&gt;% filter( ... , ...)\n\nNote: When refering to words in the data, make sure they are in quotes ‚ÄúFrance‚Äù, ‚ÄúNet personal wealth‚Äù. When referring to columns, do not use quotes.\n\nfrench_data %&gt;% \n  ggplot(aes(y = value, x = year, color = percentile)) + \n  geom_line()\n\nNow we‚Äôre getting somewhere! The plot shows the proportion of national wealth owned by different segements of French society overtime. For example in 2000, the top 1 percent owned roughly 28 percent of the wealth, while the bottom 50 percent owned abouy 7 percent.\n\nExplain the gaps in the plot. Using filter(), look at french_data in the years between 1960 and 1970. Does what you see line up with what you guessed by looking at the graph?\nUsing mutate(), create a new column called perc_national_wealth that equals value multiplied by 100. Adjust the graph code so that the y axis shows perc_national_wealth instead of value.\nNow following the same steps, explore data from the ‚ÄúRussian Federation‚Äù.\nThe data for ‚ÄúRussian Federation‚Äù does not start in 1900, but our y-axis does. That‚Äôs because we have a bunch of NAs. Let‚Äôs filter out the NAs and remake the plot. You cannot test for NA using == (Try: NA == NA). Instead we have a function called is.na(). (Try: is.na(NA) and !is.na(NA)).\nUse two dplyr verbs to figure out what year the bottom 50 percent held the least wealth. First, choose the rows that cover the bottom 50 percent and then sort the data in descending order using arrange()2.\n\n\n# replace ... with relevant code\nrussian_data %&gt;% \n  filter(...) %&gt;% \n  arrange(...)\n\n\nFor both the Russian Federation and French data, calculate the average proportion of wealth owned by the top 10 percent over the period from 1995 to 2010. You‚Äôll have to filter and then summarize with summarize().\n\n\n# replace ... with relevant code\nrussian_data %&gt;% \n  filter(...) %&gt;% \n  summarize(top10 = mean(...))\n\n\n\nManipulating Midwest Demographic Data with dplyr\n\nNow we‚Äôll use midwestern demographic data which is at this link. The dataset includes county level data for a single year. We call data this type of data ‚Äúcross-sectional‚Äù since it gives a point-in-time cross-section of the counties of the midwest. (The world inequality data is ‚Äútimeseries‚Äù data).\nSave midwest.dta in your data folder and load it into R.\n\n\nmidwest &lt;- read_dta('midwest.dta')\n\n\nRun the following code to get a sense of what the data looks like:\n\n\nglimpse(midwest)\n\n\nI wanted a tibble called midwest_pop that only had county identifiers and the 9 columns from midwest concerned with population counts. Replicate my work to create midwest_pop on your own3.\n\n\nnames(midwest_pop)\n\n [1] \"county\"          \"state\"           \"poptotal\"        \"popdensity\"     \n [5] \"popwhite\"        \"popblack\"        \"popamerindian\"   \"popasian\"       \n [9] \"popother\"        \"popadults\"       \"poppovertyknown\"\n\n\nHint: I went to ?select and found a selection helper that allowed me to select those 9 columns without typing all their names\n\n# replace ... with relevant code\nmidwest_pop &lt;- midwest %&gt;% select(county, state, ...)\n\n\nFrom midwest_pop calculate the area of each county4. What‚Äôs the largest county in the midwest? How about in Illinois?\nFrom midwest_pop calculate percentage adults for each county. What county in the midwest has the highest proportion of adults? What‚Äôs county in the midwest has the lowest proportion of adults?\nHow many people live in Michigan?\nNote that together population density and population can give you information about the area (geographic size) of a location. What‚Äôs the total area of Illinois? You probably have no idea what the units are though. If you google, you‚Äôll find that it doesn‚Äôt align perfectly with online sources. Given the units don‚Äôt align with other sources, can this data still be useful?\n\nWell done! You‚Äôve learned how to work with R to perform simple data manipulation and analysis!\nWant to improve this tutorial? Report any suggestions/bugs/improvements on here! We‚Äôre interested in learning from you how we can make this tutorial better."
  },
  {
    "objectID": "R files/4 Module/mod4.html#footnotes",
    "href": "R files/4 Module/mod4.html#footnotes",
    "title": "Module 4: Data Manipulation",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nHint: You can type all the column names or use the slicker select(-notes, everything())‚Ü©Ô∏é\nHint: Look at the examples in ?arrange‚Ü©Ô∏é\nHint: notice that all the columns start with the same few letters.‚Ü©Ô∏é\nNotice that \\(popdensity = \\frac{poptotal}{area}\\)‚Ü©Ô∏é"
  },
  {
    "objectID": "R files/6 Module/mod6.html",
    "href": "R files/6 Module/mod6.html",
    "title": "Module 6: Data Visualization as a Tool for Analysis",
    "section": "",
    "text": "Download a copy of Module 6 slides\nDownload data for Module 6 lab and tutorial"
  },
  {
    "objectID": "R files/6 Module/mod6.html#data-visualization-as-a-tool-for-analysis",
    "href": "R files/6 Module/mod6.html#data-visualization-as-a-tool-for-analysis",
    "title": "Module 6: Data Visualization as a Tool for Analysis",
    "section": "",
    "text": "Download a copy of Module 6 slides\nDownload data for Module 6 lab and tutorial"
  },
  {
    "objectID": "R files/6 Module/mod6.html#lab-6",
    "href": "R files/6 Module/mod6.html#lab-6",
    "title": "Module 6: Data Visualization as a Tool for Analysis",
    "section": "Lab 6",
    "text": "Lab 6\nIn this lab, you will work with midwest.dta.\n\nGeneral Guidelines:\nYou will encounter a few functions we did not cover in the lecture video. This will give you some practice on how to use a new function for the first time. You can try following steps:\n\nStart by typing ?new_function in your Console to open up the help page\nRead the help page of this new_function. The description might be too technical for now. That‚Äôs OK. Pay attention to the Usage and Arguments, especially the argument x or x,y (when two arguments are required)\nAt the bottom of the help page, there are a few examples. Run the first few lines to see how it works\nApply it in your lab questions\n\nIt is highly likely that you will encounter error messages while doing this lab Here are a few steps that might help get you through it.\n\nLocate which line is causing this error first\nCheck if you may have a typo in the code. Sometimes another person can spot a typo faster than you.\nIf you enter the code without any typo, try googling the error message\nScroll through the top few links see if any of them helps\nTry working on the next few questions while waiting for answers by TAs\n\n\n\nQuestions\nRecall ggplot works by mapping data to aesthetics and then telling ggplot how to visualize the aesthetic with geoms. Like so:\n\nmidwest %&gt;%\n  ggplot(aes(x = percollege, \n             y = percbelowpoverty,\n             color = state,\n             size = poptotal,\n             alpha = percpovertyknown)) + \n  geom_point() + facet_wrap(vars(state))\n\n\n\n\n\nWhich is more highly correlated with poverty at the county level, college completion rates or high school completion rates? Is it consistent across states? Change one line of code in the above graph.\n\n\n\ngeoms\nFor the following, write code to reproduce each plot using midwest\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNotice here inmetro is numeric, but I want it to behave like a discrete variable so I use x = as.character(inmetro). Use labs(title = \"Asian population by metro status\") to create the title.\n\n\n\n\n\n\n\nUse geom_boxplot() instead of geom_point() for ‚ÄúAsian population by metro status‚Äù\nUse geom_jitter() instead of geom_point() for ‚ÄúAsian population by metro status‚Äù\nUse geom_jitter() and geom_boxplot() at the same time for ‚ÄúAsian population by metro status‚Äù. Does order matter?\nHistograms are used to visualize distributions. What happens when you change the bins argument? What happens if you leave the bins argument off?\n\n\nmidwest %&gt;%\n  ggplot(aes(x = perchsd)) +\n  geom_histogram(bins = 100) +\n  labs(title = \"distribution of county-level hs completion rate\")\n\n\n\n\n\nRemake ‚Äúdistribution of county-level hs completion rate‚Äù with geom_density() instead of geom_histogram().\nAdd a vertical line at the median perchsd using geom_vline. You can calculate the median directly in the ggplot code.\n\n\nAesthetics\nFor the following, write code to reproduce each plot using midwest\n\nUse x, y, color and size\n\n\n\n\n\n\n\nUse x, y, color and size\n\n\n\n\n\n\n\nWhen making bar graphs, color only changes the outline of the bar. Change the aestethic name to fill to get the desired result\n\n\nmidwest %&gt;% \n  count(state) %&gt;% \n  ggplot(aes(x = state,\n             y = n, \n             color = state)) + \n  geom_col()\n\n\n\n\n\nThere‚Äôs a geom called geom_bar that takes a dataset and calculates the count. Read the following code and compare it to the geom_col code above. Describe how geom_bar() is different than geom_col\n\n\nmidwest %&gt;% \n  ggplot(aes(x = state,\n             color = state)) +\n  geom_bar()\n\n\n\n\nWell done! You‚Äôve learned how to work with R to create some awesome looking visuals!\nWant to improve this tutorial? Report any suggestions/bugs/improvements on here! We‚Äôre interested in learning from you how we can make this tutorial better."
  },
  {
    "objectID": "R files/0 Module/mod0.html",
    "href": "R files/0 Module/mod0.html",
    "title": "Module 0",
    "section": "",
    "text": "Mac Users\n\nTo Install R:\n\nOpen an internet browser and go to www.r-project.org\nClick the ‚Äúdownload R‚Äù link in the middle of the page under ‚ÄúGetting Started.‚Äù\nSelect a CRAN location (a mirror site) and click the corresponding link.\nClick on the ‚ÄúDownload R for (Mac) OS X‚Äù link at the top of the page.\nClick on the file containing the latest version of R under ‚ÄúFiles.‚Äù\nSave the .pkg file, double-click it to open, and follow the installation instructions.\nNow that R is installed, you need to download and install RStudio.\n\nTo Install RStudio:\n\nGo to https://www.rstudio.com and click on the ‚ÄúDownload‚Äù button on the top right ( right above ‚ÄúPricing‚Äù).\nClick on ‚ÄúDownload RStudio Desktop.‚Äù\nClick on the version recommended for your system, or the latest Mac version, save the .dmg file on your computer, double-click it to open, and then drag and drop it to your applications folder.\n\n\nWindows Users\n\nTo Install R:\n\nOpen an internet browser and go to www.r-project.org.\nClick the ‚Äúdownload R‚Äù link in the middle of the page under ‚ÄúGetting Started.‚Äù\nSelect a CRAN location (a mirror site) and click the corresponding link.\nClick on the ‚ÄúDownload R for Windows‚Äù link at the top of the page.\nClick on the ‚Äúinstall R for the first time‚Äù link at the top of the page.\nClick ‚ÄúDownload R for Windows‚Äù and save the executable file somewhere on your computer. Run the .exe file and follow the installation instructions.\nNow that R is installed, you need to download and install RStudio.\n\nTo Install RStudio:\n\nGo to https://www.rstudio.com and click on the ‚ÄúDownload‚Äù button on the top right ( right above ‚ÄúPricing‚Äù).\nClick on ‚ÄúDownload RStudio Desktop.‚Äù\nClick on the version recommended for your system, or the latest Windows version, and save the executable file. Run the .exe file and follow the installation instructions."
  },
  {
    "objectID": "R files/0 Module/mod0.html#r-and-rstudio-installation-guide",
    "href": "R files/0 Module/mod0.html#r-and-rstudio-installation-guide",
    "title": "Module 0",
    "section": "",
    "text": "Mac Users\n\nTo Install R:\n\nOpen an internet browser and go to www.r-project.org\nClick the ‚Äúdownload R‚Äù link in the middle of the page under ‚ÄúGetting Started.‚Äù\nSelect a CRAN location (a mirror site) and click the corresponding link.\nClick on the ‚ÄúDownload R for (Mac) OS X‚Äù link at the top of the page.\nClick on the file containing the latest version of R under ‚ÄúFiles.‚Äù\nSave the .pkg file, double-click it to open, and follow the installation instructions.\nNow that R is installed, you need to download and install RStudio.\n\nTo Install RStudio:\n\nGo to https://www.rstudio.com and click on the ‚ÄúDownload‚Äù button on the top right ( right above ‚ÄúPricing‚Äù).\nClick on ‚ÄúDownload RStudio Desktop.‚Äù\nClick on the version recommended for your system, or the latest Mac version, save the .dmg file on your computer, double-click it to open, and then drag and drop it to your applications folder.\n\n\nWindows Users\n\nTo Install R:\n\nOpen an internet browser and go to www.r-project.org.\nClick the ‚Äúdownload R‚Äù link in the middle of the page under ‚ÄúGetting Started.‚Äù\nSelect a CRAN location (a mirror site) and click the corresponding link.\nClick on the ‚ÄúDownload R for Windows‚Äù link at the top of the page.\nClick on the ‚Äúinstall R for the first time‚Äù link at the top of the page.\nClick ‚ÄúDownload R for Windows‚Äù and save the executable file somewhere on your computer. Run the .exe file and follow the installation instructions.\nNow that R is installed, you need to download and install RStudio.\n\nTo Install RStudio:\n\nGo to https://www.rstudio.com and click on the ‚ÄúDownload‚Äù button on the top right ( right above ‚ÄúPricing‚Äù).\nClick on ‚ÄúDownload RStudio Desktop.‚Äù\nClick on the version recommended for your system, or the latest Windows version, and save the executable file. Run the .exe file and follow the installation instructions."
  },
  {
    "objectID": "Data/viz/2023-01-10 Tidy Tuesday/TT_wk2.html",
    "href": "Data/viz/2023-01-10 Tidy Tuesday/TT_wk2.html",
    "title": "Tidy Tuesday, 2023 Week 2 üê¶",
    "section": "",
    "text": "Data for this week‚Äôs TidyTuesday comes from FeederWatch!\nHere is a little more information about the data:"
  },
  {
    "objectID": "Data/viz/2023-01-10 Tidy Tuesday/TT_wk2.html#my-plot",
    "href": "Data/viz/2023-01-10 Tidy Tuesday/TT_wk2.html#my-plot",
    "title": "Tidy Tuesday, 2023 Week 2 üê¶",
    "section": "My plot",
    "text": "My plot\n\nüê¶ FeederWatch\n\nCode here"
  },
  {
    "objectID": "Data/viz/2023-02-07 Tidy Tuesday/TT_wk6.html",
    "href": "Data/viz/2023-02-07 Tidy Tuesday/TT_wk6.html",
    "title": "Tidy Tuesday, 2023 Week 6 üìà",
    "section": "",
    "text": "Week\nDate\nData\nSource\nArticle\n\n\n\n\n6\n2023-02-07\nBig Tech Stock Prices\nBig Tech Stock Prices on Kaggle\n5 Charts on Big Tech Stocks‚Äô Collapse\nHere is a little more information about the data:"
  },
  {
    "objectID": "Data/viz/2023-02-07 Tidy Tuesday/TT_wk6.html#my-plot",
    "href": "Data/viz/2023-02-07 Tidy Tuesday/TT_wk6.html#my-plot",
    "title": "Tidy Tuesday, 2023 Week 6 üìà",
    "section": "My plot",
    "text": "My plot\n\nüìà Big Tech Stock Prices\n\nCode here"
  },
  {
    "objectID": "Data/viz/healthcare area chart/healthcare_areachart.html",
    "href": "Data/viz/healthcare area chart/healthcare_areachart.html",
    "title": "Healthcare Area Chart",
    "section": "",
    "text": "Health Insurance by Income: 2020\n\n\n\n Other\n\n\n Military\n\n\n CHIP\n\n\n Subsidized Exchange\n\n\n Medicare and Medicaid\n\n\n\n\n\n\nNote: The income measure used here is  disposable income  , which is defined as market income plus cash transfers from the government and noncash benefits like food stamps and public housing. It excludes taxes, out-of-pocket medical spending, insurance premiums and other expenses. There have been small changes in the census questionnaire between the two survey dates. Source: Current Population Survey, analysis by Matt Bruenig\n\n\n\n\n\nCode here"
  },
  {
    "objectID": "Data/viz/2023-01-31 Tidy Tuesday/TT_wk5.html",
    "href": "Data/viz/2023-01-31 Tidy Tuesday/TT_wk5.html",
    "title": "Tidy Tuesday, 2023 Week 5 üê±",
    "section": "",
    "text": "Week\nDate\nData\nSource\nArticle\n\n\n\n\n5\n2023-01-31\nPet Cats UK\nMovebank for Animal Tracking Data\nCats on the Move\nHere is a little more information about the data:"
  },
  {
    "objectID": "Data/viz/2023-01-31 Tidy Tuesday/TT_wk5.html#my-plot",
    "href": "Data/viz/2023-01-31 Tidy Tuesday/TT_wk5.html#my-plot",
    "title": "Tidy Tuesday, 2023 Week 5 üê±",
    "section": "My plot",
    "text": "My plot\n\nüê± Pet Cats UK\n\nCode here"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Jacob Jameson",
    "section": "",
    "text": "Welcome to my blog!\n\n\n\n\n\n\n\n\n  \n\n\n\n\nThe ‚ÄòOdd‚Äô Obsession with Odds Ratios: Making a Case for Marginal Effects in Health Research\n\n\n\n\n\n\n\nmarginal effects\n\n\n\n\nMarginal Effects &gt;&gt;&gt; Odds Ratios\n\n\n\n\n\n\nSep 1, 2023\n\n\nJacob Jameson\n\n\n\n\n\n\n  \n\n\n\n\nBasic Network Analysis and Visualization for Directed Graphs in R\n\n\n\n\n\n\n\nnetworks\n\n\ncentrality\n\n\n\n\nChoosing the Right Centrality Measure.\n\n\n\n\n\n\nNov 1, 2022\n\n\nJacob Jameson\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "Research",
    "section": "",
    "text": "An article about computational science in a scientific publication is not the scholarship itself, it is merely advertising of the scholarship. The actual scholarship is the complete software development environment and the complete set of instructions which generated the figures. - J. Buckheit and D. Donoho\nI am committed to open science principles and research reproducibility. You can find the code repositories for my academic papers on my Github.\n\n\n\n\n\n\nRecruiting patients for clinical research is challenging, especially for underrepresented populations, and may be influenced by patients‚Äô relationships with their physicians, care experiences, and engagement with care. This study sought to understand predictors of enrollment in a research study among socioeconomically diverse participants in studies of care models that promote continuity in the doctor‚Äìpatient relationship.\n\nCopy Citation\n\n\nPDF\n\n\nCode Repo\n\n\n\n\n\n\n\n\n\nCopy Citation\n\n\nPDF\n\n\nCode Repo\n\n\n\n\n\nCopy Citation\n\n\nPDF\n\n\nCode Repo"
  },
  {
    "objectID": "research.html#published-papers",
    "href": "research.html#published-papers",
    "title": "Research",
    "section": "",
    "text": "Recruiting patients for clinical research is challenging, especially for underrepresented populations, and may be influenced by patients‚Äô relationships with their physicians, care experiences, and engagement with care. This study sought to understand predictors of enrollment in a research study among socioeconomically diverse participants in studies of care models that promote continuity in the doctor‚Äìpatient relationship.\n\nCopy Citation\n\n\nPDF\n\n\nCode Repo"
  },
  {
    "objectID": "research.html#under-review",
    "href": "research.html#under-review",
    "title": "Research",
    "section": "",
    "text": "Copy Citation\n\n\nPDF\n\n\nCode Repo\n\n\n\n\n\nCopy Citation\n\n\nPDF\n\n\nCode Repo"
  },
  {
    "objectID": "index.html#about-me",
    "href": "index.html#about-me",
    "title": "Jacob Jameson",
    "section": "",
    "text": "I am a PhD student at Harvard University studying Health Policy and Decision Sciences. I am currently advised by Dr.¬†Soroush Saghafian and work in The Public Impact Analytics Science Lab (PIAS-Lab) at Harvard. I also hold a research position in Boston Children‚Äôs Hospital General Pediatric Unit.\nI use tools from operations research, engineering, computer science, and economics to inform decision being made under conditions of uncertainty."
  },
  {
    "objectID": "posts/2023-09-01-OR/2023-09-01-OR.html",
    "href": "posts/2023-09-01-OR/2023-09-01-OR.html",
    "title": "The ‚ÄòOdd‚Äô Obsession with Odds Ratios: Making a Case for Marginal Effects in Health Research",
    "section": "",
    "text": "Odds ratios have been a long-standing mainstay in health research. Their use can be found sprinkled throughout countless academic journals and research papers. But just because something is popular doesn‚Äôt mean it‚Äôs the best choice for all contexts. The purpose of this article is to shed light on the limitations of odds ratios, particularly when it comes to interpretation, and advocate for the more intuitive marginal effects and predicted probabilities."
  },
  {
    "objectID": "posts/2023-09-01-OR/2023-09-01-OR.html#the-math-behind-odds-ratios",
    "href": "posts/2023-09-01-OR/2023-09-01-OR.html#the-math-behind-odds-ratios",
    "title": "The ‚ÄòOdd‚Äô Obsession with Odds Ratios: Making a Case for Marginal Effects in Health Research",
    "section": "The math behind odds ratios",
    "text": "The math behind odds ratios\nTo understand why odds ratios can be confusing, let‚Äôs briefly discuss what they represent.\nIn a logistic regression, the fundamental equation is:\n\\[log(\\frac{p}{1-p}) = \\beta_0 + \\beta_1X_1 + \\beta_2X_2 + ...\\]\nWhere \\(p\\) is the probability of an event occurring.\nThe odds ratio for a given predictor (let‚Äôs say \\(X_1\\)) is simply the exponentiated coefficient for that predictor:\nOdds Ratio for \\(X_1 = E^{\\beta_1}\\)\nIt represents the multiplicative change in the odds of the outcome for a one-unit increase in \\(X_1\\) , holding other variables constant. If this sounds confusing, you‚Äôre not alone."
  },
  {
    "objectID": "posts/2023-09-01-OR/2023-09-01-OR.html#when-odds-ratios-mislead",
    "href": "posts/2023-09-01-OR/2023-09-01-OR.html#when-odds-ratios-mislead",
    "title": "The ‚ÄòOdd‚Äô Obsession with Odds Ratios: Making a Case for Marginal Effects in Health Research",
    "section": "When Odds Ratios Mislead",
    "text": "When Odds Ratios Mislead\nThe challenge with odds ratios arises particularly when the outcome of interest is common. The reason being, odds ratios tend to exaggerate relative risks for common outcomes.\nLet‚Äôs say we find an odds ratio of 2 for a drug reducing heart attack risk. Many might (mistakenly) interpret this as ‚Äúpatients on the drug are twice as likely to avoid heart attacks.‚Äù In reality, they have twice the odds, which doesn‚Äôt translate directly to actual probabilities, especially when the event is common."
  },
  {
    "objectID": "posts/2023-09-01-OR/2023-09-01-OR.html#marginal-effects-clarity-over-confusion",
    "href": "posts/2023-09-01-OR/2023-09-01-OR.html#marginal-effects-clarity-over-confusion",
    "title": "The ‚ÄòOdd‚Äô Obsession with Odds Ratios: Making a Case for Marginal Effects in Health Research",
    "section": "Marginal Effects: Clarity over Confusion",
    "text": "Marginal Effects: Clarity over Confusion\nMarginal effects shine where odds ratios falter. They convey the change in the probability of an outcome for a one-unit change in the predictor, holding other variables constant. It‚Äôs a direct measure that offers a tangible understanding of impact.\nMathematically, for a binary predictor (like drug use: yes or no):\n\\[\\text{Marginal Effect} (dy/dx) = P(Y = 1|X=1) - P(Y=1|X=0)\\]\nFor continuous predictors, the marginal effect represents the derivative of the probability with respect to the predictor, which essentially gives us the rate of change."
  },
  {
    "objectID": "posts/2023-09-01-OR/2023-09-01-OR.html#predicted-probabilities-concrete-scenarios-over-abstract-odds",
    "href": "posts/2023-09-01-OR/2023-09-01-OR.html#predicted-probabilities-concrete-scenarios-over-abstract-odds",
    "title": "The ‚ÄòOdd‚Äô Obsession with Odds Ratios: Making a Case for Marginal Effects in Health Research",
    "section": "Predicted Probabilities: Concrete Scenarios Over Abstract Odds",
    "text": "Predicted Probabilities: Concrete Scenarios Over Abstract Odds\nPredicted probabilities go a step further, providing the likelihood of an outcome under specific conditions. Instead of leaving things in the realm of odds and abstract increases, we can state tangible scenarios."
  },
  {
    "objectID": "posts/2023-09-01-OR/2023-09-01-OR.html#demonstrating-with-real-world-data",
    "href": "posts/2023-09-01-OR/2023-09-01-OR.html#demonstrating-with-real-world-data",
    "title": "The ‚ÄòOdd‚Äô Obsession with Odds Ratios: Making a Case for Marginal Effects in Health Research",
    "section": "Demonstrating with ‚ÄúReal-World‚Äù Data",
    "text": "Demonstrating with ‚ÄúReal-World‚Äù Data\nTo provide concrete evidence of the limitations of odds ratios, let‚Äôs explore a simulated dataset that mirrors a health study on heart attacks, age, and drug use for high-risk individuals.\nFirst, we‚Äôll generate a dataset with age as a continuous predictor and drug_use as a binary predictor:\nSimulate data\n\n\nShow the code\n# Setting the seed for reproducibility\nset.seed(1234)\n\nn &lt;- 1000\n\n# Age distribution: Normally distributed between 40 and 70\nage &lt;- rnorm(n, 55, 7.5)\n\n# Drug use: 50% of the participants use the drug\ndrug_use &lt;- rbinom(n, 1, 0.5)\n\n# Log odds of heart attack: Base risk, then increasing slightly with age, \n# and decreasing with drug use (this is where we're setting the odds ratio to roughly 2 for drug use)\nlog_odds_heart_attack &lt;- -2 + 0.04 * age - log(2) * drug_use\n\n# Converting log odds to probability\nprob_heart_attack &lt;- exp(log_odds_heart_attack) / (1 + exp(log_odds_heart_attack))\n\n# Simulating whether a heart attack occurs or not\nheart_attack &lt;- rbinom(n, 1, prob_heart_attack)\n\n# Create a dataframe\ndata_high_risk &lt;- data.frame(age, drug_use, heart_attack)\n\n\n\nnrow(data_high_risk)\n\n[1] 1000\n\n\n\ndata_high_risk\n\n\n\n\n\n\n\nage\ndrug_use\nheart_attack\n\n\n\n\n45.94701\n0\n1\n\n\n57.08072\n0\n1\n\n\n63.13331\n1\n0\n\n\n37.40727\n1\n0\n\n\n58.21844\n0\n1\n\n\n58.79542\n1\n0\n\n\n50.68945\n1\n0\n\n\n50.90026\n0\n0\n\n\n50.76661\n1\n0\n\n\n48.32472\n0\n1\n\n\n\n\n\n\n\n\n\nModeling and Results\nUsing a logistic regression, we‚Äôll model the probability of a heart attack based on age and drug use:\n\nmodel_high_risk &lt;- glm(heart_attack ~ age + drug_use, \n                       data=data_high_risk, family = binomial)\n\nsummary(model_high_risk)\n\n\nCall:\nglm(formula = heart_attack ~ age + drug_use, family = binomial, \n    data = data_high_risk)\n\nDeviance Residuals: \n   Min      1Q  Median      3Q     Max  \n-1.662  -1.049  -0.854   1.188   1.685  \n\nCoefficients:\n            Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept) -2.24031    0.49848  -4.494 6.98e-06 ***\nage          0.04281    0.00896   4.777 1.78e-06 ***\ndrug_use    -0.66254    0.13064  -5.072 3.94e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 1373.7  on 999  degrees of freedom\nResidual deviance: 1324.4  on 997  degrees of freedom\nAIC: 1330.4\n\nNumber of Fisher Scoring iterations: 4\n\n\nUpon examining the output, you‚Äôll observe an odds ratio close to 2 for drug use (exponentiate the coeffecient). A common misinterpretation might be: ‚ÄúPatients on the drug have twice the likelihood to avoid heart attacks.‚Äù This is a misconception. They have twice the odds, not twice the probability. This distinction becomes especially murky when the event (heart attack) is common.\n\n\nMarginal Effects and Interpretation\nThe marginal effect of the drug can be found by computing the difference in predicted probabilities between drug users and non-users, holding other variables constant. This gives a more direct measure of the drug‚Äôs impact on the probability of heart attack.\nUsing our model, you can compute the marginal effect for any given age. For example, for someone aged 55:\n\npredicted_prob_on_drug &lt;- predict(model_high_risk, \n                                  newdata = data.frame(age = 55, drug_use = 1),\n                                  type = \"response\")\n\npredicted_prob_off_drug &lt;- predict(model_high_risk, \n                                   newdata = data.frame(age = 55, drug_use = 0),\n                                   type = \"response\")\n\nmarginal_effect_55 &lt;- predicted_prob_on_drug - predicted_prob_off_drug\n\nmarginal_effect_55\n\n         1 \n-0.1622666 \n\n\nThe result is a clear percentage point decrease in the probability of a heart attack for drug users compared to non-users.\nThis means that, for individuals aged 55, using the drug results in a 16 percentage point decrease in the probability of experiencing a heart attack compared to those not using the drug. This direct interpretation offers a tangible sense of the drug‚Äôs impact and is far more intuitive than grappling with odds ratios."
  },
  {
    "objectID": "posts/2023-09-01-OR/2023-09-01-OR.html#average-marginal-effects-a-comprehensive-view",
    "href": "posts/2023-09-01-OR/2023-09-01-OR.html#average-marginal-effects-a-comprehensive-view",
    "title": "The ‚ÄòOdd‚Äô Obsession with Odds Ratios: Making a Case for Marginal Effects in Health Research",
    "section": "Average Marginal Effects: A Comprehensive View",
    "text": "Average Marginal Effects: A Comprehensive View\nBeyond just evaluating the marginal effect at specific values, we can compute the average marginal effect (AME) across our sample. AMEs provide a holistic view of the predictor‚Äôs impact by averaging its effects over all observations in our dataset. It‚Äôs particularly insightful when dealing with continuous predictors like age.\n\nComputing the Average Marginal Effects\nTo compute the AMEs in R, you can leverage the margins package:\n\n#install.packages(\"margins\")\nlibrary(margins)\n\name &lt;- margins(model_high_risk, variables = \"drug_use\")\nsummary(ame)\n\n   factor     AME     SE       z      p   lower   upper\n drug_use -0.1556 0.0291 -5.3429 0.0000 -0.2127 -0.0985\n\n\nThis will give you the average marginal effect of drug use on the probability of a heart attack across all ages in the dataset.\n\n\nInterpreting the AMEs\nSuppose the AME for drug use is -0.156. This means that, on average, across all ages in our sample, using the drug is associated with a 15.6 percentage point decrease in the probability of experiencing a heart attack relative to not using the drug.\nThis single number provides an overarching sense of the drug‚Äôs impact, making it immensely useful for policy and clinical decisions. For instance, in public health discussions or in communications with patients, being able to state the average effect of a treatment can be more practical than specifying its impact at particular ages or conditions.\nBy incorporating AMEs into your analysis, you‚Äôre providing an extra layer of depth to your findings. This approach shifts the discussion from ‚Äúwhat might the effect be?‚Äù to ‚Äúhere‚Äôs the effect, on average, across our population.‚Äù When combined with specific marginal effects and predicted probabilities, this trio offers a robust, comprehensive, and intuitive understanding of your predictors‚Äô impacts."
  },
  {
    "objectID": "posts/2023-09-01-OR/2023-09-01-OR.html#visualizing-predicted-probabilities",
    "href": "posts/2023-09-01-OR/2023-09-01-OR.html#visualizing-predicted-probabilities",
    "title": "The ‚ÄòOdd‚Äô Obsession with Odds Ratios: Making a Case for Marginal Effects in Health Research",
    "section": "Visualizing Predicted Probabilities",
    "text": "Visualizing Predicted Probabilities\nTo provide a tangible representation, let‚Äôs plot the predicted probabilities of heart attacks by age from our model:\n\nlibrary(ggplot2)\n\ndata_high_risk$predicted_prob &lt;- predict(model_high_risk, type = \"response\")\npredictions &lt;- predict(model_high_risk, type = \"response\", se.fit = TRUE)\ndata_high_risk$lower_ci &lt;- predictions$fit - 1.96 * predictions$se.fit\ndata_high_risk$upper_ci &lt;- predictions$fit + 1.96 * predictions$se.fit\n\n\nggplot(data_high_risk, aes(x = age, \n                           y = predicted_prob, \n                           color = as.factor(drug_use))) +\n  geom_ribbon(aes(ymin = lower_ci, \n                  ymax = upper_ci, \n                  fill = as.factor(drug_use)), alpha = 0.3) +\n  geom_line() +\n  labs(title = \"Predicted Probability of Heart Attack by Age with 95% CI\",\n       y = \"Predicted Probability\",\n       x = \"Age\",\n       color = \"Drug Use\",\n       fill = \"Drug Use\") +\n  scale_color_discrete(labels = c(\"No Drug\", \"On Drug\")) +\n  scale_fill_discrete(labels = c(\"No Drug\", \"On Drug\")) +\n  theme_minimal()\n\n\n\n\nThe visual clearly illustrates the beneficial effect of the drug over time. It gives a tangible sense of how the risk of heart attacks evolves with age for both groups and the significant advantage of drug users. This can be especially useful for diagnostic purposes or to demonstrate the results of your model to stakeholders."
  },
  {
    "objectID": "posts/2023-09-01-OR/2023-09-01-OR.html#conclusion-a-call-to-transition",
    "href": "posts/2023-09-01-OR/2023-09-01-OR.html#conclusion-a-call-to-transition",
    "title": "The ‚ÄòOdd‚Äô Obsession with Odds Ratios: Making a Case for Marginal Effects in Health Research",
    "section": "Conclusion: A Call to Transition",
    "text": "Conclusion: A Call to Transition\nThe era of odds ratios has provided us with valuable insights, but as the field of health research progresses, so should our statistical tools and reporting practices. Marginal effects and predicted probabilities provide clearer, more intuitive insights, pushing us away from the ambiguous realm of odds and into the tangible world of real impact.\nAfter all, the end goal of our research is to provide clear, actionable insights that can be readily applied to improve health outcomes. Let‚Äôs choose clarity over tradition, and marginal effects over odds ratios.\nThank you!\nJacob"
  }
]