{
  "hash": "13bbe3eb8b225155dc0083822f1a263d",
  "result": {
    "markdown": "---\ntitle: \"Module 5: Data Manipulation and Analysis II\"\nfrom: markdown+emoji\npage-layout: full\ndescription: |\n  We introduce more complicated functions for data analysis. This is a continuation of Module 4.\n---\n\n\n##  Data Manipulation and Analysis II\n\n[Download a copy of Module 5 slides](slides5.html)\n\n[Download data for Module 5 lab and tutorial](data5.zip)\n\n\n<center> \n<iframe width=\"700\" height=\"500\"\nsrc=\"https://www.youtube.com/embed/dizukEPYkiE\">\n</iframe>\n</center>\n\n\n## Lab 5\n\n\n\nIn this lab, you will work with data sets from `recent_college_grads.dta`.\n\n### General Guidelines:\n\nYou will encounter a few functions we did not cover in the lecture video. This will give you some practice on how to use a new function for the first time. You can try following steps:\n\n1. Start by typing `?new_function` in your Console to open up the help page\n2. Read the help page of this new_function. The description might be too technical for now. That’s OK. Pay attention to the Usage and Arguments, especially the argument `x` or `x`,`y` (when two arguments are required)\n3. At the bottom of the help page, there are a few examples. Run the first few lines to see how it works\n4. Apply it in your lab questions\n\n**It is highly likely that you will encounter error messages while doing this lab Here are a few steps that might help get you through it.**\n\n1. Locate which line is causing this error first\n2. Check if you may have a typo in the code. Sometimes another person can spot a typo faster than you.\n3. If you enter the code without any typo, try googling the error message\n4. Scroll through the top few links see if any of them helps\n5. Try working on the next few questions while waiting for answers by TAs\n\n\n\n### Warm up\n\n\n1. Data wrangling and visualization with college data\n\nWe will explore data on college majors and earnings, specifically the data behind the FiveThirtyEight story [\"The Economic Guide To Picking A College Major\"](https://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/).\n\nWe read it in with the `read_dta` function, and save the result as a new data frame called `college_recent_grads`. Because `read_dta` is a function from `haven`, we will need to load that package. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(haven)\ncollege_recent_grads <- read_dta('recent_college_grads.dta')\n```\n:::\n\n\n\n\n`college_recent_grads` is a tidy **data frame**, with each row \nrepresenting an **observation** and each column representing a **variable**.\n\nTo view the data, you can take a quick peek at your data frame and view its dimensions with the `glimpse` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(college_recent_grads)\n```\n:::\n\n\nThe description of the variables, i.e. the **codebook**, is given below.\n\n| Variable                        |  Description\n|:----------------|:--------------------------------\n|`rank`                         | Rank by median earnings\n|`major_code`                   | Major code, FO1DP in ACS PUMS\n|`major`                        | Major description\n|`major_category`               | Category of major from Carnevale et al\n|`total`                        | Total number of people with major\n|`sample_size`                  | Sample size (unweighted) of full-time, year-round ONLY (used for earnings)\n|`men`                          | Male graduates\n|`women`                        | Female graduates\n|`sharewomen`                   | Women as share of total\n|`employed`                     | Number employed (ESR == 1 or 2)\n|`employed_full_time`           | Employed 35 hours or more\n|`employed_part_time`           | Employed less than 35 hours\n|`employed_full_time_yearround` | Employed at least 50 weeks (WKW == 1) and at least 35 hours (WKHP >= 35)\n|`unemployed`                   | Number unemployed (ESR == 3)\n|`unemployment_rate`            | Unemployed / (Unemployed + Employed)\n|`median`                       | Median earnings of full-time, year-round workers\n|`p25th`                        | 25th percentile of earnigns\n|`p75th`                        | 75th percentile of earnings\n|`college_jobs`                 | Number with job requiring a college degree\n|`non_college_jobs`             | Number with job not requiring a college degree\n|`low_wage_jobs`                | Number in low-wage service jobs\n\n\n### Which major has the lowest unemployment rate?\n\nIn order to answer this question all we need to do is sort the data. We use the\n`arrange` function to do this, and sort it by the `unemployment_rate` variable. \nBy default `arrange` sorts in ascending order, which is what we want here -- \nwe're interested in the major with the *lowest* unemployment rate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollege_recent_grads %>%\n  arrange(unemployment_rate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 173 × 21\n    rank major…¹ major major…² total sampl…³ men   women share…⁴ emplo…⁵ emplo…⁶\n   <dbl>   <dbl> <chr> <chr>   <chr>   <dbl> <chr> <chr> <chr>     <dbl>   <dbl>\n 1    53    4005 Math… Comput… 609         7 500   109   0.1789…     559     584\n 2    74    3801 Mili… Indust… 124         4 124   0     0             0     111\n 3    84    3602 Bota… Biolog… 1329        9 626   703   0.5289…    1010     946\n 4   113    1106 Soil… Agricu… 685         4 476   209   0.3051…     613     488\n 5   121    2301 Educ… Educat… 804         5 280   524   0.6517…     703     733\n 6    15    2409 Engi… Engine… 4321       30 3526  795   0.1839…    3608    2999\n 7    20    3201 Cour… Law & … 1148       14 877   271   0.2360…     930     808\n 8   120    2305 Math… Educat… 14237     123 3872  10365 0.7280…   13115   11259\n 9     1    2419 Petr… Engine… 2339       36 2057  282   0.1205…    1976    1849\n10    65    1100 Gene… Agricu… 10399     158 6053  4346  0.4179…    8884    7589\n# … with 163 more rows, 10 more variables: employed_parttime <dbl>,\n#   employed_fulltime_yearround <dbl>, unemployed <dbl>,\n#   unemployment_rate <dbl>, p25th <dbl>, median <dbl>, p75th <dbl>,\n#   college_jobs <dbl>, non_college_jobs <dbl>, low_wage_jobs <dbl>, and\n#   abbreviated variable names ¹​major_code, ²​major_category, ³​sample_size,\n#   ⁴​sharewomen, ⁵​employed, ⁶​employed_fulltime\n```\n:::\n:::\n\n\nThis gives us what we wanted, but not in an ideal form. First, the name of \nthe major barely fits on the page. Second, some of the variables are not \nthat useful (e.g. `major_code`, `major_category`) and some we might want \nfront and center are not easily viewed (e.g. `unemployment_rate`).\n\nWe can use the `select` function to choose which variables to display, and \nin which order:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollege_recent_grads %>%\n  arrange(unemployment_rate) %>%\n  select(rank, major, unemployment_rate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 173 × 3\n    rank major                                      unemployment_rate\n   <dbl> <chr>                                                  <dbl>\n 1    53 Mathematics And Computer Science                     0      \n 2    74 Military Technologies                                0      \n 3    84 Botany                                               0      \n 4   113 Soil Science                                         0      \n 5   121 Educational Administration And Supervision           0      \n 6    15 Engineering Mechanics Physics And Science            0.00633\n 7    20 Court Reporting                                      0.0117 \n 8   120 Mathematics Teacher Education                        0.0162 \n 9     1 Petroleum Engineering                                0.0184 \n10    65 General Agriculture                                  0.0196 \n# … with 163 more rows\n```\n:::\n:::\n\n\nOk, this is looking better, but do we really need all those decimal places in the \nunemployment variable? Not really!\n\n- **1a.** Round `unemployment_rate`: We create a new variable with the `mutate` function. \nIn this case, we're overwriting the existing `unemployment_rate` variable, by `round`ing it to `1` decimal places. Incomplete code is given below to guide you in the right direction, however you will need to fill in the blanks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollege_recent_grads<- college_recent_grads %>%\n  arrange(unemployment_rate) %>%\n  select(rank, major, unemployment_rate) %>%\n  mutate(unemployment_rate = ___(___, 1))\n```\n:::\n\n\nWhile were making some changes, let's change `sharewomen` to numeric (it appears to be a string). Make sure to save your changes by overwriting the existing data frame!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollege_recent_grads <- college_recent_grads %>%\n  mutate(sharewomen = as.numeric(___))\n```\n:::\n\n\n\n### Which major has the highest percentage of women?\n\nTo answer such a question we need to arrange the data in descending order. For \nexample, if earlier we were interested in the major with the highest unemployment \nrate, we would use the following:\n\nThe `desc` function specifies that we want `unemployment_rate` in descending order.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollege_recent_grads %>%\n  arrange(desc(unemployment_rate)) %>%\n  select(rank, major, unemployment_rate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 173 × 3\n    rank major                                      unemployment_rate\n   <dbl> <chr>                                                  <dbl>\n 1     6 Nuclear Engineering                                    0.177\n 2    90 Public Administration                                  0.159\n 3    85 Computer Networking And Telecommunications             0.152\n 4   171 Clinical Psychology                                    0.149\n 5    30 Public Policy                                          0.128\n 6   106 Communication Technologies                             0.120\n 7     2 Mining And Mineral Engineering                         0.117\n 8    54 Computer Programming And Data Processing               0.114\n 9    80 Geography                                              0.113\n10    59 Architecture                                           0.113\n# … with 163 more rows\n```\n:::\n:::\n\n\n- **1b.** Using what you've learned so far, arrange the data in descending order with respect to proportion of women in a major, and display only the major, the total number of people with major, and proportion of women. Show only the top 3 majors by adding `head(3)` at the end of the pipeline.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#code here\n```\n:::\n\n\n### How do the distributions of median income compare across major categories?\n\nA percentile is a measure used in statistics indicating the value below which a given percentage of observations in a group of observations fall. For example, the 20th percentile is the value below which 20% of the observations may be found. (Source: [Wikipedia](https://en.wikipedia.org/wiki/Percentile)\n\n\nThere are three types of incomes reported in this data frame: `p25th`, `median`,  and `p75th`. These correspond to the 25th, 50th, and 75th percentiles of the income distribution of sampled individuals for a given major.\n\nThe question we want to answer \"How do the distributions of median income compare across major categories?\". We need to do a few things to answer this question: First, we need to group the data by `major_category`. Then, we need a way to summarize the distributions of median income within these groups. This decision will depend on the shapes of these distributions. So first, we need to visualize the data.\n\n - **1c.**Let's start simple and take a look at the distribution of all median incomes using `geom_histogram`, without considering the major categories.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ____,\n       mapping = aes(x = median)) +\n  geom_histogram()\n```\n:::\n\n\n- **1d.** Try binwidths of $1000$ and $5000$ and choose one. Explain your reasoning for your choice.\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ___,\n       mapping = aes(x = median)) +\n  geom_histogram(binwidth = ___)\n```\n:::\n\n\nWe can also calculate summary statistics for this distribution using the \n`summarise` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollege_recent_grads %>%\n  summarise(min = min(median), max = max(median),\n            mean = mean(median), med = median(median),\n            sd = sd(median), \n            q1 = quantile(median, probs = 0.25),\n            q3 = quantile(median, probs = 0.75))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 7\n    min    max   mean   med     sd    q1    q3\n  <dbl>  <dbl>  <dbl> <dbl>  <dbl> <dbl> <dbl>\n1 22000 110000 40151. 36000 11470. 33000 45000\n```\n:::\n:::\n\n\n- **1e.** Based on the shape of the histogram you created in the previous 1e, determine which of these summary statistics above (min, max, mean, med, sd, q1, q3)  is/are useful for describing the distribution. Write up your description and include the summary statistic output as well.You can pick single/multiple statistics and briefly explain why you pick it/them. \n\n\n- **1f.** Next, we facet the plot by major category. Plot the distribution of `median` income using a histogram, faceted by `major_category`. Use the `binwidth` you chose in 1e.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ___,\n       mapping = aes (x=median)) +\n  geom_histogram(bindwidth = 5000) +\n  facet_wrap(.~major_category)\n```\n:::\n\n\n\n- **1g.** Use `filter` to find out which major has the highest median income? lowest? Which major has the `median()` median income? Hint: refer to the statistics in 1d.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollege_recent_grads %>%\n  ____(median == ____) \n```\n:::\n\n\n- **1h.** Which major category is the most popular in this sample? To answer this question we use a new function called `count`, which first groups the data , then counts the number of observations in each category and store the counts into a column named `n`. Add to the pipeline appropriately to arrange the results so that the major with the highest observations is on top.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollege_recent_grads %>%\n  count(major_category) %>% \n  ___(___(n))\n```\n:::\n\n\n### What types of majors do women tend to major in?\n\nFirst, let's create a new vector called `stem_categories` that lists the major categories that are considered STEM fields.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstem_categories <- c(\"Biology & Life Science\",\n                     \"Computers & Mathematics\",\n                     \"Engineering\",\n                     \"Physical Sciences\")\n```\n:::\n\n\nThen, we can use this to create a new variable in our data frame indicating whether a major is STEM or not.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollege_recent_grads <- college_recent_grads %>%\n  mutate(major_type = ifelse(major_category %in% \n                               stem_categories, \"stem\", \"not stem\"))\n```\n:::\n\n\nLet's unpack this: with `mutate` we create a new variable called `major_type`, which is defined as `\"stem\"` if the `major_category` is in the nector called `stem_categories` we created earlier, and as `\"not stem\"` otherwise.\n\n\n- **1i.** Create a scatterplot of median income vs. proportion of \nwomen in that major, colored by whether the major is in a STEM field or not. Describe the association between these three variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ___, \n       mapping = aes(x=median, \n           y= sharewomen, \n           color=major_type)) + \n  geom_point()\n```\n:::\n\n\n\n- **1j.**. We can use the logical operators to also `filter` our data for STEM majors whose median earnings is less than median for all majors's median earnings, which we found to be $36,000 earlier. Your output should only show the major name and median, 25th percentile, and 75th percentile earning for that major and should be sorted such that the major with the lowest median earning is on top.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#code here\n```\n:::\n\n\n\nWell done! You've learned how to work with R to perform basic data analysis! \n\n\n**Want to improve this tutorial?** Report any suggestions/bugs/improvements on  [here](mailto:jacobjameson@uchicago.edu)! We're interested in learning from you how we can make this tutorial better.\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}