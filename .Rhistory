policy_data_lagged <- policy_data %>%
arrange(state, time) %>%
group_by(state) %>%
mutate(lag_outcome = lag(outcome)) %>%
ungroup() %>%
filter(!is.na(lag_outcome))  # Drop first period for each state
# 3. Basic autoregressive model
ar_model <- felm(outcome ~ lag_outcome + treated + time + treatment | 0 | 0 | state,
data = policy_data_lagged)
# 4. Create lagged treatment for debiasing
policy_data_debiased <- policy_data_lagged %>%
group_by(state) %>%
mutate(lag_treatment = lag(treatment)) %>%
ungroup() %>%
filter(!is.na(lag_treatment))  # Drop second period for each state
# 5. Debiased autoregressive model
ar_debiased_model <- felm(outcome ~ lag_outcome + treated + time + treatment + lag_treatment |
0 | 0 | state, data = policy_data_debiased)
# Extract model results
results_df <- data.frame(
Model = c("True Effect", "DiD", "Autoregressive", "Debiased Autoregressive"),
Immediate_Effect = c(
true_effect,
coef(did_model)["treatment"],
coef(ar_model)["treatment"],
coef(ar_debiased_model)["treatment"]
),
Bias = c(
0,
coef(did_model)["treatment"] - true_effect,
coef(ar_model)["treatment"] - true_effect,
coef(ar_debiased_model)["treatment"] - true_effect
)
)
# Add AR coefficient and lagged treatment coefficient where applicable
results_df$AR_Coefficient <- c(
NA,
NA,
coef(ar_model)["lag_outcome"],
coef(ar_debiased_model)["lag_outcome"]
)
results_df$Lagged_Treatment <- c(
NA,
NA,
NA,
coef(ar_debiased_model)["lag_treatment"]
)
# Calculate long-run effects for AR models
results_df$Long_Run_Effect <- c(
true_effect,  # True effect doesn't change in long run in our simulation
coef(did_model)["treatment"],  # DiD doesn't distinguish short vs. long run
coef(ar_model)["treatment"] / (1 - coef(ar_model)["lag_outcome"]),  # Basic AR
(coef(ar_debiased_model)["treatment"] + coef(ar_debiased_model)["lag_treatment"]) /
(1 - coef(ar_debiased_model)["lag_outcome"])  # Debiased AR
)
# Format table
results_df %>%
mutate(across(where(is.numeric), ~round(., 3))) %>%
mutate(across(where(is.numeric), ~ifelse(is.na(.), "-", as.character(.)))) %>%
kable(align = c("l", "r", "r", "r", "r", "r"),
caption = "Comparison of Model Estimates") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE) %>%
add_header_above(c(" " = 1, "Coefficients" = 4, "Derived" = 1))
# Create a dataset for predictions
predict_data <- expand.grid(
state = 1:2,  # Just need one treated and one control state
time = 1:30   # Extend beyond our original data to see long-run effects
)
predict_data$treated <- ifelse(predict_data$state == 1, 1, 0)
predict_data$treatment <- ifelse(predict_data$treated == 1 & predict_data$time >= treatment_period, 1, 0)
# Set up initial conditions
initial_value <- 10
predict_data$outcome <- initial_value
# DiD prediction
did_coef <- coef(did_model)
predict_data$did_pred <- did_coef["(Intercept)"] +
did_coef["treated"] * predict_data$treated +
did_coef["time"] * predict_data$time +
did_coef["treatment"] * predict_data$treatment
# AR predictions (need to be done sequentially)
ar_coef <- coef(ar_model)
ar_debiased_coef <- coef(ar_debiased_model)
# Initialize AR predictions
predict_data$ar_pred <- initial_value
predict_data$ar_debiased_pred <- initial_value
# Function to generate autoregressive predictions
generate_ar_predictions <- function(data, ar_coef, debiased = FALSE) {
# Make a copy to avoid modifying the original
pred_data <- data
# Sort data
pred_data <- pred_data[order(pred_data$state, pred_data$time), ]
# Loop through each time period
for (t in 2:max(pred_data$time)) {
for (s in unique(pred_data$state)) {
# Get previous period's values
prev_idx <- which(pred_data$state == s & pred_data$time == t-1)
curr_idx <- which(pred_data$state == s & pred_data$time == t)
if (!debiased) {
# Basic AR prediction
pred_data$ar_pred[curr_idx] <-
ar_coef["(Intercept)"] +
ar_coef["lag_outcome"] * pred_data$ar_pred[prev_idx] +
ar_coef["treated"] * pred_data$treated[curr_idx] +
ar_coef["time"] * pred_data$time[curr_idx] +
ar_coef["treatment"] * pred_data$treatment[curr_idx]
} else {
# Debiased AR prediction
# Need to get treatment from t-1
lag_treatment <- ifelse(t > 2, pred_data$treatment[prev_idx], 0)
pred_data$ar_debiased_pred[curr_idx] <-
ar_debiased_coef["(Intercept)"] +
ar_debiased_coef["lag_outcome"] * pred_data$ar_debiased_pred[prev_idx] +
ar_debiased_coef["treated"] * pred_data$treated[curr_idx] +
ar_debiased_coef["time"] * pred_data$time[curr_idx] +
ar_debiased_coef["treatment"] * pred_data$treatment[curr_idx] +
ar_debiased_coef["lag_treatment"] * lag_treatment
}
}
}
return(pred_data)
}
# Generate predictions
predict_data <- generate_ar_predictions(predict_data, ar_coef, debiased = FALSE)
predict_data <- generate_ar_predictions(predict_data, ar_debiased_coef, debiased = TRUE)
# Calculate treatment effects for each approach
treat_effects <- predict_data %>%
group_by(time) %>%
summarize(
did_effect = did_pred[treated == 1] - did_pred[treated == 0],
ar_effect = ar_pred[treated == 1] - ar_pred[treated == 0],
ar_debiased_effect = ar_debiased_pred[treated == 1] - ar_debiased_pred[treated == 0],
.groups = "drop"
) %>%
mutate(
# Calculate treatment effect at each time (difference from pre-treatment)
did_impact = ifelse(time >= treatment_period,
did_effect - did_effect[time == treatment_period - 1], 0),
ar_impact = ifelse(time >= treatment_period,
ar_effect - ar_effect[time == treatment_period - 1], 0),
ar_debiased_impact = ifelse(time >= treatment_period,
ar_debiased_effect - ar_debiased_effect[time == treatment_period - 1], 0)
) %>%
select(time, did_impact, ar_impact, ar_debiased_impact) %>%
pivot_longer(cols = c(did_impact, ar_impact, ar_debiased_impact),
names_to = "model", values_to = "effect") %>%
mutate(model = factor(model,
levels = c("did_impact", "ar_impact", "ar_debiased_impact"),
labels = c("DiD", "Autoregressive", "Debiased Autoregressive")))
# Plot treatment effects over time
ggplot(treat_effects %>% filter(time >= treatment_period - 1),
aes(x = time, y = effect, color = model, group = model)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
geom_hline(yintercept = true_effect, linetype = "dashed", color = "black") +
annotate("text", x = min(treat_effects$time[treat_effects$time >= treatment_period]),
y = true_effect + 0.2, label = "True Effect", hjust = 0) +
labs(
title = "Estimated Treatment Effects Over Time",
subtitle = "Comparing DiD, Autoregressive, and Debiased Autoregressive Models",
x = "Time Period",
y = "Treatment Effect",
color = "Model"
) +
theme_minimal() +
theme(
legend.position = "bottom",
text = element_text(size = 12),
plot.title = element_text(face = "bold")
)
# Create relative time variable (time relative to treatment)
policy_data <- policy_data %>%
mutate(rel_time = time - treatment_period)
# Create dummy variables for each period relative to treatment
# Focus on -5 to +5 periods around treatment
rel_time_dummies <- policy_data %>%
mutate(
rel_time_factor = factor(
pmin(pmax(rel_time, -5), 5),  # Bin at -5 and +5
levels = -5:5
)
)
# Create dummies for event study (interact with treatment group)
for (t in -5:5) {
if (t != -1) {  # Use t-1 as reference
var_name <- paste0("rel_time_", t)
rel_time_dummies[[var_name]] <- ifelse(
rel_time_dummies$treated == 1 & rel_time_dummies$rel_time_factor == t,
1, 0
)
}
}
# Standard event study with DiD
event_did <- felm(outcome ~ rel_time_`-5` + rel_time_`-4` + rel_time_`-3` +
rel_time_dummies
# Standard event study with DiD
event_did <- felm(outcome ~ `rel_time_-5` + `rel_time_-4` + `rel_time_-3` +
`rel_time_-2` + rel_time_0 + rel_time_1 +
rel_time_2 + rel_time_3 + rel_time_4 + rel_time_5 +
treated + time | 0 | 0 | state,
data = rel_time_dummies)
# Create lagged data for autoregressive event study
rel_time_dummies_lagged <- rel_time_dummies %>%
arrange(state, time) %>%
group_by(state) %>%
mutate(lag_outcome = lag(outcome)) %>%
ungroup() %>%
filter(!is.na(lag_outcome))
# Event study with autoregressive component
event_ar <- felm(outcome ~ lag_outcome + `rel_time_-5` + `rel_time_-4` + `rel_time_-3` +
`rel_time_-2` + rel_time_0 + rel_time_1 +
rel_time_2 + rel_time_3 + rel_time_4 + rel_time_5 +
treated + time | 0 | 0 | state,
data = rel_time_dummies_lagged)
# Extract coefficients
event_did_coef <- coef(event_did)[grep("^rel_time_", names(coef(event_did)))]
event_ar_coef <- coef(event_ar)[grep("^rel_time_", names(coef(event_ar)))]
# Create dataframe for plotting
event_coefs <- data.frame(
period = c(-5:-2, 0:5),
did_estimate = event_did_coef,
ar_estimate = event_ar_coef
) %>%
pivot_longer(cols = c(did_estimate, ar_estimate),
names_to = "model", values_to = "estimate") %>%
mutate(model = factor(model,
levels = c("did_estimate", "ar_estimate"),
labels = c("DiD", "Autoregressive")))
# Plot event study
ggplot(event_coefs, aes(x = period, y = estimate, color = model, group = model)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
geom_vline(xintercept = -0.5, linetype = "dashed", color = "red") +
annotate("text", x = -0.3, y = max(event_coefs$estimate),
label = "Treatment", hjust = 0, color = "red") +
labs(
title = "Event Study: Effect by Time Relative to Treatment",
subtitle = "Comparing DiD and Autoregressive Event Studies",
x = "Time Relative to Treatment",
y = "Estimated Effect",
color = "Model"
) +
theme_minimal() +
theme(
legend.position = "bottom",
text = element_text(size = 12),
plot.title = element_text(face = "bold")
)
# Create dataframe for plotting
event_coefs <- data.frame(
period = c(-5:-2, 0:5),
did_estimate = event_did_coef,
ar_estimate = event_ar_coef
) %>%
pivot_longer(cols = c(did_estimate, ar_estimate),
names_to = "model", values_to = "estimate") %>%
mutate(model = factor(model,
levels = c("did_estimate", "ar_estimate"),
labels = c("DiD", "Autoregressive")))
# Plot event study
ggplot(event_coefs, aes(x = period, y = estimate, color = model, group = model)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
geom_vline(xintercept = -0.5, linetype = "dashed", color = "red") +
annotate("text", x = -0.3, y = max(event_coefs$estimate),
label = "Treatment", hjust = 0, color = "red") +
labs(
title = "Event Study: Effect by Time Relative to Treatment",
subtitle = "Comparing DiD and Autoregressive Event Studies",
x = "Time Relative to Treatment",
y = "Estimated Effect",
color = "Model"
) +
theme_minimal() +
theme(
legend.position = "bottom",
text = element_text(size = 12),
plot.title = element_text(face = "bold")
)
# Focusing on key models: DiD and debiased autoregressive
did_summary <- summary(did_model)
ar_debiased_summary <- summary(ar_debiased_model)
# Print summaries
cat("Difference-in-Differences Model:\n")
did_summary$coefficients["treatment", ]
cat("\nDebiased Autoregressive Model:\n")
ar_debiased_summary$coefficients["treatment", ]
ar_debiased_summary$coefficients["lag_treatment", ]
ar_debiased_summary$coefficients["lag_outcome", ]
# Calculate long-run effects
long_run_effect <- (coef(ar_debiased_model)["treatment"] +
coef(ar_debiased_model)["lag_treatment"]) /
(1 - coef(ar_debiased_model)["lag_outcome"])
cat("\nLong-run effect of policy (debiased AR model):", round(long_run_effect, 3))
# Load necessary packages
library(tidyverse)
library(ggplot2)
library(rjags)
library(coda)
library(knitr)
library(kableExtra)
library(lme4)
library(lfe)
# Set seed for reproducibility
set.seed(123)
# Simulation parameters
n_states <- 50        # 25 treatment, 25 control
n_periods <- 20       # 10 pre-treatment, 10 post-treatment
treatment_period <- 11  # Treatment starts at period 11
true_effect <- 2      # True policy effect
ar_coefficient <- 0.7 # Autoregressive coefficient
# Generate panel data
simulate_data <- function() {
# Create empty dataframe
df <- expand.grid(
state = 1:n_states,
time = 1:n_periods
)
# Assign treatment (first half of states)
df$treated <- ifelse(df$state <= n_states/2, 1, 0)
# Generate treatment indicator (post-treatment for treated states)
df$treatment <- ifelse(df$treated == 1 & df$time >= treatment_period, 1, 0)
# Different trends for treatment and control groups
df$state_trend <- ifelse(df$treated == 1, 0.5, 0.2)  # Non-parallel trends
# Generate outcomes
# First, create a starting value for each state
state_initial <- tibble(
state = 1:n_states,
initial_value = 10 + rnorm(n_states, 0, 2)
)
df <- left_join(df, state_initial, by = "state")
# Generate outcomes with AR(1) process and non-parallel trends
df$outcome <- df$initial_value  # Initialize
for (t in 2:n_periods) {
# Get previous period data
prev_data <- df %>%
filter(time == t-1) %>%
select(state, prev_outcome = outcome)
# Update current period
df <- df %>%
left_join(prev_data, by = "state") %>%
mutate(
outcome = ifelse(
time == t,
ar_coefficient * prev_outcome + state_trend * time + treatment * true_effect + rnorm(n(), 0, 1),
outcome
)
) %>%
select(-prev_outcome)
}
return(df)
}
# Generate data
policy_data <- simulate_data()
# Calculate group means by time
group_means <- policy_data %>%
group_by(time, treated) %>%
summarize(mean_outcome = mean(outcome), .groups = "drop") %>%
mutate(group = ifelse(treated == 1, "Treatment Group", "Control Group"))
# Plot trends with intervention line
ggplot(group_means, aes(x = time, y = mean_outcome, color = group, group = group)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
geom_vline(xintercept = treatment_period, linetype = "dashed", color = "red") +
annotate("text", x = treatment_period + 0.5, y = max(group_means$mean_outcome),
label = "Policy Implementation", hjust = 0, color = "red") +
labs(
title = "Outcome Trends by Group",
subtitle = "Note the non-parallel pre-treatment trends",
x = "Time Period",
y = "Outcome",
color = ""
) +
theme_minimal() +
theme(
legend.position = "bottom",
text = element_text(size = 12),
plot.title = element_text(face = "bold")
)
# 1. Standard DiD model
did_model <- felm(outcome ~ treated + time + treatment | 0 | 0 | state, data = policy_data)
summary(did_model)$coefficients["treatment", ]
# Create lagged variables
policy_data_lagged <- policy_data %>%
arrange(state, time) %>%
group_by(state) %>%
mutate(
lag_outcome = lag(outcome),
lag_treatment = lag(treatment)
) %>%
ungroup() %>%
filter(!is.na(lag_outcome))  # Drop first period for each state
# Estimate the autoregressive component
ar_model <- felm(outcome ~ lag_outcome + treated + time + treatment | 0 | 0 | state,
data = policy_data_lagged)
# Extract key coefficients
rho_hat <- coef(ar_model)["lag_outcome"]
beta_hat <- coef(ar_model)["treatment"]
# Create debiased outcome: subtract treatment effect component from lagged outcome
policy_data_debiased <- policy_data_lagged %>%
mutate(
# Subtract estimated effect of treatment on lag_outcome
debiased_lag_outcome = lag_outcome - beta_hat * lag_treatment
)
# Run debiased model with corrected lagged outcome
ar_debiased_model <- felm(outcome ~ debiased_lag_outcome + treated + time + treatment |
0 | 0 | state, data = policy_data_debiased)
# Compare coefficients
cat("Autoregressive model coefficient:", beta_hat, "\n")
cat("Debiased AR model coefficient:", coef(ar_debiased_model)["treatment"], "\n")
# Prepare data for JAGS
jags_data <- policy_data_lagged %>%
select(state, time, treated, treatment, outcome, lag_outcome, lag_treatment) %>%
mutate(
state_idx = as.numeric(factor(state)),
time_idx = as.numeric(factor(time))
)
# Create data for JAGS
jags_data_list <- list(
N = nrow(jags_data),
S = length(unique(jags_data$state)),
T = length(unique(jags_data$time)),
state = jags_data$state_idx,
time = jags_data$time_idx,
treatment = jags_data$treatment,
treated = jags_data$treated,
lag_treatment = jags_data$lag_treatment,
lag_y = jags_data$lag_outcome,
y = jags_data$outcome
)
# Define JAGS model for DiD
did_model_string <- "
model {
# Priors
alpha ~ dnorm(0, 0.001)
beta_treated ~ dnorm(0, 0.001)
beta_treatment ~ dnorm(0, 0.001)
sigma ~ dunif(0, 100)
tau <- 1 / (sigma * sigma)
# Random effects for states and time
for (s in 1:S) {
state_effect[s] ~ dnorm(0, 0.001)
}
for (t in 1:T) {
time_effect[t] ~ dnorm(0, 0.001)
}
# Likelihood
for (i in 1:N) {
mu[i] <- alpha + beta_treated * treated[i] + beta_treatment * treatment[i] +
state_effect[state[i]] + time_effect[time[i]]
y[i] ~ dnorm(mu[i], tau)
}
}
"
# Define JAGS model for AR with debiasing
ar_model_string <- "
model {
# Priors
alpha ~ dnorm(0, 0.001)
beta_treated ~ dnorm(0, 0.001)
beta_treatment ~ dnorm(0, 0.001)
rho ~ dunif(0, 1)         # Autoregressive coefficient
sigma ~ dunif(0, 100)
tau <- 1 / (sigma * sigma)
# Random effects for states and time
for (s in 1:S) {
state_effect[s] ~ dnorm(0, 0.001)
}
for (t in 1:T) {
time_effect[t] ~ dnorm(0, 0.001)
}
# Likelihood
for (i in 1:N) {
# Debiased autoregressive term
debiased_lag_y[i] <- lag_y[i] - beta_treatment * lag_treatment[i]
mu[i] <- alpha + rho * debiased_lag_y[i] + beta_treated * treated[i] +
beta_treatment * treatment[i] + state_effect[state[i]] + time_effect[time[i]]
y[i] ~ dnorm(mu[i], tau)
}
}
"
# Initialize JAGS models
did_jags <- jags.model(textConnection(did_model_string), data = jags_data_list,
n.chains = 3, n.adapt = 1000)
ar_jags <- jags.model(textConnection(ar_model_string), data = jags_data_list,
n.chains = 3, n.adapt = 1000)
# Burn-in
update(did_jags, 1000)
update(ar_jags, 1000)
# Sample from posterior
did_samples <- coda.samples(did_jags, variable.names = c("beta_treatment"), n.iter = 2000)
ar_samples <- coda.samples(ar_jags, variable.names = c("beta_treatment", "rho"), n.iter = 2000)
# Summarize results
did_summary <- summary(did_samples)
ar_summary <- summary(ar_samples)
# Extract key parameters
did_treatment_effect <- did_summary$statistics["beta_treatment", "Mean"]
# Create predicted values from each model
policy_data_pred <- policy_data %>%
mutate(
did_pred = predict(did_model, newdata = .),
# Need to handle autoregressive predictions differently
# Will do for treated group 1 and control group 26 only for clarity
group = ifelse(state <= n_states/2, "Treated", "Control"),
group_label = case_when(
state == 1 ~ "Treated Unit Example",
state == n_states/2 + 1 ~ "Control Unit Example",
TRUE ~ NA_character_
)
) %>%
filter(!is.na(group_label))
