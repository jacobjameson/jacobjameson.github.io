labs(x = "X", y = "Y") +
geom_abline(intercept = beta0_true, slope = beta1_true, color = "#FF2700",
linetype = "dashed", size=1.2) +
labs(title = "Simulated Data with True Regression Line",
subtitle = "Red dashed line = true relationship")
#| label: simulate-data
#| code-fold: true
set.seed(123) # for reproducibility
# True parameters
beta0_true <- 2.0
beta1_true <- 3.5
sigma_true <- 3.5  # noise std dev
# Generate X
n <- 1000
x <- seq(0, 5, length.out = n)
# Generate noise and outcome
noise <- rnorm(n, mean = 0, sd = sigma_true)
y <- beta0_true + beta1_true * x + noise
# Put it into a data frame
sim_data <- data.frame(
x = x,
y = y
)
# Plot the data
ggplot(sim_data, aes(x = x, y = y)) +
geom_point(color = '#008Fd5') +
theme_fivethirtyeight() +
theme(panel.background = element_rect(fill = "white"),
plot.background  = element_rect(fill = "white"),
axis.title = element_text(color = 'black')) +
labs(x = "X", y = "Y") +
geom_abline(intercept = beta0_true, slope = beta1_true, color = "#FF2700",
linetype = "dashed", size=1.2) +
labs(title = "Simulated Data with True Regression Line",
subtitle = "Red dashed line = true relationship")
# Plot the data
ggplot(sim_data, aes(x = x, y = y)) +
geom_point(color = '#008Fd5', alpha = 0.5) +
theme_fivethirtyeight() +
theme(panel.background = element_rect(fill = "white"),
plot.background  = element_rect(fill = "white"),
axis.title = element_text(color = 'black')) +
labs(x = "X", y = "Y") +
geom_abline(intercept = beta0_true, slope = beta1_true, color = "#FF2700",
linetype = "dashed", size=1.2) +
labs(title = "Simulated Data with True Regression Line",
subtitle = "Red dashed line = true relationship")
#| label: frequentist-model
ols_model <- lm(y ~ x, data = sim_data)
summary(ols_model)
#| label: simulate-data
#| code-fold: true
set.seed(123) # for reproducibility
# True parameters
beta0_true <- 2.0
beta1_true <- 3.5
sigma_true <- 3.5  # noise std dev
# Generate X
n <- 100
x <- seq(0, 5, length.out = n)
# Generate noise and outcome
noise <- rnorm(n, mean = 0, sd = sigma_true)
y <- beta0_true + beta1_true * x + noise
# Put it into a data frame
sim_data <- data.frame(
x = x,
y = y
)
# Plot the data
ggplot(sim_data, aes(x = x, y = y)) +
geom_point(color = '#008Fd5', alpha = 0.5) +
theme_fivethirtyeight() +
theme(panel.background = element_rect(fill = "white"),
plot.background  = element_rect(fill = "white"),
axis.title = element_text(color = 'black')) +
labs(x = "X", y = "Y") +
geom_abline(intercept = beta0_true, slope = beta1_true, color = "#FF2700",
linetype = "dashed", size=1.2) +
labs(title = "Simulated Data with True Regression Line",
subtitle = "Red dashed line = true relationship")
#| label: frequentist-model
ols_model <- lm(y ~ x, data = sim_data)
summary(ols_model)
confint(ols_model, level = 0.95)
#| label: plot-frequentist-fit
ols_pred <- predict(ols_model) # predictions for the existing x
sim_data$ols_pred <- ols_pred
ggplot(sim_data, aes(x = x, y = y)) +
geom_point() +
geom_line(aes(y = ols_pred), color = "blue") +
geom_abline(intercept = beta0_true, slope = beta1_true, color = "red",
linetype = "dashed") +
labs(title = "OLS Fit vs True Line",
subtitle = "Blue = OLS fit; Red dashed = True line")
ggplot(sim_data, aes(x = x, y = y)) +
geom_point(color = '#008Fd5', alpha = 0.5) +
theme_fivethirtyeight() +
geom_line(aes(y = ols_pred), color = "#77AB43") +
theme(panel.background = element_rect(fill = "white"),
plot.background  = element_rect(fill = "white"),
axis.title = element_text(color = 'black')) +
labs(x = "X", y = "Y") +
geom_abline(intercept = beta0_true, slope = beta1_true, color = "#FF2700",
linetype = "dashed", size=1.2) +
labs(title = "Simulated Data with True Regression Line",
subtitle = "Red dashed line = true relationship")
ggplot(sim_data, aes(x = x, y = y)) +
geom_point(color = '#008Fd5', alpha = 0.5) +
theme_fivethirtyeight() +
geom_line(aes(y = ols_pred), color = "#77AB43", size=1.2) +
theme(panel.background = element_rect(fill = "white"),
plot.background  = element_rect(fill = "white"),
axis.title = element_text(color = 'black')) +
labs(x = "X", y = "Y") +
geom_abline(intercept = beta0_true, slope = beta1_true, color = "#FF2700",
linetype = "dashed", size=1.2) +
labs(title = "Simulated Data with True Regression Line",
subtitle = "Red dashed line = true relationship")
ggplot(sim_data, aes(x = x, y = y)) +
geom_point(color = '#008Fd5', alpha = 0.5) +
theme_fivethirtyeight() +
geom_line(aes(y = ols_pred), color = "#77AB43", size=1.2) +
theme(panel.background = element_rect(fill = "white"),
plot.background  = element_rect(fill = "white"),
axis.title = element_text(color = 'black')) +
labs(x = "X", y = "Y") +
geom_abline(intercept = beta0_true, slope = beta1_true, color = "#FF2700",
linetype = "dashed", size=1.2) +
labs(title = "OLS Fit vs True Line",
subtitle = "Green = OLS fit; Red dashed = True line")
# install.packages("rstanarm")
library(rstanarm)
# install.packages("rstanarm")
library(rstanarm)
#| label: bayesian-model
bayes_model <- stan_glm(y ~ x, data = sim_data,
chains = 2, iter = 2000, seed = 123)
print(bayes_model, digits = 3)
posterior_interval(bayes_model, prob = 0.95)
#| label: plot-posterior
plot(bayes_model, plotfun = "hist", pars = c("(Intercept)", "x"),
include = TRUE, prob = 0.95)
plot(bayes_model, plotfun = "hist", pars = c("(Intercept)", "x"),
include = TRUE, prob = 0.95)
plot(bayes_model, plotfun = "hist", pars = c("(Intercept)", "x"),
include = TRUE, prob = 0.95)
# Posterior means for intercept and slope
beta0_post <- coef(bayes_model)[1]  # intercept
beta1_post <- coef(bayes_model)[2]  # slope
# Predictions from Bayesian fit
bayes_pred <- beta0_post + beta1_post * x
sim_data$bayes_pred <- bayes_pred
ggplot(sim_data, aes(x = x, y = y)) +
geom_point() +
geom_line(aes(y = ols_pred), color = "blue", size = 1) +
geom_line(aes(y = bayes_pred), color = "green", linetype = "dashed", size = 1) +
geom_abline(intercept = beta0_true, slope = beta1_true, color = "red", linetype = "dotdash") +
labs(title = "OLS vs. Bayesian Fit",
subtitle = "Blue = OLS fit; Green dashed = Bayesian posterior mean fit; Red dotdash = True line")
#| label: load-libraries
library(ggplot2)
library(dplyr)
library(rstanarm)  # for Bayesian regression
#| label: simulate-data
set.seed(42)
n <- 50
x <- seq(0, 5, length.out = n)
beta0_true <- 2.0
beta1_true <- 3.5
sigma_true <- 1.0
# Generate y
noise <- rnorm(n, mean = 0, sd = sigma_true)
y <- beta0_true + beta1_true * x + noise
df <- data.frame(x, y)
head(df)
ggplot(df, aes(x=x, y=y)) +
geom_point() +
geom_abline(intercept=beta0_true, slope=beta1_true,
color="red", linetype="dashed") +
labs(title="Simulated Data with True Regression Line",
subtitle="Red dashed line = true relationship")
ols_model <- lm(y ~ x, data = df)
summary(ols_model)
bayes_model <- stan_glm(y ~ x, data=df,
chains=2, iter=2000, seed=42)
print(bayes_model, digits=3)
plot(bayes_model, plotfun = "hist",
pars = c("(Intercept)", "x"),
include = TRUE, prob=0.95)
custom_bayes_model <- stan_glm(
y ~ x,
data = df,
prior = normal(location = 1, scale = 2, autoscale=FALSE),       # slope prior
prior_intercept = normal(location = 0, scale = 10, autoscale=FALSE),
chains=2, iter=2000, seed=123
)
print(custom_bayes_model, digits=3)
# Step 1: sample from prior only (no data used)
prior_only_model <- stan_glm(
y ~ x,
data = df,
prior = normal(location = 1, scale = 2, autoscale=FALSE),
prior_intercept = normal(location = 0, scale = 10, autoscale=FALSE),
chains=2, iter=2000, seed=123,
prior_PD = TRUE   # <--- This means: ignore the likelihood of data
)
# Extract draws
prior_draws <- as.matrix(prior_only_model, pars=c("(Intercept)","x"))
post_draws <- as.matrix(custom_bayes_model, pars=c("(Intercept)","x"))
library(ggplot2)
library(tidyr)
df_draws <- data.frame(
prior_slope  = prior_draws[,"x"],
post_slope   = post_draws[,"x"]
)
df_long <- df_draws %>%
pivot_longer(cols = everything(),
names_to = "distribution", values_to="slope_value")
ggplot(df_long, aes(x=slope_value, fill=distribution)) +
geom_density(alpha=0.4) +
labs(title="Slope: Prior vs Posterior",
x="Slope Value") +
theme_minimal()
# Posterior draws for intercept, slope, and sigma
post_draws_full <- as.matrix(custom_bayes_model)
# We'll create a function that, for each posterior draw,
# computes a predicted y_*
simulate_posterior_y <- function(x_star, n_sims=4000) {
# intercept is in column "(Intercept)", slope is "x", sigma is "sigma"
# Each row is one MCMC sample
idx_int <- which(colnames(post_draws_full)=="(Intercept)")
idx_slope <- which(colnames(post_draws_full)=="x")
idx_sigma <- which(colnames(post_draws_full)=="sigma")
intercept_samples <- post_draws_full[, idx_int]
slope_samples     <- post_draws_full[, idx_slope]
sigma_samples     <- post_draws_full[, idx_sigma]
# For each draw, compute the predicted mean, then draw a y from Normal(mean, sigma)
mu_star <- intercept_samples + slope_samples * x_star
y_sim <- rnorm(n_sims, mean=mu_star, sd=sigma_samples)
y_sim
}
x_star <- 2.5
y_sim <- simulate_posterior_y(x_star)
mean(y_sim > 10)  # Probability that y_*>10 in the posterior
library(ggplot2)
ggplot(data.frame(y_sim), aes(y_sim)) +
geom_histogram(bins=30, fill="skyblue", color="white") +
geom_vline(xintercept=10, color="red", linetype="dashed") +
labs(title="Posterior Predictive Distribution at x=2.5",
subtitle="Dashed red line = threshold of 10",
x="Possible y* values", y="Frequency")
ggplot(df_long, aes(x=slope_value, fill=distribution)) +
geom_density(alpha=0.4) +
fill_manual(values=c("red", "blue")) +
labs(title="Slope: Prior vs Posterior",
x="Slope Value") +
theme_minimal()
ggplot(df_long, aes(x=slope_value, fill=distribution)) +
geom_density(alpha=0.4) +
scal_fill_manual(values=c("red", "blue")) +
labs(title="Slope: Prior vs Posterior",
x="Slope Value") +
theme_minimal()
ggplot(df_long, aes(x=slope_value, fill=distribution)) +
geom_density(alpha=0.4) +
scale_fill_manual(values=c("red", "blue")) +
labs(title="Slope: Prior vs Posterior",
x="Slope Value") +
theme_minimal()
ggplot(df_long, aes(x=slope_value, fill=distribution)) +
geom_density(alpha=0.4) +
scale_fill_manual(values=c("blue", "red")) +
labs(title="Slope: Prior vs Posterior",
x="Slope Value") +
theme_minimal()
plot(bayes_model, plotfun = "hist",
pars = c("(Intercept)", "x"),
include = TRUE, prob=0.95,
# show vertical lines at 2.5% and 97.5% quantiles)
col = "lightblue", border = "black")
plot(bayes_model, plotfun = "hist",
pars = c("(Intercept)", "x"),
include = TRUE, prob=0.95,
col = "lightblue", border = "black")
plot(bayes_model, plotfun = "hist",
pars = c("(Intercept)", "x"),
include = TRUE, prob=0.95,
bins = 100,
col = "lightblue", border = "black")
?bayes_model
??bayes_model
plot(bayes_model, plotfun = "areas",
pars = c("(Intercept)", "x"),
include = TRUE, prob=0.95,
bins = 100,
col = "lightblue", border = "black")
plot(bayes_model, plotfun = "areas",
pars = c("(Intercept)", "x"),
include = TRUE, prob=0.95,
bins = 100,
col = "lightblue", border = "black",
# make plot more aestheric)
main = "Posterior Distributions of Parameters",
xlab = "Parameter Value",
ylab = "Density")
plot(bayes_model,
plotfun = "areas",
pars = c("(Intercept)", "x"),
include = TRUE,
prob = 0.95,
bins = 150,  # Smoother appearance with more bins
col = "deepskyblue3", border = "black",
ci_level = 0.95, ci_color = "darkred", ci_alpha = 0.6) +
theme_minimal() +
labs(title = "Posterior Distributions with 95% Credible Interval",
x = "Parameter Value",
y = "Density")
plot(bayes_model,
plotfun = "areas",
pars = c("(Intercept)", "x"),
include = TRUE,
prob = 0.95,
bins = 150,  # Smoother appearance with more bins
col = "deepskyblue3", border = "black",
ci_level = 0.95, fill = "darkred", ci_alpha = 0.6) +
theme_minimal() +
labs(title = "Posterior Distributions with 95% Credible Interval",
x = "Parameter Value",
y = "Density")
plot(bayes_model,
plotfun = "areas",
pars = c("(Intercept)", "x"),
include = TRUE,
prob = 0.95,
bins = 150,  # Smoother appearance with more bins
col = "deepskyblue3", border = "black",
ci_level = 0.95, fill = "darkred", ci_alpha = 0.6) +
theme_minimal(base_size = 14) +
labs(title = "Posterior Distributions with 95% Credible Interval",
x = "Parameter Value",
y = "Density")
plot(bayes_model,
plotfun = "areas",
pars = c("(Intercept)", "x"),
include = TRUE,
prob = 0.95,
bins = 150,  # Smoother appearance with more bins
col = "deepskyblue3", border = "black") +
theme_minimal(base_size = 14) +
labs(title = "Posterior Distributions with 95% Credible Interval",
x = "Parameter Value",
y = "Density")
plot(bayes_model,
plotfun = "areas",
pars = c("(Intercept)", "x"),
include = TRUE,
prob = 0.95,
bins = 150,  # Smoother appearance with more bins
col = "deepskyblue3", border = "black",
ci_level = 0.95, fill = "darkred", ci_alpha = 0.6) +
theme_minimal(base_size = 14) +
labs(title = "Posterior Distributions with 95% Credible Interval",
x = "Parameter Value",
y = "Density")
plot(bayes_model,
plotfun = "areas",
pars = c("(Intercept)", "x"),
include = TRUE,
prob = 0.95,
col = "deepskyblue3", border = "black") +
theme_minimal(base_size = 15) +
labs(title = "Posterior Distributions with 95% Credible Interval",
x = "Parameter Value",
y = "Density")
ggplot(df_long, aes(x=slope_value, fill=distribution)) +
geom_density(alpha=0.4) +
scale_fill_manual(values=c("Prior Distribution" = "#D55E00",
"Posterior Distribution" = "#0072B2")) +
labs(title="Slope: Prior vs Posterior",
x="Slope Value",
fill = "Distribution") +
theme_minimal(base_size = 14)
library(ggplot2)
library(tidyr)
df_draws <- data.frame(
prior_slope  = prior_draws[,"x"],
post_slope   = post_draws[,"x"]
)
df_long <- df_draws %>%
pivot_longer(cols = everything(),
names_to = "distribution", values_to="slope_value")
ggplot(df_long, aes(x=slope_value, fill=distribution)) +
geom_density(alpha=0.4) +
scale_fill_manual(values=c("Prior Distribution" = "#D55E00",
"Posterior Distribution" = "#0072B2")) +
labs(title="Slope: Prior vs Posterior",
x="Slope Value",
fill = "Distribution") +
theme_minimal(base_size = 14)
df_long
library(ggplot2)
library(tidyr)
df_draws <- data.frame(
prior_slope  = prior_draws[,"x"],
post_slope   = post_draws[,"x"]
)
df_long <- df_draws %>%
pivot_longer(cols = everything(),
names_to = "distribution", values_to="slope_value") %>%
mutate(distribution = ifelse(
distribution == "prior_slope", "Prior Distribution",
"Posterior Distribution"))
ggplot(df_long, aes(x=slope_value, fill=distribution)) +
geom_density(alpha=0.4) +
scale_fill_manual(values=c("Prior Distribution" = "#D55E00",
"Posterior Distribution" = "#0072B2")) +
labs(title="Slope: Prior vs Posterior",
x="Slope Value",
fill = "Distribution") +
theme_minimal(base_size = 14)
ggplot(data.frame(y_sim), aes(y_sim)) +
geom_histogram(bins=30, fill="#D55E00", color="white") +
theme_minimal(base_size = 14) +
geom_vline(xintercept=10, color="red", linetype="dashed") +
labs(title="Posterior Predictive Distribution at x=2.5",
subtitle="Dashed red line = threshold of 10",
x="Possible y* values", y="Frequency")
ggplot(data.frame(y_sim), aes(y_sim)) +
geom_histogram(bins=30, fill="#D55E00", color="white") +
theme_minimal(base_size = 14) +
geom_vline(xintercept=10, color="black", linetype="dashed") +
labs(title="Posterior Predictive Distribution at x=2.5",
subtitle="Dashed red line = threshold of 10",
x="Possible y* values", y="Frequency")
ggplot(data.frame(y_sim), aes(y_sim)) +
geom_histogram(bins=30, fill="#D55E00", color="white") +
theme_minimal(base_size = 14) +
geom_vline(xintercept=10, color="black", linetype="solid") +
labs(title="Posterior Predictive Distribution at x=2.5",
subtitle="Dashed red line = threshold of 10",
x="Possible y* values", y="Frequency")
ggplot(data.frame(y_sim), aes(y_sim)) +
geom_histogram(bins=30, fill="#D55E00", color="white") +
theme_minimal(base_size = 14) +
geom_vline(xintercept=10, color="black", linetype="solid", size=1.5) +
labs(title="Posterior Predictive Distribution at x=2.5",
subtitle="Dashed red line = threshold of 10",
x="Possible y* values", y="Frequency")
ggplot(data.frame(y_sim), aes(y_sim)) +
geom_histogram(bins=30, fill="#D55E00", color="white") +
theme_minimal(base_size = 14) +
geom_vline(xintercept=10, color="black", linetype="solid", size=1.5) +
labs(title="Posterior Predictive Distribution at x=2.5",
subtitle="Black line = threshold of 10",
x="Possible y* values", y="Frequency")
ggplot(df, aes(x=x, y=y)) +
geom_point() +
geom_abline(intercept=beta0_true, slope=beta1_true,
color="red", linetype="dashed") +
theme_minimal(base_size = 15) +
labs(title="Simulated Data with True Regression Line",
subtitle="Red dashed line = true relationship")
ggplot(df, aes(x=x, y=y)) +
geom_point(color = "#008Fd5", alpha = 0.5) +
geom_abline(intercept=beta0_true, slope=beta1_true,
color="red", linetype="dashed") +
theme_minimal(base_size = 15) +
labs(title="Simulated Data with True Regression Line",
subtitle="Red dashed line = true relationship")
ggplot(df, aes(x=x, y=y)) +
geom_point(color = "#008Fd5", alpha = 0.5, size=2) +
geom_abline(intercept=beta0_true, slope=beta1_true,
color="red", linetype="dashed") +
theme_minimal(base_size = 15) +
labs(title="Simulated Data with True Regression Line",
subtitle="Red dashed line = true relationship")
ggplot(df, aes(x=x, y=y)) +
geom_point(color = "#008Fd5", alpha = 0.9, size=2) +
geom_abline(intercept=beta0_true, slope=beta1_true,
color="red", linetype="dashed") +
theme_minimal(base_size = 15) +
labs(title="Simulated Data with True Regression Line",
subtitle="Red dashed line = true relationship")
plot(bayes_model,
plotfun = "areas",
pars = c("(Intercept)", "x"),
include = TRUE,
prob = 0.95,
col = "#D55E00", border = "black") +
theme_minimal(base_size = 15) +
labs(title = "Posterior Distributions with 95% Credible Interval",
x = "Parameter Value",
y = "Density")
plot(bayes_model,
plotfun = "areas",
pars = c("(Intercept)", "x"),
include = TRUE,
prob = 0.95,
fill = "#D55E00", border = "black") +
theme_minimal(base_size = 15) +
labs(title = "Posterior Distributions with 95% Credible Interval",
x = "Parameter Value",
y = "Density")
plot(bayes_model,
plotfun = "areas",
pars = c("(Intercept)", "x"),
include = TRUE,
prob = 0.95,  border = "black") +
theme_minimal(base_size = 15) +
labs(title = "Posterior Distributions with 95% Credible Interval",
x = "Parameter Value",
y = "Density")
