legend.position = "bottom",
text = element_text(size = 12),
plot.title = element_text(face = "bold")
)
# 1. Standard DiD model
did_model <- felm(outcome ~ treated + time + treatment | 0 | 0 | state, data = policy_data)
summary(did_model)$coefficients["treatment", ]
# Create lagged variables
policy_data_lagged <- policy_data %>%
arrange(state, time) %>%
group_by(state) %>%
mutate(
lag_outcome = lag(outcome),
lag_treatment = lag(treatment)
) %>%
ungroup() %>%
filter(!is.na(lag_outcome))  # Drop first period for each state
# Estimate the autoregressive component
ar_model <- felm(outcome ~ lag_outcome + treated + time + treatment | 0 | 0 | state,
data = policy_data_lagged)
# Extract key coefficients
rho_hat <- coef(ar_model)["lag_outcome"]
beta_hat <- coef(ar_model)["treatment"]
# Create debiased outcome: subtract treatment effect component from lagged outcome
policy_data_debiased <- policy_data_lagged %>%
mutate(
# Subtract estimated effect of treatment on lag_outcome
debiased_lag_outcome = lag_outcome - beta_hat * lag_treatment
)
# Run debiased model with corrected lagged outcome
ar_debiased_model <- felm(outcome ~ debiased_lag_outcome + treated + time + treatment |
0 | 0 | state, data = policy_data_debiased)
# Compare coefficients
cat("Autoregressive model coefficient:", beta_hat, "\n")
cat("Debiased AR model coefficient:", coef(ar_debiased_model)["treatment"], "\n")
# Prepare data for JAGS
jags_data <- policy_data_lagged %>%
select(state, time, treated, treatment, outcome, lag_outcome, lag_treatment) %>%
mutate(
state_idx = as.numeric(factor(state)),
time_idx = as.numeric(factor(time))
)
# Create data for JAGS
jags_data_list <- list(
N = nrow(jags_data),
S = length(unique(jags_data$state)),
T = length(unique(jags_data$time)),
state = jags_data$state_idx,
time = jags_data$time_idx,
treatment = jags_data$treatment,
treated = jags_data$treated,
lag_treatment = jags_data$lag_treatment,
lag_y = jags_data$lag_outcome,
y = jags_data$outcome
)
# Define JAGS model for DiD
did_model_string <- "
model {
# Priors
alpha ~ dnorm(0, 0.001)
beta_treated ~ dnorm(0, 0.001)
beta_treatment ~ dnorm(0, 0.001)
sigma ~ dunif(0, 100)
tau <- 1 / (sigma * sigma)
# Random effects for states and time
for (s in 1:S) {
state_effect[s] ~ dnorm(0, 0.001)
}
for (t in 1:T) {
time_effect[t] ~ dnorm(0, 0.001)
}
# Likelihood
for (i in 1:N) {
mu[i] <- alpha + beta_treated * treated[i] + beta_treatment * treatment[i] +
state_effect[state[i]] + time_effect[time[i]]
y[i] ~ dnorm(mu[i], tau)
}
}
"
# Define JAGS model for AR with debiasing
ar_model_string <- "
model {
# Priors
alpha ~ dnorm(0, 0.001)
beta_treated ~ dnorm(0, 0.001)
beta_treatment ~ dnorm(0, 0.001)
rho ~ dunif(0, 1)         # Autoregressive coefficient
sigma ~ dunif(0, 100)
tau <- 1 / (sigma * sigma)
# Random effects for states and time
for (s in 1:S) {
state_effect[s] ~ dnorm(0, 0.001)
}
for (t in 1:T) {
time_effect[t] ~ dnorm(0, 0.001)
}
# Likelihood
for (i in 1:N) {
# Debiased autoregressive term
debiased_lag_y[i] <- lag_y[i] - beta_treatment * lag_treatment[i]
mu[i] <- alpha + rho * debiased_lag_y[i] + beta_treated * treated[i] +
beta_treatment * treatment[i] + state_effect[state[i]] + time_effect[time[i]]
y[i] ~ dnorm(mu[i], tau)
}
}
"
# Initialize JAGS models
did_jags <- jags.model(textConnection(did_model_string), data = jags_data_list,
n.chains = 3, n.adapt = 1000)
ar_jags <- jags.model(textConnection(ar_model_string), data = jags_data_list,
n.chains = 3, n.adapt = 1000)
# Burn-in
update(did_jags, 1000)
update(ar_jags, 1000)
# Sample from posterior
did_samples <- coda.samples(did_jags, variable.names = c("beta_treatment"), n.iter = 2000)
ar_samples <- coda.samples(ar_jags, variable.names = c("beta_treatment", "rho"), n.iter = 2000)
# Summarize results
did_summary <- summary(did_samples)
ar_summary <- summary(ar_samples)
# Extract key parameters
did_treatment_effect <- did_summary$statistics["beta_treatment", "Mean"]
# Create predicted values from each model
policy_data_pred <- policy_data %>%
mutate(
did_pred = predict(did_model, newdata = .),
# Need to handle autoregressive predictions differently
# Will do for treated group 1 and control group 26 only for clarity
group = ifelse(state <= n_states/2, "Treated", "Control"),
group_label = case_when(
state == 1 ~ "Treated Unit Example",
state == n_states/2 + 1 ~ "Control Unit Example",
TRUE ~ NA_character_
)
) %>%
filter(!is.na(group_label))
install.packages('ISLR')
library(ISLR)
install.packages('tinytex')
''
4 + 4
2 ** 10
2/5 * 100
x = 4
y <- 5
x + 10
x/y
vec.1 <- c(1, 2, 3, 4)
print(vec.1)
vec.1 <- c(1, 2, 3, 4)
print(vec.1)
vec.1 <- c(1, 2, 3, 4)
print(vec.1)
vec.1 <- c(1, 2, 3, 4)
print(vec.1)
vec.1 <- c(1, 2, 3, 4)
print(vec.1)
print(vec.1[1])
print(vec.1[4])
print(vec.1[c(1,4)])
seq(4)
seq(-4)
seq(from = 100, to = 120, by = 5)
# Help file for seq function
?seq
?seq
word.vec <- c("Hello", "Time To", "Learn", "R", "!")
print(word.vec)
x
print(mean(vec.1))
print(median(vec.1))
print(min(vec.1))
print(max(vec.1))
# Variance and standard deviation
print(var(vec.1))
print(sd(vec.1))
# Comparing vectors
vec.4 <- c(1, 4, 9, 16)
print(vec.4)
print(vec.1 == vec.4)
# Checking if two vectors are exactly the same
print(all.equal(vec.1, vec.2))
vec.2 <- seq(4)
# Checking if two vectors are exactly the same
print(all.equal(vec.1, vec.2))
print(all.equal(vec.1, vec.4))
c('a', 1, 2, 3, 4)
## Example 1:
if (2 + 2 == 5) {
print("Yikes")
} else {
print("Good job!")
}
2 + 2 == 5
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
set.seed(222)
rnorm(1)
set.seed(222)
rnorm(1)
set.seed(222)
rnorm(1)
set.seed(222)
rnorm(1)
set.seed(222)
rnorm(1)
rnorm(1)
rnorm(1)
set.seed(222)
rnorm(1)
rnorm(1)
rnorm(1)
library(ISLR)
College
college.data  <- College
colnames(college.data)
dim(college.data)
typeof(college.data[,1])
typeof(college.data[,2])
View(college.data)
head(college.data$PhD)
college.data$PhD
library(ISLR)
data(College)
college_data  <- College
colnames(college_data)
View(college_data)
dim(college_data)
college_data <- college_data[, -c(15, 2)]
college_data <- College
college_data <- college_data[, -c(2)]
college_data <- college_data[, -c(15)]
college_data <- College
which(names(college_data) %in% c("Apps", "S.F.Ratio"))
to_drop <- which(names(college_data) %in% c("Apps", "S.F.Ratio"))
print(to_drop)
to_drop <- rev(to_drop)
print(to_drop)
college_data <- college_data[, -c(to_drop)]
college_data <- college_data[, -c("Apps", "S.F.Ratio")]
library(dplyr)
college_data %>%
select(-Apps, -S.F.Ratio)
college_data <- college_data[, -c(to_drop)]
college_data <- college_data[, -c(to_drop)]
str(college_data)
college_data <- College
to_drop <- which(names(college_data) %in% c("Apps", "S.F.Ratio"))
print(to_drop)
to_drop <- rev(to_drop)
print(to_drop)
college_data <- college_data[, -c(to_drop)]
str(college_data)
college_data$Private <- as.numeric(college_data$Private) - 1
summary(college_data$Private)
summary(College$Private)
college_data <- College
set.seed(222)
View(college_data)
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
set.seed(222)
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
set.seed(222)
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
set.seed(222)
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
set.seed(222)
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
set.seed(222)
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
set.seed(222)
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
set.seed(222)
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
set.seed(1)
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
set.seed(1)
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
set.seed(1)
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
set.seed(1)
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
set.seed(1)
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
set.seed(1)
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
set.seed(1)
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
set.seed(1)
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
set.seed(2)
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
set.seed(2)
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
set.seed(2)
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
set.seed(2)
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
set.seed(2)
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
set.seed(2)
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
set.seed(2)
sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
test_ids <- sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
training_ids <- which(!(1:(nrow(college_data)) %in% test_ids))
training_ids
testing_ids
test_ids
test_data <- college_data[test_ids,]
training_data <- college_data[training_ids,]
library(class)
knn_model1 <- knn(train = training_data[, -1],
test = test_data[, -1],
cl = training_data[, 1],
k = 1)
knn_model9 <- knn(train = training_data[, -1],
test = test_data[, -1],
cl = training_data[, 1],
k = 9)
knn_model1 <- knn(train = training_data[, -1],
test = test_data[, -1],
cl = training_data$Private,
k = 1)
knn_model9 <- knn(train = training_data[, -1],
test = test_data[, -1],
cl = training_data$Private,
k = 9)
knn_model1
knn_model1
knn_model9
accuracy1  <- length(which(knn_model1 == test_data$Private)) / nrow(test_data)
accuracy9 <- length(which(knn_model9 == test_data$Private)) / nrow(test_data)
print(accuracy1)
print(accuracy9)
training_data[, -1]
library(ggplot2)
ggplot(data = training_data,
aes(x = Outstate, y = F.Undergrad,
color = as.factor(Private))) +
geom_point() +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad),
color = "black", size = 1) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal() +
guides(color = guide_legend(title = "Private"))
print(length(which(test_data$Private == "Yes")) / nrow(test_data))
private_schools <- which(test_data$Private == "Yes")
public_schools <- which(test_data$Private == "No")
print(private_schools)
print(public_schools)
num_private_schools <- length(private_schools)
num_public_schools <- length(public_schools)
private_accuracy1 <- length(
which(knn_model1[private_schools] == test_data$Private[private_schools])) /
num_private_schools
private_accuracy9 <- length(
which(knn_model9[private_schools] == test_data$Private[private_schools])) /
num_private_schools
## Private schools (% correctly predicted):
private_accuracy1 <- length(
which(knn_model1[private_schools] == test_data$Private[private_schools])) /
num_private_schools
private_accuracy9 <- length(
which(knn_model9[private_schools] == test_data$Private[private_schools])) /
num_private_schools
# Public schools (% correctly predicted):
public_accuracy1 <- length(
which(knn_model1[public_schools] == test_data$Private[public_schools])) /
num_public_schools
public_accuracy9 <- length(
which(knn_model9[public_schools] == test_data$Private[public_schools])) /
num_public_schools
print(private_accuracy1)
print(public_accuracy1)
print(private_accuracy9)
print(public_accuracy9)
#install.packages("FNN")
library(FNN)
knn_reg1 <- knn.reg(training_data[, -c(1, 4)],
test_data[, -c(1, 4)],
training_data$Enroll,
k = 1)
knn_reg5 <- knn.reg(training_data[, -c(1, 4)],
test_data[,-c(1, 4)],
training_data$Enroll,
k = 5)
knn_reg1
knn_reg1$pred
mse_knn1 <- mean((knn_reg1$pred - test_data$Enroll)^2)
mse_knn5 <- mean((knn_reg5$pred - test_data$Enroll)^2)
print(mse_knn1)
print(mse_knn5)
enroll_reg <- lm(Enroll ~ ., training_data)
enroll_reg
summary(enroll_reg)
library(stargazer)
stargazer(enroll_reg)
stargazer(enroll_reg, type = "text", single.row = TRUE)
enroll_reg$coefficients
predicted_enroll <- predict(enroll_reg, test_data[, -4])
MSE_lm_enroll <- mean((predicted_enroll - test_data$Enroll)^2)
print(MSE_lm_enroll)
print(mean((enroll_reg$residuals)^2))
print(mean((enroll_reg$residuals)^2) / MSE_lm_enroll)
setwd("~/GitHub/aPD1")
# Load data ---------------------------------------------------------------------
sup.1 <- fread("data/supplementary_table1.tsv") %>%
as.data.frame() %>%
dplyr::select(where(~ !any(is.na(.)))) %>%
mutate(across(c(PD, Primary_type,
Sex, BRAF_status, NRAS_status), as.factor),
BRAF_mutant = ifelse(BRAF_status == "MUTANT", 1, 0),
NRAS_mutant = ifelse(NRAS_status == "MUTANT", 1, 0),
primary_skin = ifelse(Primary_type == "Skin", 1, 0),
sex_male = ifelse(Sex == "MALE", 1, 0)) %>%
dplyr::select(-Primary_type, -BRAF_status, -NRAS_status, -Sex,
-`Sample ID`, -BR, -RvsP, -cohort, -os_days,
-dead, -DT_pred, -DT_mod_pred, -ploidy_q, -het_q, -TMB_q,
-logreg_pred, -PD_cat, X.clonal = `#clonal`,
X.subclon = `#subclon`)
library(data.table)
library(caret)
library(Matrix)
library(tidyverse)
library(pROC)
library(MASS)
library(rpart)
library(rpart.plot)
library(e1071)
library(kernlab)  # For SVM with caret
# Load data ---------------------------------------------------------------------
sup.1 <- fread("data/supplementary_table1.tsv") %>%
as.data.frame() %>%
dplyr::select(where(~ !any(is.na(.)))) %>%
mutate(across(c(PD, Primary_type,
Sex, BRAF_status, NRAS_status), as.factor),
BRAF_mutant = ifelse(BRAF_status == "MUTANT", 1, 0),
NRAS_mutant = ifelse(NRAS_status == "MUTANT", 1, 0),
primary_skin = ifelse(Primary_type == "Skin", 1, 0),
sex_male = ifelse(Sex == "MALE", 1, 0)) %>%
dplyr::select(-Primary_type, -BRAF_status, -NRAS_status, -Sex,
-`Sample ID`, -BR, -RvsP, -cohort, -os_days,
-dead, -DT_pred, -DT_mod_pred, -ploidy_q, -het_q, -TMB_q,
-logreg_pred, -PD_cat, X.clonal = `#clonal`,
X.subclon = `#subclon`)
sup.2 <- fread("data/supplementary_table2.tsv") %>%
as.data.frame()
sup.3 <- fread("data/supplementary_table3.tsv") %>%
as.data.frame() %>%
dplyr::rename(X.clonal = `#clonal`, X.subclon = `#subclon`)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(ISLR)
?ISLR
??ISLR
data('Credit')
plot(Credit$Income, Credit$Balance,
xlab = "Income",
ylab = "Balance",
main = "Scatter plot of Balance vs. Income")
# make it prettier
plot(Credit$Income, Credit$Balance,
xlab = "Income",
ylab = "Balance",
main = "Scatter plot of Balance vs. Income",
col = "blue", pch = 19)
ggplot(Credit, aes(x = Income, y = Balance)) +
geom_point(color = "blue", alpha = 0.5) +
labs(title = "Scatter plot of Balance vs. Income",
x = "Income",
y = "Balance") +
theme_minimal()
# make it aesthetic and use ggplot
library(ggplot2)
# make it aesthetic and use ggplot
library(ggplot2)
ggplot(Credit, aes(x = Income, y = Balance)) +
geom_point(color = "blue", alpha = 0.5) +
labs(title = "Scatter plot of Balance vs. Income",
x = "Income",
y = "Balance") +
theme_minimal()
summary(Credit)
sd(Credit$Income)
mean(Credit$Income)
model <- lm(Balance ~ Income, data = Credit)
summary(model)
library(stargaazer)
library(stargazer)
stargazer(model)
library(stargazer)
model <- lm(Balance ~ Income, data = Credit)
stargazer(model, type = "text")
stargazer(model, type = "QJE")
stargazer(model, style = "QJE")
library(stargazer)
model <- lm(Balance ~ Income, data = Credit)
stargazer(model, style = "QJE")
# make a stargazer model without the extra message
?stargazer
library(tidyverse)
plot(Credit$Income, Credit$Balance, xlab = "Income", ylab = "Balance", main = "Balance vs Income")
abline(model, col = "red")
glm(Balance ~ Income, data = Credit)
