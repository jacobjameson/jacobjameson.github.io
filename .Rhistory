library(tufte)
library(tidyverse)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
set.seed(0)
n <- 1000  # Number of observations
X <- matrix(rnorm(n * 2), ncol = 2)  # Two covariates
beta <- c(0.5, -0.25)  # True effect sizes
intercept <- 0.2  # True intercept
noise <- rnorm(n) * 0.5  # Noise
# Linear outcome
linear_y <- intercept + X %*% beta + noise
# Binary outcome
binary_y <- as.integer(linear_y > 0)
ols_fit <- lm(linear_y ~ X)
summary(ols_fit)
logit_fit <- glm(binary_y ~ X, family = binomial)
summary(logit_fit)
exp(1.83890)
linear_y
#| code-fold: true
#| code-summary: "Sample Solution"
#|
# Subsetting data frame
small_college <- college_data[college_data$Enroll < 5000, ]
college.data  <- College
library(ISLR)
college.data  <- College
#| code-fold: true
#| code-summary: "Sample Solution"
#|
# Subsetting data frame
small_college <- college_data[college_data$Enroll < 5000, ]
#| code-fold: true
#| code-summary: "Sample Solution"
#|
# Subsetting data frame
small.college <- college.data[college.data$Enroll < 5000, ]
print(small.college)
library(ISLR)
data(College)
college_data  <- College
colnames(college_data)
college_data <- college_data[, -c('Apps', 'S.F.Ratio')]
# filter our apps from the data columns
college_data <- college_data[, -c('Apps', 'S.F.Ratio')]
# generate test ids
test_ids <- sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
training_ids <- which(!(1:(nrow(college_data)) %in% test_ids))
knn_model1 <- knn(train = training_data[, -1],
test = test_data[, -1],
cl = training_data[, 1],
k = 1)
set.seed(222)
test_ids <- sample(1:(nrow(college_data)), round(0.2 * nrow(college_data)))
training_ids <- which(!(1:(nrow(college_data)) %in% test_ids))
test_data <- college_data[test_ids,]
training_data <- college_data[training_ids,]
library(class)
knn_model1 <- knn(train = training_data[, -1],
test = test_data[, -1],
cl = training_data[, 1],
k = 1)
knn_model9 <- knn(train = training_data[, -1],
test = test_data[, -1],
cl = training_data[, 1],
k = 9)
accuracy1  <- length(which(knn_model1 == test_data$Private)) / nrow(test_data)
accuracy9 <- length(which(knn_model9 == test_data$Private)) / nrow(test_data)
print(accuracy1)
print(accuracy9)
print(length(which(test_data$Private == "Yes")) / nrow(test_data))
private_schools <- which(test_data$Private == "Yes")
public_schools <- which(test_data$Private == "No")
print(private_schools)
print(public_schools)
ggplot(data = college_data, aes(x = Outstate, y = F.Undergrad, color = as.factor(Private))) +
geom_point() +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad), color = "black", size = 3, shape = 1) +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad, color = as.factor(knn_model1)), size = 3) +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad, color = as.factor(knn_model9)), size = 3) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
# visualize how KNN works with two features
library(ggplot2)
ggplot(data = college_data, aes(x = Outstate, y = F.Undergrad, color = as.factor(Private))) +
geom_point() +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad), color = "black", size = 3, shape = 1) +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad, color = as.factor(knn_model1)), size = 3) +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad, color = as.factor(knn_model9)), size = 3) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
ggplot(data = test_data, aes(x = Outstate, y = F.Undergrad, color = as.factor(Private))) +
geom_point() +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad),
color = "black", size = 3, shape = 1) +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad,
color = as.factor(knn_model1)), size = 3) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
as.factor(knn_model1)
ggplot(data = train_data,
aes(x = Outstate, y = F.Undergrad,
color = as.factor(Private))) +
geom_point() +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad),
color = "black", size = 3, shape = 1) +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad,
color = as.factor(knn_model1)), size = 3) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
ggplot(data = training_data,
aes(x = Outstate, y = F.Undergrad,
color = as.factor(Private))) +
geom_point() +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad),
color = "black", size = 3, shape = 1) +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad,
color = as.factor(knn_model1)), size = 3) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
color = 'grey50', size = 3) +
ggplot(data = training_data,
aes(x = Outstate, y = F.Undergrad,
color = as.factor(Private))) +
geom_point() +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad),
color = "black", size = 3, shape = 1) +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad,
color = 'grey50', size = 3)) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
ggplot(data = training_data,
aes(x = Outstate, y = F.Undergrad,
color = as.factor(Private))) +
geom_point() +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad),
color = "black", size = 3, shape = 1) +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad), size = 3)) +
ggplot(data = training_data,
aes(x = Outstate, y = F.Undergrad,
color = as.factor(Private))) +
geom_point() +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad),
color = "black", size = 3, shape = 1) +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad), size = 3) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
ggplot(data = training_data,
aes(x = Outstate, y = F.Undergrad,
color = as.factor(Private))) +
geom_point() +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad),
color = "black", size = 3, shape = 1) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
ggplot(data = training_data,
aes(x = Outstate, y = F.Undergrad,
color = as.factor(Private))) +
geom_point() +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad),
fill = "black", size = 3, shape = 1) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
ggplot(data = training_data,
aes(x = Outstate, y = F.Undergrad,
color = as.factor(Private))) +
geom_point() +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad),
color = "black", size = 3) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
ggplot(data = training_data,
aes(x = Outstate, y = F.Undergrad,
color = as.factor(Private))) +
geom_point() +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad),
color = "black", size = 1) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
ggplot(data = training_data,
aes(x = Outstate, y = F.Undergrad,
color = as.factor(Private))) +
geom_point() +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad),
color = "black", size = 1) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal() +
# draw a line from points to connect nearest neighbors
geom_segment(data = test_data,
aes(x = Outstate, y = F.Undergrad,
xend = Outstate, yend = F.Undergrad),
color = "black", alpha = 0.3)
ggplot(data = training_data,
aes(x = Outstate, y = F.Undergrad,
color = as.factor(Private))) +
geom_point() +
geom_point(data = test_data, aes(x = Outstate, y = F.Undergrad),
color = "black", size = 1) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal() +
# fix legend
guides(color = guide_legend(title = "Private"))
private_accuracy1 <- length(
which(knn_model1[private_schools] == test_data$Private[private_schools])) /
num_private_schools
num_private_schools <- length(private_schools)
num_public_schools <- length(public_schools)
private_accuracy1 <- length(
which(knn_model1[private_schools] == test_data$Private[private_schools])) /
num_private_schools
private_accuracy9 <- length(
which(knn_model9[private_schools] == test_data$Private[private_schools])) /
num_private_schools
```{r}
knn_reg1 <- knn.reg(training_data[, -c(1, 4)],
test_data[, -c(1, 4)],
training_data$Enroll,
k = 1)
#install.packages("FNN")
library(FNN)
#install.packages("FNN")
library(FNN)
knn_reg1 <- knn.reg(training_data[, -c(1, 4)],
test_data[, -c(1, 4)],
training_data$Enroll,
k = 1)
knn_reg5 <- knn.reg(training_data[, -c(1, 4)],
test_data[,-c(1, 4)],
training_data$Enroll,
k = 5)
mse_knn1 <- mean((knn_reg1$pred - test_data$Enroll)^2)
mse_knn5 <- mean((knn_reg5$pred - test_data$Enroll)^2)
mse_knn1 <- mean((knn_reg1$pred - test_data$Enroll)^2)
mse_knn5 <- mean((knn_reg5$pred - test_data$Enroll)^2)
print(mse_knn1)
print(mse_knn5)
predicted_enroll <- predict(enroll_reg, test_data$Enroll)
enroll_reg <- lm(Enroll ~ ., training_data)
enroll_reg$coefficients
summary(enroll_reg)
predicted_enroll <- predict(enroll_reg, test_data$Enroll)
predicted_enroll <- predict(enroll_reg, test_data[, -4]l)
predicted_enroll <- predict(enroll_reg, test_data[, -4])
MSE_lm_enroll <- mean((predicted_enroll - test_data$Enroll)^2)
print(MSE_lm_enroll)
```{r}
print(mean((enroll_reg$residuals)^2))
print(mean((enroll_reg$residuals)^2) / MSE_lm_enroll)
small_enroll_reg  <- lm(Enroll ~ Apps + Accept, training_data)
